<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[React应用优化]]></title>
      <url>https://qimajiang.com/2018/11/21/React%E5%BA%94%E7%94%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>随着功能不断增加，不断迭代更新，React应用会越来越臃肿了，性能也将随之下降。本文从打包和运行两个方面着手，谈谈React应用改如何优化。<br><a id="more"></a></p>
<h1 id="一、webpack打包优化"><a href="#一、webpack打包优化" class="headerlink" title="一、webpack打包优化"></a>一、webpack打包优化</h1><h2 id="1、缓存node-moduels"><a href="#1、缓存node-moduels" class="headerlink" title="1、缓存node_moduels"></a>1、缓存<code>node_moduels</code></h2><p>我公司的项目每次上线部署的时候，虽然说都要要Jenkins上，但项目越来越多，每个项目部署占用时间都很长，导致每次部署完一个环境的所有项目耗费很多时间。</p>
<p>如果将同一项目的<code>node_mudules</code>在每次打包完毕后缓存起来，下次打包前先判断是否与上次<code>node_moduels</code>相同。若相同，则直接使用上次缓存的<code>node_modules</code>,否则才重新安装依赖包。</p>
<p>那该如何实现上面所说的逻辑？</p>
<ul>
<li>检查<code>packages.json</code>的 <code>md5</code>；</li>
<li>打包完成后以该次<code>packages.json</code>的<code>md5</code>值作为文件名，压缩<code>node_modules</code>并缓存到指定位置；</li>
<li>下次打包前，同样先检查当次<code>packages.json</code>的 <code>md5</code>，若相同直接使用上次的<code>node_moduels</code>;</li>
</ul>
<p>具体的SHELL如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PKG_SUM=$(md5sum package.json | cut -d\  -f <span class="number">1</span>)</span><br><span class="line">NPM_TARBALL_CACHE=$&#123;HOME&#125;/.cache/ReactCache/npmtarball/reactSPA</span><br><span class="line">NPM_TARBALL=node_modules-$&#123;PKG_SUM&#125;.tgz</span><br><span class="line">NPM_TARBALL_MD5SUM=$&#123;NPM_TARBALL&#125;.md5sum</span><br><span class="line">		[ ! -e $&#123;NPM_TARBALL_CACHE&#125; ] &amp;&amp; mkdir -p $&#123;NPM_TARBALL_CACHE&#125;</span><br><span class="line">   </span><br><span class="line">    TARBALL=$&#123;NPM_TARBALL_CACHE&#125;/$&#123;NPM_TARBALL&#125;</span><br><span class="line">    TARBALLMD5SUM=$&#123;NPM_TARBALL_CACHE&#125;/$&#123;NPM_TARBALL_MD5SUM&#125; </span><br><span class="line">    echo <span class="string">"checking node modules "</span>$&#123;TARBALL&#125;</span><br><span class="line">    <span class="keyword">if</span> [ ! -f $&#123;TARBALL&#125; ];then          </span><br><span class="line">            echo <span class="string">"package.json has some changes, reinstall node modules"</span></span><br><span class="line">            rm -rf $&#123;NPM_TARBALL_CACHE&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">         		yarn</span></span><br><span class="line"><span class="comment">         		echo "yarn success"</span></span><br><span class="line"><span class="comment">         		if [ -d node_modules ];then</span></span><br><span class="line"><span class="comment">         			echo "tar and caching..." </span></span><br><span class="line"><span class="comment">             	tar zcf $&#123;TARBALL&#125; node_modules || return 1</span></span><br><span class="line"><span class="comment">             	md5sum $&#123;TARBALL&#125; &gt; $&#123;TARBALLMD5SUM&#125;</span></span><br><span class="line"><span class="comment">             	echo "checking current MD5."</span></span><br><span class="line"><span class="comment">             	md5sum -c $&#123;TARBALLMD5SUM&#125; || rm -f $&#123;TARBALL&#125; $&#123;TARBALLMD5SUM&#125;  </span></span><br><span class="line"><span class="comment">             	echo "install completed, cached" </span></span><br><span class="line"><span class="comment">       			fi         	     		</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    		echo "package.json has no changes, clone previous node modules"</span></span><br><span class="line"><span class="comment">    		if [  -d node_modules ];then</span></span><br><span class="line"><span class="comment">    				echo "node_modules dir existed "$&#123;TARBALL&#125;</span></span><br><span class="line"><span class="comment">    			else</span></span><br><span class="line"><span class="comment">    				echo "unpacking..."	$&#123;TARBALL&#125;    	</span></span><br><span class="line"><span class="comment">    				tar  xzf $&#123;TARBALL&#125;   </span></span><br><span class="line"><span class="comment">    		fi</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    fi</span></span><br><span class="line"><span class="comment">chmod -R a+rwx node_modules</span></span><br></pre></td></tr></table></figure>
<h2 id="2、加速代码压缩"><a href="#2、加速代码压缩" class="headerlink" title="2、加速代码压缩"></a>2、加速代码压缩</h2><p><code>webpack</code>提供的UglifyJS插件由于采用单线程压缩，速度很慢 ,<br><code>webpack-parallel-uglify-plugin</code>插件可以并行运行<code>UglifyJS</code>插件，这可以有效减少构建时间，当然，该插件应用于生产环境而非开发环境，配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ParallelUglifyPlugin = <span class="built_in">require</span>(<span class="string">'webpack-parallel-uglify-plugin'</span>);</span><br><span class="line"><span class="keyword">new</span> ParallelUglifyPlugin(&#123;</span><br><span class="line">   cacheDir: <span class="string">'.cache/'</span>,</span><br><span class="line">   uglifyJS:&#123;</span><br><span class="line">     output: &#123;</span><br><span class="line">       comments: <span class="literal">false</span></span><br><span class="line">     &#125;,</span><br><span class="line">     compress: &#123;</span><br><span class="line">       warnings: <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="3、HappyPack加速构建"><a href="#3、HappyPack加速构建" class="headerlink" title="3、HappyPack加速构建"></a>3、<code>HappyPack</code>加速构建</h2><p><code>happypack</code>的原理是让loader可以多进程去处理文件，原理如图示：</p>
<p><img src="https://camo.githubusercontent.com/d819eb6ed893a849f0a83e1cb0b69a2c37e768b4/68747470733a2f2f73692e6765696c6963646e2e636f6d2f687a5f696d675f303864623030303030313561333536326361363830613032363836305f3830305f3438365f756e61646a7573742e706e67" alt=""></p>
<p>目前项目中基本只对js和less文件使用<code>HappyPack</code>加速,具体配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>),</span><br><span class="line">  os = <span class="built_in">require</span>(<span class="string">'os'</span>),</span><br><span class="line">  happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: os.cpus().length &#125;);</span><br><span class="line"></span><br><span class="line">modules: &#123;</span><br><span class="line">	loaders: [</span><br><span class="line">	  &#123;</span><br><span class="line">        test: <span class="regexp">/\.js|jsx$/</span>,</span><br><span class="line">        loader: <span class="string">'HappyPack/loader?id=jsHappy'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'jsHappy'</span>,</span><br><span class="line">      cache: <span class="literal">true</span>,</span><br><span class="line">      threadPool: happyThreadPool,</span><br><span class="line">      loaders: [&#123;</span><br><span class="line">        path: <span class="string">'babel'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          cacheDirectory: <span class="string">'.webpack_cache'</span>,</span><br><span class="line">          presets: [</span><br><span class="line">            <span class="string">'es2015'</span>,</span><br><span class="line">            <span class="string">'react'</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//如果有单独提取css文件的话</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'lessHappy'</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>,<span class="string">'css'</span>,<span class="string">'less'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>
<h2 id="4、DLL-amp-DllReference"><a href="#4、DLL-amp-DllReference" class="headerlink" title="4、DLL&amp; DllReference"></a>4、<code>DLL</code>&amp; <code>DllReference</code></h2><p>针对第三方<code>NPM</code>包，这些包我们并不会修改它，但仍然每次都要在build的过程消耗构建性能，我们可以通过<code>DllPlugin</code>来前置这些包的构建.<br>我们使用<code>dllplugin</code>把第三方的NPM包生成一个名为 <code>manifest.json</code> 的文件，这个文件是用来让 <code>DLLReferencePlugin</code> 映射到相关的依赖上去的。在文件中引入该dll文件即可。<br>其原理是通过引用 <code>dll</code> 的 <code>manifest</code> 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <code>__webpack_require__</code> 函数来 <code>require</code> 他们。</p>
<p>但对于<code>antd</code>这样的按需加载UI库，不能放在<code>dll</code>中，否则会全部打包进去，按需加载就无效了。</p>
<p>具体配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///dll.entry.js 定义dll的入口</span></span><br><span class="line"><span class="keyword">const</span> DLL_ENTRY = &#123;</span><br><span class="line">	react: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-router-dom'</span>, <span class="string">'prop-types'</span>],</span><br><span class="line">	echarts: [<span class="string">'echarts'</span>],</span><br><span class="line">	vendor: [<span class="string">'mobx'</span>, <span class="string">'mobx-react'</span>, <span class="string">'axios'</span>],</span><br><span class="line">	db: [<span class="string">'dexie'</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义需要dll 分离的包名</span></span><br><span class="line"><span class="keyword">const</span> DLL_CHUNKS_NAME = <span class="built_in">Object</span>.keys(DLL_ENTRY);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; DLL_ENTRY, DLL_CHUNKS_NAME &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dll.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> dllConstants = <span class="built_in">require</span>(<span class="string">'./dll.entry.js'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: dllConstants.DLL_ENTRY,</span><br><span class="line">	output: &#123;</span><br><span class="line">		filename: <span class="string">'[name].dll.js'</span>, <span class="comment">// 动态链接库输出的文件名称</span></span><br><span class="line">		path: path.join(__dirname, <span class="string">'../dll'</span>), <span class="comment">// 动态链接库输出路径</span></span><br><span class="line">		libraryTarget: <span class="string">'var'</span>, <span class="comment">// 链接库(react.dll.js)输出方式 默认'var'形式赋给变量 b</span></span><br><span class="line">		library: <span class="string">'_dll_[name]_[hash]'</span> <span class="comment">// 全局变量名称 导出库将被以var的形式赋给这个全局变量 通过这个变量获取到里面模块</span></span><br><span class="line">	&#125;,</span><br><span class="line">	plugins: [</span><br><span class="line">		<span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">			<span class="comment">// path 指定manifest文件的输出路径</span></span><br><span class="line">			path: path.join(__dirname, <span class="string">'../dll'</span>, <span class="string">'[name].manifest.json'</span>),</span><br><span class="line">			context: __dirname,</span><br><span class="line">			name: <span class="string">'_dll_[name]_[hash]'</span> <span class="comment">// 和library 一致，输出的manifest.json中的name值</span></span><br><span class="line">		&#125;)</span><br><span class="line">	]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dll.utils.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> constants = <span class="built_in">require</span>(<span class="string">'../conf/dll.js'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlIncludeAssetsPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-include-assets-plugin'</span>);</span><br><span class="line"><span class="comment">//创建 dll 的关联包，返回[]</span></span><br><span class="line"><span class="comment">// 当我们需要使用动态链接库时 首先会找到manifest文件 得到name值记录的全局变量名称 然后找到动态链接库文件 进行加载</span></span><br><span class="line"><span class="keyword">const</span> createDllReferences = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> dllChunks = constants.DLL_CHUNKS_NAME;</span><br><span class="line">	<span class="keyword">const</span> tmpArr = [];</span><br><span class="line">	dllChunks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">		tmpArr.push(</span><br><span class="line">			<span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">				manifest: <span class="built_in">require</span>(path.join(__dirname, <span class="string">`../../dll/<span class="subst">$&#123;item&#125;</span>.manifest.json`</span>)) <span class="comment">//)</span></span><br><span class="line">			&#125;)</span><br><span class="line">		);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> tmpArr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//copy dll 的文件到输出目录</span></span><br><span class="line"><span class="keyword">const</span> copyDllToAssets = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> dllChunks = constants.DLL_CHUNKS_NAME;</span><br><span class="line">	<span class="keyword">const</span> tmpArr = [];</span><br><span class="line">	dllChunks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">		tmpArr.push(&#123; <span class="attr">from</span>: <span class="string">`dll/<span class="subst">$&#123;item&#125;</span>.dll.js`</span>, <span class="attr">to</span>: <span class="string">'dll'</span> &#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> CopyWebpackPlugin(tmpArr);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对dll资源添加相对html的路径</span></span><br><span class="line"><span class="keyword">const</span> addDllHtmlPath = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> dllChunks = constants.DLL_CHUNKS_NAME;</span><br><span class="line">	<span class="keyword">const</span> tmpArr = [];</span><br><span class="line">	dllChunks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">		tmpArr.push(<span class="string">`dll/<span class="subst">$&#123;item&#125;</span>.dll.js`</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> HtmlIncludeAssetsPlugin(&#123;</span><br><span class="line">		assets: tmpArr, <span class="comment">// 添加的资源相对html的路径</span></span><br><span class="line">		append: <span class="literal">false</span> <span class="comment">// false 在其他资源的之前添加 true 在其他资源之后添加</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; createDllReferences, copyDllToAssets, addDllHtmlPath &#125;;</span><br></pre></td></tr></table></figure>
<p>然后在<code>build.config.js</code>中加入dll插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dllUtils.copyDllToAssets(),</span><br><span class="line">...dllUtils.createDllReferences(),</span><br><span class="line">dllUtils.addDllHtmlPath(),</span><br></pre></td></tr></table></figure>
<h2 id="5、缓存dll"><a href="#5、缓存dll" class="headerlink" title="5、缓存dll"></a>5、缓存<code>dll</code></h2><p>对于上文所说的，使用dll抽离第三方npm库可以加速打包，但还存在一种情况就是，dll可能很久不会改变，那每次<code>build</code>的时候都要重新生成dll包，要不然每次收到复制到指定目录。</p>
<p>参考<code>node_modules</code>的缓存机制，我们可以将生成的<code>dll</code>包缓存起来，每次检查对象<code>dll.entry.js</code>的<code>md5</code>值，只要dll的入口定义不变则认为无需生成新的dll包。具体配置就不写了，跟上面的差不多。</p>
<h2 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h2><ul>
<li>开启<code>devtool: &quot;#inline-source-map&quot;</code>会增加编译时间</li>
<li><code>DedupePlugin</code>插件可以在打包的时候删除重复或者相似的文件，实际测试中应该是文件级别的重复的文件</li>
<li>减少构建搜索或编译路径</li>
<li>缓存与增量构建:<code>babel-loader</code>可以缓存处理过的模块，对于没有修改过的文件不会再重新编译，<code>cacheDirectory</code>有着2倍以上的速度提升，这对于rebuild 有着非常大的性能提升。</li>
</ul>
<h1 id="二、React运行优化"><a href="#二、React运行优化" class="headerlink" title="二、React运行优化"></a>二、React运行优化</h1><h2 id="1、组件懒加载"><a href="#1、组件懒加载" class="headerlink" title="1、组件懒加载"></a>1、组件懒加载</h2>]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器持久化存储那些事]]></title>
      <url>https://qimajiang.com/2018/10/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>现在前后端分离是比较流行的开发方案，在 SPA 的开发过程中难免需要存储一些数据到浏览器，比如认证判断的 <code>Token</code> 。现代常用浏览器的本地持久存储方案基本分为<code>Cookie</code>、 <code>LocalStorage（sessionStorage）</code>和<code>IndexedDB</code>。本文就不讨论 <code>Cookie</code>了。</p>
<a id="more"></a>
<h1 id="一、LocalStorage-sessionStorage-的概念"><a href="#一、LocalStorage-sessionStorage-的概念" class="headerlink" title="一、LocalStorage(sessionStorage)的概念"></a>一、<code>LocalStorage(sessionStorage)</code>的概念</h1><p>LocalStorage 是 HTML5加入的一个新特性，从命名就知道其目的是作为本地存储来使用，解决了 <code>Cookie</code> 存储空间不足的问题，一般 <code>LocalStorage</code> 在浏览器的存储空间是<code>5MB</code>,而 <code>Cookie</code>中每条 <code>cookie</code> 大约是<code>4KB</code>。<code>SessionStorage</code> 与 <code>LocalStorage</code> 唯一的区别是：<code>SessionStorage</code> 在会话结束时就会被 清空数据，而<code>LocalStorage</code> 可以持久存储。</p>
<h2 id="LocalStorage的优劣"><a href="#LocalStorage的优劣" class="headerlink" title="LocalStorage的优劣"></a><code>LocalStorage</code>的优劣</h2><p>1、<code>LocalStorage</code>存储空间明显提升，可以存储较多的数据；</p>
<p>2、<code>LocalStorage</code>可以长久存储数据，只要存储一次就可以长久保留在本地，除非主动清空数据；</p>
<p>3、<code>LocalStorage</code>是 <code>HTML5</code>的新特性，只会被现代浏览器支持，IE8以下的IE浏览器就不支持该特性;</p>
<p>4、<code>LocalStorage</code> 只能存储字符串</p>
<p>5、在隐私模式下，不能使用 <code>LocalStorage</code>;</p>
<p>6、<code>LocalStorage</code> 不会被爬虫嗅探并抓取；</p>
<p>7、<code>LocalStorage</code>的使用是遵循同源策略。</p>
<h2 id="LocalStorage的使用方法"><a href="#LocalStorage的使用方法" class="headerlink" title="LocalStorage的使用方法"></a><code>LocalStorage</code>的使用方法</h2><p>1、在使用 <code>LocalStorage</code>之前需要检测当前浏览器是否支持。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.localStorage)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"浏览器 不支持LocalStorage"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//正常使用 LocalStorage</span></span><br></pre></td></tr></table></figure>
<p>2、<code>LocalStorage</code> 的数据写入可以有3种方式，其实都是键值对操作：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.localStorage)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"浏览器 不支持LocalStorage"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//正常使用 LocalStorage</span></span><br><span class="line"> <span class="keyword">const</span> storage=<span class="built_in">window</span>.localStorage;</span><br><span class="line">           </span><br><span class="line">            storage[<span class="string">"count"</span>]=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            storage.name=<span class="string">'qimajiang'</span>;</span><br><span class="line">            <span class="comment">//写入存储进去的搜索字符串类型</span></span><br><span class="line">            storage.setItem(<span class="string">"other"</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>一般使用 <code>storage.setItem</code>这种方式比较好。</p>
<p>3、<code>LocalStorage</code> 的数据读取</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.localStorage)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"浏览器 不支持LocalStorage"</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//正常使用 LocalStorage</span></span><br><span class="line"> <span class="keyword">const</span> storage=<span class="built_in">window</span>.localStorage;</span><br><span class="line">           </span><br><span class="line">           <span class="built_in">console</span>.log(storage[<span class="string">'count'</span>])<span class="comment">//1</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.log(storage.name);<span class="comment">//'qimajiang'</span></span><br><span class="line">            </span><br><span class="line">           <span class="built_in">console</span>.log(storage.getItem(<span class="string">"other"</span>);)<span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>一般使用 <code>storage.getItem</code>这种方式比较好。</p>
<p>4、<code>LocalStorage</code> 的其他数据操作</p>
<p>删除某个键值:<code>window.localStorage.removeItem(&#39;key&#39;)</code></p>
<p>清空当前网站的<code>LocalStorage</code>：<code>window.localStorage.clear()</code></p>
<hr>
<p>一般使用 <code>LocalStorage</code> 来存储简单的数据（字符串）就可以满足了，但在日益复杂的应用开发中，难免需要存储复杂的结构化数据，而且有可能存储的数据超过<code>5MB</code>,这时我们就需要考虑使用 <code>IndexedDB</code> 了</p>
<hr>
<h1 id="二、IndexedDB-的概念"><a href="#二、IndexedDB-的概念" class="headerlink" title="二、IndexedDB 的概念"></a>二、<code>IndexedDB</code> 的概念</h1><p>1、<code>IndexedDB</code>顾名思义是一种内置在浏览器中数据库，而且是一种非关系型的数据库，即不需要编写<code>SQL</code>语句去操作数据库，而且存储的数据格式是<code>JSON</code>。</p>
<p>2、<code>IndexedDB</code>不像我们平时服务器上使用的 NoSQL 数据库，<code>IndexedDB</code>没有表的概念，在<code>IndexedDB</code>中是叫<code>object store</code>,其实平时就可以把<code>object store</code>看做数据表。</p>
<p>3、<code>IndexedDB</code>的每次操作都是一个事务，每一个对数据库操作是在一个事务的上下文中执行的。</p>
<p>4、<code>IndexedDB</code>的每次数据库操作都需要先打款<code>object store</code>，再执行指定的操作，不能一直打开某个<code>object store</code>。</p>
<p>5、<code>IndexedDB</code>的所有操作都是异步的。</p>
<h1 id="三、IndexedDB在-React-中的实践"><a href="#三、IndexedDB在-React-中的实践" class="headerlink" title="三、IndexedDB在 React 中的实践"></a>三、<code>IndexedDB</code>在 <code>React</code> 中的实践</h1><p>因为我目前主要专注<code>React</code>项目的开发,而且<code>IndexedDB</code>的原生 api 有点奇怪，在我的项目中我是使用 <a href="https://dexie.org/" target="_blank" rel="noopener">Dexie</a>这个基于<code>IndexedDB</code>api 封装的操作库。后面就阐述一下如何使用<code>Dexie</code>进行<code>IndexedDB</code>的数据操作。</p>
<p>1、安装<code>npm i -S dexie</code></p>
<p>2、在项目根目录建立一个<code>db</code>文件夹，新建一个文件<code>db.js</code>,在<code>db.js</code>中定义数据库；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dexie <span class="keyword">from</span> <span class="string">'dexie'</span>;</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Dexie(<span class="string">'HXDB'</span>);</span><br><span class="line"><span class="comment">//系统所有权限列表的数据</span></span><br><span class="line"><span class="keyword">const</span> SYSTEM_ALL_PERMISSIONS_SCHEMA = <span class="string">'code, name, module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DEXIE_STORES_1 = &#123;</span><br><span class="line"> </span><br><span class="line">	SYSTEM_ALL_PERMISSIONS: SYSTEM_ALL_PERMISSIONS_SCHEMA</span><br><span class="line">&#125;;</span><br><span class="line">db.version(<span class="number">2</span>).stores(DEXIE_STORES_1);</span><br><span class="line">db.version(<span class="number">1</span>).stores(DEXIE_STORES_1);<span class="comment">//定义版本</span></span><br><span class="line">db.open();<span class="comment">//打开数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> db;<span class="comment">//模块化导出</span></span><br></pre></td></tr></table></figure>
<p><code>IndexedDB</code>使用 <code>version</code> 来区分不同版本号，因为不同的版本可能使用不同的 <code>store</code> 结构，每次更改 <code>store</code> 的结构，需要增加 <code>version</code> 的值，而且旧的版本需要保留。</p>
<p>3、数据操作</p>
<p>在<code>db</code>目录中新建<code>operations.js</code>文件，定义一些常用的数据操作方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> db <span class="keyword">from</span> <span class="string">'db/db'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By xun  on 2018-08-16 17:14.</span></span><br><span class="line"><span class="comment"> * Description: operations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getDBAllDataArray = <span class="keyword">async</span> tableName =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> myTable = <span class="keyword">await</span> db[tableName];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> myTable.toArray();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getDBDataByKey = <span class="function">(<span class="params">tableName, key</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> db.table(tableName).get(key);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 单个添加</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addDBData = <span class="function">(<span class="params">tableName, values</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> db.table(tableName).add(values);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量添加</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addDBDataBatch = <span class="function">(<span class="params">tableName, values</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> db.table(tableName).bulkAdd(values);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存在就更新， 否则添加</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> softInsertDBData = <span class="keyword">async</span> (tableName, values, key = <span class="literal">null</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">if</span> (!key) &#123;</span><br><span class="line">		<span class="keyword">return</span> addDBData(tableName, values);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> existed = <span class="keyword">await</span> getDBDataByKey(tableName, key);</span><br><span class="line">	<span class="keyword">if</span> (existed) &#123;</span><br><span class="line">		<span class="keyword">return</span> db.table(tableName).update(key, values);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> addDBData(tableName, values);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteDBDataByKey = <span class="keyword">async</span> (tableName, key) =&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> db.table(tableName).delete(key);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> clearAllDBData = <span class="keyword">async</span> tableName =&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> db.table(tableName).clear();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 若要增加其他特殊的数据操作，就直接在<code>operations.js</code>文件中增加方法即可，避免重复的编码。</p>
<hr>
<p><code>IndexedDB</code>理论上的存储空间是电脑硬盘容量的一般，所以存储空间超级充足了。</p>
<hr>
<h1 id="四、解决IndexedDB的异步问题"><a href="#四、解决IndexedDB的异步问题" class="headerlink" title="四、解决IndexedDB的异步问题"></a>四、解决<code>IndexedDB</code>的异步问题</h1><p>前文有提到<code>IndexedDB</code>的所有数据操作都是异步的，在一些情况下我们需要模拟同步操作，例如把菜单的配置放在<code>IndexedDB</code>中，那么每次从<code>IndexedDB</code>获取到菜单定义数据后需要回调数据显示，有点麻烦。我在项目中使用<code>mobx</code>状态管理器来同步所有的<code>IndexedDB</code>数据，只有不刷新页面，就可以同步操作<code>IndexedDB</code>数据了。目前都是读取操作，数据都是从服务器配置好的，存储在<code>IndexedDB</code>是不需要每次从服务器获取。</p>
<p>一般在更新<code>IndexedDB</code>中数据的时候，就更新<code>mobx</code>中的 store数据。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>浏览器的本次存储在现在 web 应用开发中还是比较重要的，掌握了这些前端本地存储方法有利于提升应用以及应用共享数据。</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用React一年的简单总结]]></title>
      <url>https://qimajiang.com/2018/09/14/%E4%BD%BF%E7%94%A8React%E4%B8%80%E5%B9%B4%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>从2017年9月开始我转为前端开发，当时公司没有一个单纯专注前端的开发人员，我接到任务后首先是考虑的是应该使用哪种前端技术（框架）。在简单对比Angular、Vue 和 React 后，我选择了 React。因为我曾经花了时间了解过，而且我特别喜欢 React 的 JSX 语法和单向数据流绑定方式。本文就简单总结一下这一年我使用 React 的实际经验。<br><a id="more"></a></p>
<h1 id="一、必须关注React-动态"><a href="#一、必须关注React-动态" class="headerlink" title="一、必须关注React 动态"></a>一、必须关注React 动态</h1><h4 id="我开始使用-React时的版本是16-0-0，到现在16-5-0，我感受到最大的变化是："><a href="#我开始使用-React时的版本是16-0-0，到现在16-5-0，我感受到最大的变化是：" class="headerlink" title="我开始使用  React时的版本是16.0.0，到现在16.5.0，我感受到最大的变化是："></a>我开始使用  React时的版本是16.0.0，到现在16.5.0，我感受到最大的变化是：</h4><p>1、 新增了<code>Context</code>，翻译为：上下文。有了这个 API 我们可以简单的共享组件间的数据。比如：在向多级子组件传 props 时无需每一级组件都要传递 props。在顶级组件创建了<code>Context.Provider</code>,在任何子组件中使用<code>Context.Consumer</code>就可以获取到顶级组件的props。</p>
<p>2、 多种<code>ref</code>的创建方式。在最初，要访问 DOM ，需要在组件增加<code>ref={myRef}</code>，而且 ref 的值只能是<code>string</code>。到现在，我们不仅可以利用原来的方式创建（旧不被官方推荐），还可以 <code>ref={ins =&gt; this.myRef = ins}</code> ，ref 的值可以是一个函数；当然还可以这样:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.myRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br></pre></td></tr></table></figure>
<p>3、 在16.3.0版本中，React 组件的生命周期增加了 <code>static getDerivedStateFromProps()</code>,<code>getSnapshotBeforeUpdate()</code>,<code>componentDidCatch()</code>,并且对<code>componentWillReceiveProps()</code>和<code>componentWillUpdate()</code>增加了不安全的前缀，如： <code>UNSAFE_componentWillReceiveProps()</code>。我们这里不展开讨论这些生命周期API改变给我们日常开发带来的影响。</p>
<p>4、 除了上面列出变化，还有 <code>Fragment</code>、<code>异步渲染</code>等等的改变与变化。在短短一年，React 的变化与改进很大，这也要我们开发者需要时刻关注 React 的动态，养成习惯去 React官网查看每个版本的变化日志，这样才有助于改进我们的应用，能更好的掌握 React。</p>
<h1 id="二、掌握Babel-和Webpack的配置"><a href="#二、掌握Babel-和Webpack的配置" class="headerlink" title="二、掌握Babel 和Webpack的配置"></a>二、掌握Babel 和Webpack的配置</h1><h4 id="1、Babel-总结"><a href="#1、Babel-总结" class="headerlink" title="1、Babel 总结"></a>1、Babel 总结</h4><p><code>Babel</code> 是现代化前端开发的关键角色，<code>Babel</code> 的存在才使得我们可以用 ES6、ES7，甚至 ES8的新特性来开发前端项目。因为 我们的项目基本是运行在浏览器上的，每个浏览器的 JS 支持情况不一致，当使用<code>Babel</code>把我们的项目代码转译成 ES5，可以最大程度兼容目标浏览器列表。在2017年，<code>Babel</code>的 presets 需要我们手动引入所需要的包，如：<code>babel-preset-latest</code>、<code>babel-preset-react</code>、<code>babel-preset-es2015</code>和<code>babel-preset-stage-0</code>。很多时候我们很难确定我们具体需要哪个包，因为不知我们会在项目中使用什么新特性。<code>babel-preset-env</code>的出现改变这一现象，可以根据我们设置的浏览器列表，按需选择语法环境包。尤其现在 <code>Babel7</code>的发布，使得 <code>Babel</code> 配置更加简单了。</p>
<h4 id="2、Webpack-总结"><a href="#2、Webpack-总结" class="headerlink" title="2、Webpack 总结"></a>2、Webpack 总结</h4><p><code>Wepack</code>是工程化前端开发的基础。我创建第一个React SPA 项目的时候，没有使用 CRA(create-react-app),因为我当时觉得，既然我刚接触现代前端开发方式，我就要从零开始学习，那当然是从 <code>Webpack</code> 配置开始学习了。<code>Webpack</code>作为现在最流行的打包工具， 但由于其松散的配置方式和插件化配置使得整个 <code>Webpack</code>配置让人看起来十分复杂，因此让很多人望而却步，不敢真正去了解 <code>Webpack</code> 配置项的意义。其实，<code>Webpack</code> 配置没那么难，尤其现在 <code>Webpack4</code>的出现，可以说可以是零配置了。在项目开始的时候，只需要配置入口，出口、css 加载器和 js 加载器就可以项目运行起来了。至于其他的配置，用到的时候再添加也不迟。配置优化更加不能急，项目的完成度没有到达90%，谈优化是多余的。这一年来， 我项目中 Webpack 配置不知改了多少次了，这种东西并不是说开始配置好了就不用再改动了。所以我们一步一步来，就可以慢慢熟悉整个 Webpack 配置的诀窍了。</p>
<h1 id="三、代码拆分"><a href="#三、代码拆分" class="headerlink" title="三、代码拆分"></a>三、代码拆分</h1><h4 id="1、-React组件拆分"><a href="#1、-React组件拆分" class="headerlink" title="1、 React组件拆分"></a>1、 React组件拆分</h4><p>我特别喜欢<code>React</code>的组件化开发，在开发过程中我们可以重用组件。当一个页面的功能增多时，代码数肯定飙升的。这个时候我们可以考虑把一些功能拆分出来，不仅使得当前文件代码减少，增加可读性，而且说不定当前拆分的小功能组件可以被其他页面重用，减少重复的工作量。不用害怕拆分，哪怕是一个按钮都可以抽取到一个独立的组件中，比如：在我的项目中，我的一个小小的删除按钮就拆分出来，因为每个删除按钮都需要一个弹窗按钮来包裹，每次写按钮功能时，都要重复的用弹窗组件来包裹，拆分一个自定义的删除按钮就让我们每次只需要引用我们的资金的删除按钮即可。当然，组件的拆分可以拆分成无状态组件、正常功能组件，甚至是自定义业务组件库。我在前面的文章写过自建公司内部的 React 业务组件库，因为这些组件不只是可以在当前项目使用，多个项目实行相同的功能时，不断的 copy 也是增加工作量。</p>
<h4 id="2、逻辑函数拆分"><a href="#2、逻辑函数拆分" class="headerlink" title="2、逻辑函数拆分"></a>2、逻辑函数拆分</h4><p>我们都知道一个函数方法只实现一种功能，一般来说每个页面都是特定的功能，但总会存在相同的数据处理方式。这个时候我们创建一个函数库，把常用的数据处理方法抽取出来，在别的页面使用时就可以简单实现了。比如：在判断值是否有效时，虽然是很简单的方法，但每次都要这样判断 <code>null</code>、<code>undefined</code>以及<code></code>(空串),着实让人感觉麻烦。</p>
<h4 id="3、常量配置的拆分"><a href="#3、常量配置的拆分" class="headerlink" title="3、常量配置的拆分"></a>3、常量配置的拆分</h4><p>我们做 SPA，接口作为最大的常量配置项，我们必须用单独的文件来声明这些接口，因为不可能一个接口只用在一个地方，当接口路径改变时，我们只需要在接口声明文件中更改一次即可。而且不能模块的接口需要拆分到不同的文件中，增加可读性。还有其他的一些页面配置声明都可以放到统一目录下（constants目录），这样不仅让项目结构更加清晰，而且增加代码的健壮性。</p>
<h1 id="四、不断的重构、重构"><a href="#四、不断的重构、重构" class="headerlink" title="四、不断的重构、重构"></a>四、不断的重构、重构</h1><p>这一年来，项目功能在不断变化，这样也带来项目代码页不断变化，出来不断拆分代码之外。我们要不断的对每个功能的实现方式不断重构，也行以前需要用10行代码才能解决的问题，现在想到了一个更好的方法，只需要5行了。在我的项目中，我重构最多的是应用的路由，从开始只是使用页面级别的路由，到现在每个组件都使用路由，其中重构的次数不下与10次。也许我一开始就应该考虑这种路由方式了，但当时是一个简单的项目就没必要搞那么复杂吧。并不是我不想这样做，只是必要性太低了。其实重构的过程，也是对代码进行改进的过程，随着开发时间的增加，对代码使用的理解不一样了，重构让我更升入理解了 React 的一些 API。只要我有空， 我就会 review 项目的代码，看看哪些地方可以改进，包括 Babel Webpack 配置的重构。</p>
<h1 id="五、代码规范和团队协作"><a href="#五、代码规范和团队协作" class="headerlink" title="五、代码规范和团队协作"></a>五、代码规范和团队协作</h1><p>一个好的项目不只是说功能完成了就可以了，除了不断重构之外，在每次的编码过程中注意编码规范还是十分重要的。因为代码是写给人看的，自己看的懂的代码，团队成员不一定能看懂。除了代码需要格式化之外，还需要一定的注释，在逻辑复杂的地方增加一定的注释，方便团队成员和日后自己的 review 代码时能看懂该段代码，也会对优化带来启示的。在 Rect 这样的前端项目中，一般使用 <code>ESLint</code> 进行语法规范、用<code>Prettirer</code>进行代码美化，而且还要对编辑器进行美化编写规则，如<code>.editorconfig</code>,让团队成员的在其编辑器上写出的代码与自己的风格一致。</p>
<h1 id="六、尝试使用高级特性"><a href="#六、尝试使用高级特性" class="headerlink" title="六、尝试使用高级特性"></a>六、尝试使用高级特性</h1><p>在项目开发开始阶段中，我们因为专注于业务功能的实现，容易忽略一些功能其实可以用高级特性来实现。这就让我们在重构的过程中考虑是否使用高级特性来替代当前的实现逻辑了。使用高级特性不仅让我们的项目代码简洁、还可以让我更好的理解React、JS 的高级特性，这样的项目开发方式才能最大程度提升自己的水平。</p>
<h1 id="七、使用-TypeScript吧"><a href="#七、使用-TypeScript吧" class="headerlink" title="七、使用 TypeScript吧"></a>七、使用 TypeScript吧</h1><p>由于项目开始时，我对 TypeScript 一无所知，压根没考虑过使用 TypeScript 来实现。对应 TypeScript 的有点和在 React 的使用方式，我在前面的文章有写过。现在我最苦恼的是，我很想使用 TypeScript 来开发，但把现在的项目代码转为 TypeScript 的工作量实在太大了。因此，我们应尽可能在项目使用 TypeScript!!!</p>
<h1 id="八、解决困难的能力"><a href="#八、解决困难的能力" class="headerlink" title="八、解决困难的能力"></a>八、解决困难的能力</h1><p>我觉得开发是一件很快乐的事情，开发过程遇到困难 首先尝试自己解决，才能提升自己；也不要吝啬帮助别人，也许别人遇到的问题正是自己前不久刚解决的，这样能加深印象。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文简单总结了这一年我的 React 开发经验，希望能帮到大家。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> 总结 </tag>
            
            <tag> Webpack </tag>
            
            <tag> Babel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript开发笔记]]></title>
      <url>https://qimajiang.com/2018/08/21/TypeScript%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>在上一篇的文章中，学习了 TypeScript 的基本知识，以及 TS 在 React中的基本使用方法。在本文中，我们深入了解 TS在 React 中的实践。本文将采用 ant-design 作为基础的 UI 框架。<br><a id="more"></a></p>
<h2 id="一、用-TS-创建-React-的-SFC-无状态组件"><a href="#一、用-TS-创建-React-的-SFC-无状态组件" class="headerlink" title="一、用 TS 创建 React 的 SFC(无状态组件)"></a>一、用 TS 创建 React 的 SFC(无状态组件)</h2><p>在本次实践中，我们基于 antd 创建一个统一的 Input Form组件。该组件可以同时支持基本 Input、InputNumber和 Input.Text,我们将定义 <code>elementTypeEnum</code>来判断该使用哪个输入组件。</p>
<p>1、引入 antd 的 <code>Form, Input, InputNumber</code>组件（HXInputItem）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Form, Input, InputNumber &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br></pre></td></tr></table></figure>
<p>2、定义输入类型的枚举</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">enum elementTypeEnum &#123;</span><br><span class="line">    normal = <span class="string">"normal"</span>,<span class="comment">//普通的字符串输入</span></span><br><span class="line">    number = <span class="string">"number"</span>,<span class="comment">//数字输入，对应antd的 InputNumber</span></span><br><span class="line">    text = <span class="string">"text"</span><span class="comment">//文本输入，对应 antd 的 Input.Text</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、创建 HXInputItem 的属性声明</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface HXInputProps &#123;</span><br><span class="line">    label: string;<span class="comment">//输入框的标签</span></span><br><span class="line">    name: string;<span class="comment">//输入框的变量名</span></span><br><span class="line">    getFieldDecorator: <span class="function">(<span class="params">name, options</span>) =&gt;</span> any;<span class="comment">//antd 的 Form 装饰器</span></span><br><span class="line">    fieldDecoratorOptions: object;<span class="comment">//antd Form 的表单域配置</span></span><br><span class="line">    formLayout?: object;<span class="comment">//antd 的 formLayout</span></span><br><span class="line">    inputProps?: object;<span class="comment">//对应 antd 的输入框的属性配置</span></span><br><span class="line">    formItemProps?: object;<span class="comment">//antd的 Form.Item的属性配置</span></span><br><span class="line">    elementType?: elementTypeEnum;<span class="comment">//表示使用哪种输入组件，默认normal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、创建 HXInputItem的 SFC</p>
<p>这一步非常重要，跟普通 React创建 SFC 有点区别。具体用法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> HXInputItem: React.SFC&lt;HXInputProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在 TS 创建 SFC 需要使用 <code>React.SFC</code>属性，否则无法创建成功。</p>
<p>5、填充我们的 HXInputItem SFC</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把当前传入的属性通过解构获取。</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">        label,</span><br><span class="line">        name,</span><br><span class="line">        getFieldDecorator,</span><br><span class="line">        formLayout,</span><br><span class="line">        fieldDecoratorOptions,</span><br><span class="line">        inputProps,</span><br><span class="line">        formItemProps,</span><br><span class="line">        elementType</span><br><span class="line">    &#125; = props;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">        &lt;FormItem</span><br><span class="line">            &#123;...formLayout&#125;</span><br><span class="line">            label=&#123;&lt;span className=<span class="string">"form-label-text"</span>&gt;&#123;label&#125;&lt;<span class="regexp">/span&gt;&#125;</span></span><br><span class="line"><span class="regexp">            colon=&#123;false&#125;</span></span><br><span class="line"><span class="regexp">            hasFeedback</span></span><br><span class="line"><span class="regexp">            &#123;...formItemProps&#125;</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">            &#123;getFieldDecorator(name, fieldDecoratorOptions)(</span></span><br><span class="line"><span class="regexp">                elementType === "normal" ? (</span></span><br><span class="line"><span class="regexp">                    &lt;Input &#123;...inputProps&#125; /</span>&gt;</span><br><span class="line">                ) : elementType === <span class="string">"number"</span> ? (</span><br><span class="line">                    &lt;InputNumber &#123;...inputProps&#125; /&gt;</span><br><span class="line">                ) : (</span><br><span class="line">                    &lt;Input.TextArea rows=&#123;<span class="number">5</span>&#125; key=&#123;name&#125; &#123;...inputProps&#125; /&gt;</span><br><span class="line">                )</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br></pre></td></tr></table></figure>
<p>通过<code>elementType</code>的值，调用不同的antd 中的输入组件，在项目中只引入当前SFC即可，让开发更加便利，快速和统一。若在以后的开发过程，存在特殊的需要，稍微兼容改造一下该组件即可，减少代码量。</p>
<p>6、声明该 SFC 的默认属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HXInputItem.defaultProps = &#123;</span><br><span class="line">    elementType: elementTypeEnum.normal</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>7、导出该组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default HXInputItem;</span><br></pre></td></tr></table></figure>
<h1 id="二、用TS-加载远程数据-fetch-Api"><a href="#二、用TS-加载远程数据-fetch-Api" class="headerlink" title="二、用TS 加载远程数据(fetch Api)"></a>二、用TS 加载远程数据(fetch Api)</h1><p>1、定义 http Response 的 Interface</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> interface IRestRes &#123;</span><br><span class="line">    message?: string | <span class="literal">null</span>;<span class="comment">//可以是 undefined、null、string类型，</span></span><br><span class="line">    code?: number;</span><br><span class="line">    filename?: string | <span class="literal">null</span>;<span class="comment">//请求文件时的文件名</span></span><br><span class="line">    data?: any;<span class="comment">//普通 JSON 数据、file 二进制数据</span></span><br><span class="line">    loginAccount?: string;</span><br><span class="line">    name?: string;</span><br><span class="line">    roles?: <span class="built_in">Array</span>&lt;string&gt;;<span class="comment">// 可以是undefined、字符串的数组</span></span><br><span class="line">    token?: string;</span><br><span class="line">    type?: string | <span class="literal">null</span>;</span><br><span class="line">    total?: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、定义统一的获取 JSON 数据的 fetch 方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment">* @desc 所有fetch请求的json 数据的基础；</span></span><br><span class="line"><span class="comment">  @author qimajiang  </span></span><br><span class="line"><span class="comment">* @param options object</span></span><br><span class="line"><span class="comment">* @param url stirng</span></span><br><span class="line"><span class="comment">* @return IRestRes   Promise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialFetch = (url:string, <span class="attr">options</span>:<span class="built_in">Object</span>): <span class="built_in">Promise</span>&lt;IRestRes&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> finalOpts = &#123;</span><br><span class="line">            headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">                Authorization: myToken,<span class="comment">//登录后需要传入该 header</span></span><br><span class="line">            &#125;),</span><br><span class="line">            ...options</span><br><span class="line">        &#125;;</span><br><span class="line">        fetch(url, finalOpts)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">                <span class="keyword">return</span> res.text();</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span>拦截所有响应， 处理 token 失效等情况 responseMiddleware</span></span><br><span class="line">                <span class="keyword">const</span> resJson = text ? <span class="built_in">JSON</span>.parse(text) : &#123;&#125;;</span><br><span class="line">                resolve(resJson <span class="keyword">as</span> IRestRes);<span class="comment">//将响应数据转换为IRestRes</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                reject(e);<span class="comment">//请求失败的错误捕捉</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3、使用 fetch 的 get方法，请求JSON 数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment">通用 fetchGetJson</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchGetRequest = (api:string, params?:<span class="built_in">Object</span>): <span class="built_in">Promise</span>&lt;IRestRes&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">new</span> URL(api);<span class="comment">//构造url</span></span><br><span class="line">        url.search = <span class="keyword">new</span> URLSearchParams(params);<span class="comment">//构造 search</span></span><br><span class="line">        initialFetch(url, &#123;</span><br><span class="line">            method: <span class="string">"GET"</span></span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response, <span class="number">766</span>);</span><br><span class="line">                resolve(response);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3、使用 fetch 的 post，提交表单(FormData)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通用 提交表单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPostForm = (url:string, <span class="attr">values</span>:object=&#123;&#125;): <span class="built_in">Promise</span>&lt;IRestRes&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">        <span class="built_in">Object</span>.keys(values).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;<span class="comment">//手动构造 FormData</span></span><br><span class="line">            <span class="keyword">const</span> vl = values[key];</span><br><span class="line">            <span class="keyword">if</span> (vl) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vl.constructor !== <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    formData.append(key, vl);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 数组的数据</span></span><br><span class="line">                    <span class="comment">//  console.log(' 是数组，多个文件')</span></span><br><span class="line">                    <span class="keyword">const</span> fileList = vl;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fileList.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">const</span> item = fileList[i];</span><br><span class="line">                        <span class="comment">// console.log('每个文件内容',item,i, '数组长度',fileList.length)</span></span><br><span class="line">                        formData.append(key, item);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        initialFetch( url, &#123;</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            body: formData <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response, <span class="number">766</span>);</span><br><span class="line">                resolve(response);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4、使用 fetch 获取文件流</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment">通用 fetchGetFile 获取文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchGetFile = (api:string, params?:obejct): <span class="built_in">Promise</span>&lt;IRestRes&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(api);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> finalOps = &#123;</span><br><span class="line">            headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">                Authorization: myToken,</span><br><span class="line">                <span class="string">"Access-Control-Allow-Origin"</span>: BASE_URL,<span class="comment">//服务端必须响应 该header，否则无法获取到 Content-Disposition</span></span><br><span class="line">            &#125;),</span><br><span class="line">            ...params</span><br><span class="line">        &#125;;</span><br><span class="line">        fetch(url, finalOps)</span><br><span class="line">            .then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span>拦截所有响应， 处理 token 失效等情况 responseMiddleware</span></span><br><span class="line">                <span class="keyword">const</span> contentDisposition = res.headers.get(<span class="string">"Content-Disposition"</span>);</span><br><span class="line">                <span class="keyword">const</span> myBlob = <span class="keyword">await</span> res.blob();</span><br><span class="line">                <span class="keyword">const</span> Ires: IRestRes = &#123;</span><br><span class="line">                    data: myBlob,</span><br><span class="line">                    type: res.headers.get(<span class="string">"Content-Type"</span>),</span><br><span class="line">                    filename: <span class="built_in">decodeURI</span>(</span><br><span class="line">                        <span class="built_in">String</span>(contentDisposition).replace(<span class="string">"attachment;filename="</span>, <span class="string">""</span>) || <span class="string">""</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;;</span><br><span class="line">                resolve(Ires);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="三、-使用-TS创建普通的-React-组件"><a href="#三、-使用-TS创建普通的-React-组件" class="headerlink" title="三、 使用 TS创建普通的 React 组件"></a>三、 使用 TS创建普通的 React 组件</h1><p>先上完整的组件代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span>;</span><br><span class="line"><span class="keyword">import</span> IStore <span class="keyword">from</span> <span class="string">"../../interface/IStore"</span>;</span><br><span class="line"><span class="keyword">import</span> SearchType <span class="keyword">from</span> <span class="string">"../../enum/SearchType"</span>;</span><br><span class="line"><span class="comment">// const styles = require("./styles/index.less");</span></span><br><span class="line">interface SearchBoxProps &#123;</span><br><span class="line">    store?: IStore;</span><br><span class="line">    placeholder?: string;</span><br><span class="line">&#125;</span><br><span class="line">interface SearchBoxState &#123;</span><br><span class="line">    focus: boolean;</span><br><span class="line">    focusLock: boolean;</span><br><span class="line">    searchField: SearchType;</span><br><span class="line">    words: string;</span><br><span class="line">    searching: boolean;</span><br><span class="line">&#125;</span><br><span class="line">@inject(<span class="string">"store"</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchBox</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">SearchBoxProps</span>, <span class="title">SearchBoxState</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            focus: <span class="literal">false</span>,</span><br><span class="line">            focusLock: <span class="literal">false</span>,</span><br><span class="line">            searchField: SearchType.SEARCH_FIELD_ALL,</span><br><span class="line">            words: <span class="string">""</span>,</span><br><span class="line">            searching: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> defaultProps : &#123;</span><br><span class="line">        placeholder: <span class="string">'输入关键词并搜索'</span></span><br><span class="line">    &#125;</span><br><span class="line">    onFocus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            focus: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    onBlur = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state.focusLock) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            focus: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    onMouseEnter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            focusLock: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    onMouseLeave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            focusLock: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div</span><br><span class="line">                onFocus=&#123;<span class="keyword">this</span>.onFocus&#125;</span><br><span class="line">                onBlur=&#123;<span class="keyword">this</span>.onBlur&#125;</span><br><span class="line">                onMouseEnter=&#123;<span class="keyword">this</span>.onMouseEnter&#125;</span><br><span class="line">                onMouseLeave=&#123;<span class="keyword">this</span>.onMouseLeave&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有看出与普通 JS 创建React 组件的区别了吗？</p>
<p>（1）、使用泛型定义组件的 props 与 state；</p>
<p> (2)、创建默认的 state 值，必须在<code>SearchBoxState</code>已经定义，否则出错。</p>
<p> (3)、   <code>defaultProps</code> 需要使用 <code>static</code> 修饰</p>
<h1 id="四、创建-d-ts-文件"><a href="#四、创建-d-ts-文件" class="headerlink" title="四、创建 d.ts 文件"></a>四、创建 d.ts 文件</h1><p> 在项目根目录创建 typings 的文件夹，在 typings 中创建 <code>index.d.ts</code></p>
<p> 文件中输入以下内容</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">finally</span>: <span class="function">(<span class="params">callback</span>) =&gt;</span> <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 由于我们在使用 fetch 请求数据时，返回的数据使用 <code>Promise&lt;IRestRes&gt;</code>返回。如果不创建上门的 <code>d.ts</code>，编辑器在编译时可能无法<code>Promise&lt;IRestRes&gt;</code>。为什么呢？</p>
<p>因为：</p>
<p>typings的存在是为了方便TypeScript识别、编译、智能提示TypeScript无法识别的JS库的特性和语法。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>TS在 React 的使用远不止这些，本文只是抛砖引玉，让我们对 TS 的了解更加深入，而且更是感叹 TS 的强大。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript 与 React]]></title>
      <url>https://qimajiang.com/2018/07/28/TypeScript%20%E4%B8%8E%20React%20/</url>
      <content type="html"><![CDATA[<p>最近开发工作缓下来了， 就抽时间看看传说中的神器 TypeScript。主要描述一些 TypeScript 在 React 项目中的一些使用方法。<br><a id="more"></a></p>
<h1 id="一、TypeScript-是什么"><a href="#一、TypeScript-是什么" class="headerlink" title="一、TypeScript 是什么"></a>一、TypeScript 是什么</h1><p>TypeScript 是 JavaScript 类型的超集，它可以编译成纯 JavaScipt。TypeScript可以在任何浏览器、任何计算机和任何操作系统中运行， 并且它是开源 的。</p>
<h1 id="二、-TypeScript-的基础知识"><a href="#二、-TypeScript-的基础知识" class="headerlink" title="二、 TypeScript 的基础知识"></a>二、 TypeScript 的基础知识</h1><p>1、 TypeScript 的基本类型：TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的元组、枚举类型方便我们使用。如：<code>let exist: boolean = false</code></p>
<p>2、TypeScript 的变量声明：<code>let</code>和<code>const</code>是JavaScript里相对较新的变量声明方式。 像我们之前提到过的， let在很多方面与var是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 <code>const</code>是对<code>let</code>的一个增强，它能阻止对一个变量再次赋值。这跟 JavaScript 的其他变量用法几乎一模一样。</p>
<p>3、 TypeScript 的接口：TypeScript的核心原则之一是对值所具有的结构进行类型检查。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。接口中属性的顺序不影响接口的判断。</p>
<p>接口的定义：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPerson</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age? number;</span><br><span class="line">  readonly gender: string; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在属性后加上<code>？</code>表示该属性的可选的，否则的必要条件; 在属性名前加上<code>readonly</code>表示实现该接口后（对象字面量构造），该属性只读，不能写入新的值。</p>
<p>接口的对象构造</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> me: IPerson = &#123;name: <span class="string">"qimajiang"</span>, age: <span class="number">25</span>, gender: <span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>跟变量的声明差不多， 只是类型是自定义的。</p>
<p>4、TypeScript 的类：传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</p>
<p>类的基础用法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let person = <span class="keyword">new</span> Person(<span class="string">"qimajiang"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHello = person.say(); <span class="comment">// Hello, qimajiang</span></span><br></pre></td></tr></table></figure>
<p>类的继承用法， 跟 Java 或其他编程语言一样， 类是可以继承的。用法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    getGender() &#123;</span><br><span class="line">        console.log(<span class="string">'I am a man'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> Man(<span class="string">"qimajaing"</span>)</span><br><span class="line"><span class="keyword">const</span> manSay = man.say(); </span><br><span class="line"><span class="keyword">const</span> gender = man.getGender();</span><br></pre></td></tr></table></figure>
<p>TypeScript 的类中也可以使用修饰符来限制类中属性或方法的访问。 修饰符有： <code>public</code>、<code>private</code>、<code>protected</code>、<code>readonly</code></p>
<p>关于类的更多知识， 访问 <a href="https://www.tslang.cn/docs/handbook/classes.html" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook/classes.html</a></p>
<p>5、TypeScript的函数：和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。在 TypeScript 中的参数、返回值、中间变量都可以指定类型。这样让编写的函数更加安全稳定健壮、在 IDE 中还可以智能提示，加快编码效率，降低错误率。如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x: number, y: number)</span>: <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myAdd = <span class="function"><span class="keyword">function</span><span class="params">(x: number, y: number)</span>: <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
<p>在TypeScript里我们可以在参数名旁使用 <code>?</code>实现可选参数的功能; 默认参数、剩余参数、箭头函数或其他用法与 在JavaScript 中的一样。</p>
<h3 id="到目前为止，主要学习了-TypeScript-的最基础知识，足够创建一些最基本的-web-应用了。至于-TypeScript-的其他语法：泛型、枚举等等，就不再一一展开了，可访问https-www-tslang-cn-docs-handbook-查看"><a href="#到目前为止，主要学习了-TypeScript-的最基础知识，足够创建一些最基本的-web-应用了。至于-TypeScript-的其他语法：泛型、枚举等等，就不再一一展开了，可访问https-www-tslang-cn-docs-handbook-查看" class="headerlink" title="到目前为止，主要学习了 TypeScript 的最基础知识，足够创建一些最基本的 web 应用了。至于 TypeScript 的其他语法：泛型、枚举等等，就不再一一展开了，可访问https://www.tslang.cn/docs/handbook/查看."></a>到目前为止，主要学习了 TypeScript 的最基础知识，足够创建一些最基本的 web 应用了。至于 TypeScript 的其他语法：泛型、枚举等等，就不再一一展开了，可访问<a href="https://www.tslang.cn/docs/handbook/" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook/</a>查看.</h3><h1 id="三、-JSX"><a href="#三、-JSX" class="headerlink" title="三、 JSX"></a>三、 JSX</h1><h2 id="1、JSX-知识"><a href="#1、JSX-知识" class="headerlink" title="1、JSX 知识"></a>1、JSX 知识</h2><p>JSX是一种嵌入式的类似XML的语法。 它可以被转换成合法的JavaScript，尽管转换的语义是依据不同的实现而定的。 JSX因 <code>React</code>框架而流行，但是也被其它应用所使用。 TypeScript支持内嵌，类型检查和将JSX直接编译为JavaScript。想在 TypeScript 使用 <code>jsx</code>，必须做到：</p>
<blockquote>
<p>1、给文件一个 <code>.tsx</code>扩展名<br>2、启用 <code>jsx</code>选项</p>
</blockquote>
<p>TypeScript具有三种JSX模式：<code>preserve</code>， <code>react</code>和 <code>react-native</code>。 这些模式只在代码生成阶段起作用 - 类型检查并不受影响。 在 <code>preserve</code>模式下生成代码中会保留JSX以供后续的转换操作使用（比如： <code>Babel</code>）。 另外，输出文件会带有 <code>.jsx</code>扩展名。 <code>react</code>模式会生成 <code>React.createElement</code>，在使用前不需要再进行转换操作了，输出文件的扩展名为 <code>.js</code>。 <code>react-native</code>相当于 <code>preserve</code>，它也保留了所有的JSX，但是输出文件的扩展名是 .js。</p>
<h2 id="2、TypeScript-与-React-的整合"><a href="#2、TypeScript-与-React-的整合" class="headerlink" title="2、TypeScript 与 React 的整合"></a>2、TypeScript 与 React 的整合</h2><p>要想一起使用JSX和React，要使用 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react" target="_blank" rel="noopener">React类型定义</a>。 这些类型声明定义了 JSX合适命名空间来使用React。</p>
<h1 id="四、创建TypeScript风格的React应用"><a href="#四、创建TypeScript风格的React应用" class="headerlink" title="四、创建TypeScript风格的React应用"></a>四、创建TypeScript风格的React应用</h1><h2 id="1、-安装-TypeScript-版本的定义依赖包："><a href="#1、-安装-TypeScript-版本的定义依赖包：" class="headerlink" title="1、 安装 TypeScript 版本的定义依赖包："></a>1、 安装 TypeScript 版本的定义依赖包：</h2><p>（1）在原有的 React 项目，除了安装 <code>react</code>，还需要安装<code>@types/react</code>,若其他 react 库存在@types 定义包， 也一并下载安装。</p>
<p>（2）如果是使用 create-react-app 创建 React 项目， 可以在创建时增加参数<code>--scripts-version=react-scripts-ts</code>，就好创建 TS 风格的 React 项目了。</p>
<h2 id="2、-weback-配置"><a href="#2、-weback-配置" class="headerlink" title="2、 weback 配置"></a>2、 weback 配置</h2><p>至少要增加 ts 的配置 <code>{ test: /\.tsx?$/, loader: &quot;ts-loader&quot; },</code></p>
<h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><p>（1）在普通的 React项目中，我一般这样引用 React，<code>import React from &#39;react&#39;</code>,但在 TS 风格的 React 项目中， 需要这样<code>import * as React from &#39;react&#39;</code></p>
<p>（2） 创建无状态组件也有区别，具体分析下一篇展开。</p>
<p>（3） TS 风格 React 项目中，组件的状态和属性定义，尽可能用<code>Interface</code>声明。</p>
<p>(4)  要习惯对每个变量声明数据类型，减少出错概率，也方便 Debug。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本人主要学习了 TypeScrip 的一些常用特性， 以及如何创建一个 TS 风格的 React 项目。更多的TS 实战，后面会结合项目开发记录下来。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 ESLint、Prettier 和 StyleLint美化 React 代码]]></title>
      <url>https://qimajiang.com/2018/06/24/%E4%BD%BF%E7%94%A8%20Eslint%20%E5%92%8C%20Prettier%E7%BE%8E%E5%8C%96%20React%20%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li>在日常开发工作中， 一个项目不止一个开发者， 但是每个人的代码质量、风格、格式规范肯定不一致，带来的影响是整个项目看上去比较零散、奇怪。那有没有方法使得所有人写出来的代码质量、风格一致呢？那就要使用 ESLint 进行质量检查和修复；使用 Prettier 进行美化、格式化，比如缩进、行的最大长度等等；在样式的编写中，大量的css和scss代码书写中，或多或少会出现问题，可以使用 StyleLint对样式代码进行格式化。以上俗称：静态代码分析。<a id="more"></a>
</li>
</ul>
<h1 id="一、ESlint-基本知识"><a href="#一、ESlint-基本知识" class="headerlink" title="一、ESlint 基本知识"></a>一、ESlint 基本知识</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>ESLint是一个插件化的javascript代码检测工具，它可以用于检查常见的JavaScript代码错误，也可以进行代码风格检查，这样我们就可以根据自己的喜好指定一套ESLint配置，然后应用到所编写的项目上，从而实现辅助编码规范的执行，有效控制项目代码的质量。</p>
<h2 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h2><p>在开始使用ESLint之前，我们需要通过NPM来安装它：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure>
<p>创建一个 js 文件，如：<code>test.js</code>, 内容随意，但要能正常运行。</p>
<p>用 ESLint检查上述文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eslint test.js</span><br></pre></td></tr></table></figure>
<p>基本使用就是如此简单，后面说如何集成到项目中。</p>
<h2 id="3、高级用法"><a href="#3、高级用法" class="headerlink" title="3、高级用法"></a>3、高级用法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eslint --fix -e node_modules -c .eslintrc</span><br></pre></td></tr></table></figure>
<ul>
<li><p>–fix： 如果检查到问题，自动根据配置修改代码。</p>
</li>
<li><p>-e：排除检查文件夹。</p>
</li>
<li><p>-c：使用指定的 eslint 配置文件</p>
</li>
</ul>
<h1 id="二、Prettier-基本知识"><a href="#二、Prettier-基本知识" class="headerlink" title="二、Prettier 基本知识"></a>二、Prettier 基本知识</h1><h2 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h2><ul>
<li><p>Prettier 是一个“有主见”的代码格式化工具，能够使输出代码保持风格一致。它通过解析代码和使用自定义规则重新打印代码，使得整个项目的代码格式一致。Prettier 支持多种语言，它的一大特点就是能够支持命令行、API 等多种形式调用，可以让团队保持代码风格一致。包括 React 在内的很多项目已经开始使用了。支持列表：</p>
</li>
<li><p>JavaScript，包括 ES2017</p>
</li>
<li><p>JSX</p>
</li>
<li><p>Flow</p>
</li>
<li><p>TypeScript</p>
</li>
<li><p>CSS、LESS 和 SCSS</p>
</li>
<li><p>JSON</p>
<ul>
<li>GraphQL</li>
</ul>
<h2 id="2、使用方法-1"><a href="#2、使用方法-1" class="headerlink" title="2、使用方法"></a>2、使用方法</h2></li>
</ul>
<p>在开始使用Prettier之前，我们需要通过NPM来安装它：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install -g prettier</span><br></pre></td></tr></table></figure>
<p>继续使用刚才创建的 <code>test.js</code>, 直接使用命令:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">prettier --write</span><br></pre></td></tr></table></figure>
<h1 id="三、StyleLint-基本知识"><a href="#三、StyleLint-基本知识" class="headerlink" title="三、StyleLint 基本知识"></a>三、StyleLint 基本知识</h1><h2 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h2><p>stylelint 是一个强大和现代的 CSS 审查工具，有助于开发者推行统一的代码规范，避免样式错误。stylelint 由 PostCSS 提供技术支持，所以它也可以理解 PostCSS 解析的语法，比如 SCSS</p>
<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>在开始使用StyleLint前，需要使用 NPM 安装：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install -g stylelint</span><br></pre></td></tr></table></figure>
<p>创建一个样式文件， 如：style.less, 内容随意， 但需要正确。</p>
<p>直接使用命令:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">stylelint test.less  --syntax less</span><br></pre></td></tr></table></figure>
<ul>
<li>–syntax是指定语法， 可选为 sass 或 scss等。</li>
</ul>
<h1 id="四、在项目中-ESLint、-Prettier和-StyleLint"><a href="#四、在项目中-ESLint、-Prettier和-StyleLint" class="headerlink" title="四、在项目中 ESLint、 Prettier和 StyleLint"></a>四、在项目中 ESLint、 Prettier和 StyleLint</h1><p>虽然 ESLint和 Prettier 在格式化代码方式确实有重叠的地方， 但两者的侧重点不一样。所有一般在项目中， 我习惯同时使用两者对项目代码进行检查和规范美化。</p>
<h2 id="1、安装-ESLint-到-React项目"><a href="#1、安装-ESLint-到-React项目" class="headerlink" title="1、安装 ESLint 到 React项目"></a>1、安装 ESLint 到 React项目</h2><h3 id="需要安装-的包如下："><a href="#需要安装-的包如下：" class="headerlink" title="需要安装 的包如下："></a>需要安装 的包如下：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"babel-eslint"</span>: <span class="string">"^8.2.3"</span>,</span><br><span class="line"><span class="string">"eslint"</span>: <span class="string">"^4.19.1"</span>,</span><br><span class="line"><span class="string">"eslint-config-standard-jsx"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line"><span class="string">"eslint-plugin-react"</span>: <span class="string">"^7.9.1"</span>,</span><br></pre></td></tr></table></figure>
<p> <code>babel-eslint</code>是指需要检查 babel 转译后的代码。</p>
<h3 id="在项目根目录创建配置文件-eslintrc"><a href="#在项目根目录创建配置文件-eslintrc" class="headerlink" title="在项目根目录创建配置文件 .eslintrc"></a>在项目根目录创建配置文件 <code>.eslintrc</code></h3><p>对<code>.eslintrc</code>文件写入以下内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"react"</span>],</span><br><span class="line">  <span class="string">"extends"</span>: [<span class="string">"standard-jsx"</span>, <span class="string">"plugin:react/recommended"</span>],</span><br><span class="line">  <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"env"</span> : &#123;</span><br><span class="line">    <span class="string">"es6"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"browser"</span> : <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"commonjs"</span>: <span class="keyword">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"camelcase"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"curly"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-undef"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: [<span class="number">0</span>, &#123; <span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"none"</span> &#125;],</span><br><span class="line">    <span class="string">"max-params"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"no-unreachable"</span>:<span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"react/jsx-indent"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"jsx-quotes"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"react/jsx-indent-props"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"react/display-name"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"react/prop-types"</span>: <span class="string">"warn"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查环境包括： es6、浏览器、nodejs 和 commonjs。</p>
<p>rules 的配置项可自行增减和修改，每个配置项的可选值一般为3个： off、warn 和 error</p>
<p>eslint 所有规则配置解读如下（值可修改）：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="keyword">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="keyword">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="keyword">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="keyword">false</span>, <span class="string">"afterColon"</span>: <span class="keyword">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="keyword">false</span>, <span class="string">"after"</span>: <span class="keyword">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="keyword">true</span>, <span class="string">"nonwords"</span>: <span class="keyword">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>
<h3 id="在-package-json的-scripts配置中增加命令"><a href="#在-package-json的-scripts配置中增加命令" class="headerlink" title="在 package.json的 scripts配置中增加命令"></a>在 <code>package.json</code>的 scripts配置中增加命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"lint:es"</span>: <span class="string">"eslint -c .eslintrc src/**/*.js --fix"</span>,</span><br></pre></td></tr></table></figure>
<h2 id="2、安装Prettier-到-react-项目"><a href="#2、安装Prettier-到-react-项目" class="headerlink" title="2、安装Prettier 到 react 项目"></a>2、安装Prettier 到 react 项目</h2><h3 id="需要安装的包如下："><a href="#需要安装的包如下：" class="headerlink" title="需要安装的包如下："></a>需要安装的包如下：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"prettier"</span>: <span class="string">"^1.13.5"</span>,</span><br></pre></td></tr></table></figure>
<h3 id="在项目根目录创建配置文件-prettierc"><a href="#在项目根目录创建配置文件-prettierc" class="headerlink" title="在项目根目录创建配置文件 .prettierc"></a>在项目根目录创建配置文件 <code>.prettierc</code></h3><p>写入内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"printWidth"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"babylon"</span>,</span><br><span class="line">  <span class="string">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="string">"jsxBracketSameLine"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"semi"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"singleQuote"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"overrides"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"files"</span>: [</span><br><span class="line">        <span class="string">"*.json"</span>,</span><br><span class="line">        <span class="string">".eslintrc"</span>,</span><br><span class="line">        <span class="string">".tslintrc"</span>,</span><br><span class="line">        <span class="string">".prettierrc"</span>,</span><br><span class="line">        <span class="string">".tern-project"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"options"</span>: &#123;</span><br><span class="line">        <span class="string">"parser"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"tabWidth"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"files"</span>: <span class="string">"*.&#123;css,sass,scss,less&#125;"</span>,</span><br><span class="line">      <span class="string">"options"</span>: &#123;</span><br><span class="line">        <span class="string">"parser"</span>: <span class="string">"postcss"</span>,</span><br><span class="line">        <span class="string">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"files"</span>: <span class="string">"*.ts"</span>,</span><br><span class="line">      <span class="string">"options"</span>: &#123;</span><br><span class="line">        <span class="string">"parser"</span>: <span class="string">"typescript"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要配置了：缩进长度是2、单行长度是100、使用单引号等等。</p>
<h3 id="在-package-json的-scripts配置中增加命令-1"><a href="#在-package-json的-scripts配置中增加命令-1" class="headerlink" title="在 package.json的 scripts配置中增加命令"></a>在 <code>package.json</code>的 scripts配置中增加命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"format"</span>: <span class="string">"prettier --write"</span></span><br></pre></td></tr></table></figure>
<h2 id="3、安装-StyleLint-到-React-项目"><a href="#3、安装-StyleLint-到-React-项目" class="headerlink" title="3、安装 StyleLint 到 React 项目"></a>3、安装 StyleLint 到 React 项目</h2><h3 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"stylelint"</span>: <span class="string">"^9.3.0"</span>,</span><br><span class="line"><span class="string">"stylelint-config-standard"</span>: <span class="string">"^18.2.0"</span>,</span><br></pre></td></tr></table></figure>
<h3 id="在项目根目录创建配置文件-stylelintrc"><a href="#在项目根目录创建配置文件-stylelintrc" class="headerlink" title="在项目根目录创建配置文件 .stylelintrc"></a>在项目根目录创建配置文件 <code>.stylelintrc</code></h3><p>写入内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"stylelint-config-standard"</span>,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"at-rule-empty-line-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"at-rule-name-space-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"comment-empty-line-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"declaration-bang-space-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"declaration-empty-line-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"declaration-colon-newline-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"function-comma-newline-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"function-name-case"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"function-parentheses-newline-inside"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"function-max-empty-lines"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"function-whitespace-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"value-list-comma-newline-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"indentation"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"number-leading-zero"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"number-no-trailing-zeros"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"rule-empty-line-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"selector-combinator-space-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"selector-list-comma-newline-after"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"selector-pseudo-element-colon-notation"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"unit-no-unknown"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"value-list-max-empty-lines"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"no-empty-source"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"selector-combinator-space-before"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"selector-pseudo-class-no-unknown"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"no-descending-specificity"</span>: <span class="keyword">null</span>,</span><br><span class="line">    <span class="string">"font-family-no-missing-generic-family-keyword"</span>: <span class="keyword">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在-package-json的-scripts配置中增加命令-2"><a href="#在-package-json的-scripts配置中增加命令-2" class="headerlink" title="在 package.json的 scripts配置中增加命令"></a>在 <code>package.json</code>的 scripts配置中增加命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"lint:style"</span>: <span class="string">"stylelint \"src/**/*.less\" --syntax less"</span>,</span><br></pre></td></tr></table></figure>
<p>该项目所有样式都是使用 LESS编写。</p>
<h1 id="五、Pre-commit-Hook-约束代码提交"><a href="#五、Pre-commit-Hook-约束代码提交" class="headerlink" title="五、Pre-commit Hook 约束代码提交"></a>五、Pre-commit Hook 约束代码提交</h1><p>上文探讨了 ESLint、Prettier和 StyleLint 在项目中的使用方法和配置文件的编写，这都是针对个人的推荐操作； 为了保证该项目所有的参与者都能统一代码风格， 则需要采用强制约束；假如团队使用 <code>Git</code>昨晚代码托管工具， 在 <code>commit</code>行为和之前进行代码约束， 以便代码质量和风格一致。因此可借助 Husky 和 lint-staged 来实现。</p>
<ul>
<li>Husky ：可以方便的让你通过npm scripts来调用各种git hooks。</li>
<li>lint-staged ：利用git的staged特性，可以提取出本次提交的变动文件，让prettier只处理这些文件。</li>
</ul>
<h3 id="1、配置-npm-脚本命令"><a href="#1、配置-npm-脚本命令" class="headerlink" title="1、配置 npm 脚本命令"></a>1、配置 npm 脚本命令</h3><p>在项目的package.json中，配置pre-commit的hook任务：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"precommit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="string">"lint-staged:es"</span>: <span class="string">"eslint --fix -c .eslintrc"</span>,</span><br><span class="line">    <span class="string">"lint-staged:style"</span>: <span class="string">"stylelint --syntax less"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"src/**/*.&#123;js,jsx&#125;"</span>: [</span><br><span class="line">      <span class="string">"format"</span>,</span><br><span class="line">      <span class="string">"lint-stagted:es"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"src/**/*.less"</span>: [</span><br><span class="line">      <span class="string">"format"</span>,</span><br><span class="line">      <span class="string">"lint-staged:style"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，你的项目就可以支持自动检查和格式化了。即使团队中有人没有安装三种代码分析工具，也可以确保他的代码在提交到项目仓库中时，总是被检查修改和格式化了之后。</p>
<h1 id="六、在编辑器配置ESLint、Prettier-和-StyleLint"><a href="#六、在编辑器配置ESLint、Prettier-和-StyleLint" class="headerlink" title="六、在编辑器配置ESLint、Prettier 和 StyleLint"></a>六、在编辑器配置ESLint、Prettier 和 StyleLint</h1><p>上一部分说到在项目中集成了ESLint、Prettier 和 StyleLint三种代码分析工具， 但每一次还是要手动运行命令。如何能与编辑器（IDE)结合起来呢？以 WebStrom 为例：</p>
<h2 id="1、在-WebStorm开启-ESLint"><a href="#1、在-WebStorm开启-ESLint" class="headerlink" title="1、在 WebStorm开启 ESLint"></a>1、在 WebStorm开启 ESLint</h2><p>在 WebStorm 中，打开设置（File&gt;Setting或者Alt+F7），按路径进入 ESLint 的配置界面（Languages&amp;Frameworks&gt;JavaScript&gt;Code Quality Tools&gt;ESLint）。开启 ESLint，并配置相应路径，配置文件默认使用.eslintrc。</p>
<h2 id="2、在-WebStorm开启-Prettier"><a href="#2、在-WebStorm开启-Prettier" class="headerlink" title="2、在 WebStorm开启 Prettier"></a>2、在 WebStorm开启 Prettier</h2><p>在macOS 上快捷键：Alt-Shift-Cmd-P； 在Windows and Linux上快捷键：Alt-Shift-Ctrl-P，可以用 Prettier格式化选中代码、整个文件或目录。</p>
<h2 id="3、在-WebStorm开启-StyleLint"><a href="#3、在-WebStorm开启-StyleLint" class="headerlink" title="3、在 WebStorm开启 StyleLint"></a>3、在 WebStorm开启 StyleLint</h2><p>WebStorm天然支持stylelint。打开配置() Languages &amp; FromeWorks &gt; StyleSheets &gt; Stylelint)只需在里面开启并配置安装包path即可。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>在使用上述三种代码分析工具后， 代码风格保持一致， 不用再为非业务逻辑代码而争吵， 提高工作效率。由于篇幅问题， 很多东西没有展开描述，可自行查询相关资料。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> ESLint </tag>
            
            <tag> Prettier </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVG入门与实践]]></title>
      <url>https://qimajiang.com/2018/05/19/SVG%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<ul>
<li>今天来聊聊SVG技术。本文先简单阐述svg的概念和一些特性， 再分享一些我在项目实战中用到的svg例子。<a id="more"></a>
</li>
</ul>
<h1 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Scalable Vector Graphics (SVG) 可扩展矢量绘图，是一种用来描述二维矢量图形的XML标记语言。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>SVG 可被非常多的工具读取和修改（比如记事本）<br>SVG 与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。<br>SVG 是可伸缩的<br>SVG 图像可在任何的分辨率下被高质量地打印<br>SVG 可在图像质量不下降的情况下被放大<br>SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）<br>SVG 可以与 Java 技术一起运行<br>SVG 是开放的标准<br>SVG 文件是纯粹的 XML<br>SVG 的主要竞争者是 Flash。<br>与 Flash 相比，SVG 最大的优势是与其他标准（比如 XSL 和 DOM）相兼容。而 Flash 则是未开源的私有技术。</p>
<h2 id="基础形状"><a href="#基础形状" class="headerlink" title="基础形状"></a>基础形状</h2><p>矩形 <code>&lt;rect&gt;</code><br>圆形 <code>&lt;circle&gt;</code><br>椭圆 <code>&lt;ellipse&gt;</code><br>线 <code>&lt;line&gt;</code><br>折线 <code>&lt;polyline&gt;</code><br>多边形 <code>&lt;polygon&gt;</code><br>路径 <code>&lt;path&gt;</code></p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p> 将SVG文件作为图片，与普通图片使用方式一致；但不会加载自身引用， 如字体、图标等等外部资源。</p>
<p> 将SVG作为应用程序，SVG文件也可以作为<code>&lt;object&gt;</code>元素的data属性引入HTML中。但是，MIME type必须是<code>image/svg+xml</code>。</p>
<p> 混合文档, 直接跟<code>HTML</code>标签混合写入， 会继承父文档的样式，默认以<code>inline</code>方式显示。</p>
<h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><p>在我实际使用svg的过程中， 除了<code>path</code>， 我觉得实现起来都不会太难。 path的可以用于十分复杂的场景，也十分灵活， 但学习曲线比较陡。接下来就一起看看path的一些实践例子。</p>
<h1 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h1><h2 id="svg实现波浪、水泡效果"><a href="#svg实现波浪、水泡效果" class="headerlink" title="svg实现波浪、水泡效果"></a>svg实现波浪、水泡效果</h2><h3 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1frx8n76mhrg30j30atb29.gif" alt=""></p>
<h3 id="实现代码-Reactjs中"><a href="#实现代码-Reactjs中" class="headerlink" title="实现代码(Reactjs中)"></a>实现代码(Reactjs中)</h3><h4 id="1、波浪的实现"><a href="#1、波浪的实现" class="headerlink" title="1、波浪的实现"></a>1、波浪的实现</h4><p>创建单个波浪的svg,<code>wave.svg</code>(以下css的背景图引用) ， 主要使用<code>path</code>的<code>C</code>指令绘制3次贝塞尔曲线， 其他指令可查阅svg教程。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;svg xmlns=<span class="string">"http://www.w3.org/2000/svg"</span> width=<span class="string">"1600"</span> height=<span class="string">"698"</span>&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;linearGradient id=<span class="string">"a"</span> x1=<span class="string">"50%"</span> x2=<span class="string">"50%"</span> y1=<span class="string">"-10.959%"</span> y2=<span class="string">"100%"</span>&gt;</span><br><span class="line">            &lt;stop stop-color=<span class="string">"#ffffff"</span> stop-opacity=<span class="string">".25"</span> offset=<span class="string">"0%"</span>/&gt;</span><br><span class="line">            &lt;stop stop-color=<span class="string">"#ffffff"</span> offset=<span class="string">"100%"</span>/&gt;</span><br><span class="line">        &lt;/linearGradient&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">    &lt;path fill=<span class="string">"url(#a)"</span> fill-rule=<span class="string">"evenodd"</span> d=<span class="string">"M.005 121C311 121 409.898-.25 811 0c400 0 500 121 789 121v77H0s.005-48 .005-77z"</span> transform=<span class="string">"matrix(-1 0 0 1 1600 0)"</span>/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<p>创建4个<code>div</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"ocean"</span>&gt;</span><br><span class="line">	&lt;div className=<span class="string">"wave"</span>&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div className=<span class="string">"wave"</span>&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div className=<span class="string">"wave"</span>&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div className=<span class="string">"wave"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>编写样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ocean</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wave</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../../assets/login/svg/wave.svg'</span>) repeat-x;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">119px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">318px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: wave <span class="number">4.6s</span> <span class="built_in">cubic-bezier</span>(0.36, 0.45, 0.63, 0.53) -.<span class="number">125s</span> infinite;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(220, 110, 0);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wave</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">125px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: wave <span class="number">5.5s</span> <span class="built_in">cubic-bezier</span>(0.36, 0.45, 0.63, 0.53) -.<span class="number">125s</span> infinite;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wave</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: wave <span class="number">7s</span> <span class="built_in">cubic-bezier</span>(0.36, 0.45, 0.63, 0.53)  -.<span class="number">125s</span> infinite;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wave</span><span class="selector-pseudo">:nth-of-type(4)</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">135px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: wave <span class="number">6s</span> <span class="built_in">cubic-bezier</span>(0.36, 0.45, 0.63, 0.53) infinite;</span><br><span class="line">  <span class="comment">/* animation: wave 6s cubic-bezier(0.36, 0.45, 0.63, 0.53) -.125s infinite, swell 7s ease -1.15s infinite;*/</span></span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> wave &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> swell &#123;</span><br><span class="line">  0%, 100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, -115px, 0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 5px, 0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设定每个<code>div</code>的位置和动画， 动画<code>wave</code>表示波浪的作用位置，而且无限循环，动画<code>swell</code>表示波浪的变换。就是如此简单！</p>
<p>2、水泡的实现</p>
<p>创建单个水泡（ES6）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个水泡</span></span><br><span class="line">createPop = (i) =&gt; &#123;</span><br><span class="line">		let bottom = Math.round(Math.random() * <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">		bottom = bottom &gt; <span class="number">55</span> ? <span class="number">55</span> : bottom;</span><br><span class="line">		let left = Math.round(Math.random() * <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">		let second = Math.random() * <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;svg width=<span class="string">"8px"</span> height=<span class="string">"8px"</span> version=<span class="string">"1.1"</span></span><br><span class="line">				 id=&#123;`login-pop$&#123;i&#125;`&#125;</span><br><span class="line">				 style=&#123;&#123;</span><br><span class="line">					 position: <span class="string">'absolute'</span>,</span><br><span class="line">					 bottom: `$&#123;bottom&#125;%`,</span><br><span class="line">					 left: `$&#123;left&#125;%`,</span><br><span class="line">					 animation: ` popup $&#123;second&#125;s cubic-bezier(<span class="number">0.36</span>, <span class="number">0.45</span>, <span class="number">0.63</span>, <span class="number">0.53</span>) <span class="number">-.125</span>s infinite`</span><br><span class="line">				 &#125;&#125;</span><br><span class="line">				 xmlns=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span><br><span class="line">				&lt;circle cx=<span class="string">'4px'</span> cy=<span class="string">'4px'</span> r=<span class="string">"4"</span></span><br><span class="line">						fill=<span class="string">'rgba(255,255,255,0.2)'</span>/&gt;</span><br><span class="line">			&lt;/svg&gt;</span><br><span class="line">		);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>创建<code>svg</code>画布，大小8，使用<code>&lt;circle&gt;</code>创建圆，半径是4。内联样式，规定布局位置是: <code>absolute</code>, 具体坐标是随机生成的，再加入动画，无限循环。</p>
<p>创建多个水泡     </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成指定个数的随机位置水泡</span></span><br><span class="line">createRandomPops = () =&gt; &#123;</span><br><span class="line">	let arr = [];</span><br><span class="line">	<span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">		arr.push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr.map((s, i) =&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;div key=&#123;i&#125;&gt;</span><br><span class="line">			&#123;this.createPop(i)&#125;</span><br><span class="line">		&lt;/div&gt;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在Reactjs的渲染中调用</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;this.createRandomPops()&#125;</span><br></pre></td></tr></table></figure>
<p>水泡的样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> popup &#123;</span><br><span class="line">  0%&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">16%</span></span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    <span class="attribute">bottom</span>:  <span class="number">55%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>水泡只需要向上冒即可，开始从底部16%的位置， 终止位置大约在页面中间，无限循环。</p>
<h2 id="svg实现渐变进度条"><a href="#svg实现渐变进度条" class="headerlink" title="svg实现渐变进度条"></a>svg实现渐变进度条</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1frx8ozts40j304o04rdfo.jpg" alt=""></p>
<ul>
<li>图中的进度条是由左右两个半圆组合而成。</li>
</ul>
<h3 id="代码实现（Reactjs）"><a href="#代码实现（Reactjs）" class="headerlink" title="代码实现（Reactjs）"></a>代码实现（Reactjs）</h3><p>绘制扇形</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 扇形绘图方法,计算终点的 x,y 坐标</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Number progr  进度值， 小于100的整数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> String direction 左半圆还是有半圆</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> cx, cy, r默认的x、y坐标， r是半径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回path中d指令参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">sector = (progr = <span class="number">0</span>, direction = <span class="string">'right'</span>, cy = <span class="number">63</span>, cx = <span class="number">220</span>, r = <span class="number">156</span>) =&gt; &#123;</span><br><span class="line">	let progress = progr &gt; <span class="number">100</span> ? <span class="number">100</span> : (progr &lt; <span class="number">0</span> ? <span class="number">0</span> : progr);</span><br><span class="line">	<span class="comment">// 计算当前的进度对应的角度值</span></span><br><span class="line">	<span class="keyword">const</span> degrees = progress * (<span class="number">360</span> / <span class="number">100</span>);</span><br><span class="line">	<span class="comment">// 计算当前角度对应的弧度值</span></span><br><span class="line">	let rad = degrees * (<span class="number">2</span> * Math.PI / <span class="number">360</span>);</span><br><span class="line">	let startY = cy;</span><br><span class="line">	let x2 = cx,     <span class="comment">//结束X点</span></span><br><span class="line">		y2 = cy;       <span class="comment">//结束Y点</span></span><br><span class="line">	<span class="comment">//   sweepFlag   1 顺时针，0逆时针</span></span><br><span class="line">	<span class="keyword">if</span> (direction === <span class="string">'right'</span>) &#123;</span><br><span class="line">		<span class="comment">//右边圆环</span></span><br><span class="line">		<span class="keyword">if</span> (progress &gt; <span class="number">50</span>) &#123;</span><br><span class="line">			<span class="comment">//多于50%，右边圆环满进度</span></span><br><span class="line">			x2 = cx;</span><br><span class="line">			y2 = startY + r * <span class="number">2</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			x2 = cx + r * Math.sin(rad);<span class="comment">//计算x轴</span></span><br><span class="line">			y2 = startY + r - r * Math.cos(rad);<span class="comment">//计算y轴</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//左边圆环</span></span><br><span class="line">		<span class="comment">//需要100-progress</span></span><br><span class="line">		<span class="keyword">if</span> (progress &gt; <span class="number">50</span>) &#123;</span><br><span class="line">			<span class="keyword">const</span> leftRad = (<span class="number">100</span> - progress) * (<span class="number">360</span> / <span class="number">100</span>) * (<span class="number">2</span> * Math.PI / <span class="number">360</span>);</span><br><span class="line">			<span class="comment">//console.log(leftRad,811)</span></span><br><span class="line">			startY = startY + r * <span class="number">2</span>;</span><br><span class="line">			x2 = cx - r * Math.sin(leftRad);<span class="comment">//计算x轴</span></span><br><span class="line">			y2 = startY - r - r * Math.cos(leftRad);<span class="comment">//计算y轴</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> [<span class="string">'M'</span>, cx, startY, <span class="string">'A'</span>, r, r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, x2.toFixed(<span class="number">0</span>), y2.toFixed(<span class="number">0</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关键点：由于是动态的进度，x、y的值必须是动态计算，这里包含是数学知识是：在圆中根据角度计算坐标值。<code>M</code>指令是移动光标到初始位置的坐标， <code>A</code>指令是绘制一条曲线。</p>
<p>在React中定义svg</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"progress-wrap"</span>&gt;</span><br><span class="line">	&lt;svg width=<span class="string">"160"</span> height=<span class="string">"160"</span> viewBox=<span class="string">"0 0 440 440"</span> className=<span class="string">"center"</span>&gt;</span><br><span class="line">		&lt;defs&gt;</span><br><span class="line">			&lt;linearGradient x1=<span class="string">"0"</span> y1=<span class="string">"0"</span> x2=<span class="string">"1"</span> y2=<span class="string">"1"</span> id=&#123;<span class="string">'left'</span> + idx&#125;&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"100%"</span> style=&#123;&#123;stopColor: colors.max&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"0%"</span> style=&#123;&#123;stopColor: colors.middle&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">			&lt;/linearGradient&gt;</span><br><span class="line">			&lt;linearGradient x1=<span class="string">"1"</span> y1=<span class="string">"1"</span> x2=<span class="string">"0"</span> y2=<span class="string">"0"</span> id=&#123;<span class="string">'right'</span> + idx&#125;&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"0%"</span> style=&#123;&#123;stopColor: colors.mini&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"100%"</span> style=&#123;&#123;stopColor: colors.max&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">			&lt;/linearGradient&gt;</span><br><span class="line">			&lt;filter id=<span class="string">"f1"</span> x=<span class="string">"0"</span> y=<span class="string">"0"</span> height=<span class="string">"200%"</span> width=<span class="string">"200%"</span>&gt;</span><br><span class="line">				&lt;feOffset result=<span class="string">"offOut"</span> in=<span class="string">"SourceAlpha"</span> dx=<span class="string">"4"</span> dy=<span class="string">"4"</span>/&gt;</span><br><span class="line">				&lt;feGaussianBlur result=<span class="string">"blurOut"</span> in=<span class="string">"offOut"</span> stdDeviation=<span class="string">"8"</span>/&gt;</span><br><span class="line">				&lt;feBlend in=<span class="string">"SourceGraphic"</span> in2=<span class="string">"blurOut"</span> mode=<span class="string">"normal"</span>/&gt;</span><br><span class="line">			&lt;/filter&gt;</span><br><span class="line">			&lt;linearGradient id=&#123;<span class="string">'right-'</span> + idx&#125; gradientUnits=<span class="string">"userSpaceOnUse"</span> x1=<span class="string">"220"</span> y1=<span class="string">"60"</span> x2=<span class="string">"220"</span></span><br><span class="line">							y2=<span class="string">"375"</span>&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"0"</span> style=&#123;&#123;stopColor: colors.mini&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"1"</span> style=&#123;&#123;stopColor: colors.middle&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">			&lt;/linearGradient&gt;</span><br><span class="line">			&lt;linearGradient id=&#123;<span class="string">'left-'</span> + idx&#125; gradientUnits=<span class="string">"userSpaceOnUse"</span> x1=<span class="string">"0"</span> y1=<span class="string">"60"</span> x2=<span class="string">"0"</span></span><br><span class="line">							y2=<span class="string">"375"</span>&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"0"</span> style=&#123;&#123;stopColor: colors.max&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">				&lt;stop offset=<span class="string">"1"</span> style=&#123;&#123;stopColor: colors.middle&#125;&#125;&gt;&lt;/stop&gt;</span><br><span class="line">			&lt;/linearGradient&gt;</span><br><span class="line">		&lt;/defs&gt;</span><br><span class="line">                 &lt;g&gt;</span><br><span class="line">                 <span class="comment">/* 进度条的底色 */</span></span><br><span class="line">			&lt;circle cx=<span class="string">"220"</span> cy=<span class="string">"220"</span> r=<span class="string">"160"</span> strokeWidth=<span class="string">"50"</span> stroke=<span class="string">"#e5e8f8"</span> fill=<span class="string">"none"</span></span><br><span class="line">					strokeDasharray=<span class="string">"1005 1005"</span>&gt;&lt;/circle&gt;</span><br><span class="line">			&lt;path d=&#123;`$&#123;this.sector(percent).join(<span class="string">' '</span>)&#125;`&#125; stroke=&#123;`url(<span class="string">'#right-$&#123;idx&#125;'</span>)`&#125; fill=<span class="string">"none"</span></span><br><span class="line">				  strokeWidth=<span class="string">"40"</span>&gt;&lt;/path&gt;</span><br><span class="line">			&#123;percent &gt; <span class="number">50</span></span><br><span class="line">			&amp;&amp;</span><br><span class="line">			&lt;path d=&#123;`$&#123;this.sector(percent, <span class="string">'left'</span>).join(<span class="string">' '</span>)&#125;`&#125; stroke=&#123;`url(<span class="string">'#left-$&#123;idx&#125;'</span>)`&#125; fill=<span class="string">"none"</span></span><br><span class="line">				  strokeWidth=<span class="string">"40"</span>&gt;&lt;/path&gt;&#125;</span><br><span class="line">			&lt;circle cx=<span class="string">"220"</span> cy=<span class="string">"220"</span> r=<span class="string">"197"</span> strokeWidth=<span class="string">"40"</span> stroke=<span class="string">"#f5f6fa"</span> fill=<span class="string">"none"</span></span><br><span class="line">					strokeDasharray=<span class="string">"1256 1256"</span>&gt;&lt;/circle&gt;</span><br><span class="line">		&lt;/g&gt;</span><br><span class="line">	 </span><br><span class="line">	&lt;/svg&gt;</span><br><span class="line">	&lt;p className=<span class="string">"percent-text  "</span> style=&#123;&#123;color: colors.max&#125;&#125;&gt;</span><br><span class="line">		&lt;span className=&#123;<span class="string">'percent-number'</span>&#125;&gt;</span><br><span class="line">			&#123;percent&#125;</span><br><span class="line">		&lt;/span&gt;</span><br><span class="line">		&lt;span className=&#123;<span class="string">'percent-symbol'</span>&#125;&gt;</span><br><span class="line">			%</span><br><span class="line">		&lt;/span&gt;</span><br><span class="line">	&lt;/p&gt;</span><br><span class="line">         &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p> <code>linearGradient</code>是表示创建渐变；</p>
<p> <code>g</code>中的<code>circle</code>表示进度条的底色和外部包裹圆环；当进度大于50%时才创建左半圆，边框的宽度都是40px；</p>
<p> colors是预定义的几种颜色，用于渐变 ：<code>const colors = {max: &#39;#3cc8bc&#39;, middle: &#39;#27aea3&#39;, mini: &#39;#9eece7&#39;}</code>；</p>
<p>百分比显示在圆环中间。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文通过两个简单例子展示svg的强大之处。总的来说，svg不难， 只是涉及的知识比较多， 多实践，就熟练了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> SVG </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建前端异常监控系统]]></title>
      <url>https://qimajiang.com/2018/04/25/%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<ul>
<li>最近公司的业务系统和几个对外应用Web端进入了最后测试阶段，随之带来的问题是每次出现问题都要测试人员主动联系我们开发者，但有时又无法重现， 既浪费时间， 又无法及时有效解决异常。因此，我觉得搭建一个前端异常监控系统， 用来实时收集前端异常， 及时解决前端异常。<a id="more"></a>
</li>
</ul>
<h1 id="一、开源监控服务的优劣"><a href="#一、开源监控服务的优劣" class="headerlink" title="一、开源监控服务的优劣"></a>一、开源监控服务的优劣</h1><p>在日常的工作中，我们在开发某个功能或者应用之前， 都会先搜寻一下是否有相似的开源项目，以此来提高开发效率。在前端监控系统这类项目中， 我比较喜欢<a href="https://github.com/getsentry/sentry" target="_blank" rel="noopener">Sentry</a>这个项目：</p>
<h4 id="1、功能齐全，包括多项目管理，-团队与成员的管理，可视化统计分析，issues分配等等。"><a href="#1、功能齐全，包括多项目管理，-团队与成员的管理，可视化统计分析，issues分配等等。" class="headerlink" title="1、功能齐全，包括多项目管理， 团队与成员的管理，可视化统计分析，issues分配等等。"></a>1、功能齐全，包括多项目管理， 团队与成员的管理，可视化统计分析，issues分配等等。</h4><h4 id="2、SDK丰富，-包括了JavaScript，-Nodejs，-Java等等收集工具。"><a href="#2、SDK丰富，-包括了JavaScript，-Nodejs，-Java等等收集工具。" class="headerlink" title="2、SDK丰富， 包括了JavaScript， Nodejs， Java等等收集工具。"></a>2、SDK丰富， 包括了JavaScript， Nodejs， Java等等收集工具。</h4><h4 id="3、可以采用Docker安装，容器化管理数据。"><a href="#3、可以采用Docker安装，容器化管理数据。" class="headerlink" title="3、可以采用Docker安装，容器化管理数据。"></a>3、可以采用Docker安装，容器化管理数据。</h4><h4 id="4、项目一直在维护更新。"><a href="#4、项目一直在维护更新。" class="headerlink" title="4、项目一直在维护更新。"></a>4、项目一直在维护更新。</h4><p>但功能齐全的背后带来的问题就是，每个公司都会有客制化的需求， 而要想在如此庞大的项目中二次开发是十分吃力的。对于我们公司目前的开发力量开始， 暂时无法分配人员专门客制化Sentry。</p>
<h1 id="二、收集日志的方法"><a href="#二、收集日志的方法" class="headerlink" title="二、收集日志的方法"></a>二、收集日志的方法</h1><p>收集日志的手段，基本是两种，一个是逻辑中的错误判断，为主动判断；一个是利用语言给我们提供的捷径，暴力式获取错误信息，如<code>try..catch</code> 和 <code>window.onerror</code>。</p>
<h3 id="1-上报Ajax请求错误"><a href="#1-上报Ajax请求错误" class="headerlink" title="1 上报Ajax请求错误"></a>1 上报Ajax请求错误</h3><p>就公司目前的开发栈来说， 前后端通讯都是依靠rest api，尤其在使用React这种前端框架后， 在axios的请求中会出现无法预料的错误与异常。那么此时我们需要主动调用日志上报工具收集错误并发给监控系统。</p>
<p>在axios的响应拦截中(示例)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//响应拦截</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">            return response.data;</span><br><span class="line">       </span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        appStore.hideLoading();</span><br><span class="line">        Reporter.send(&#123;</span><br><span class="line">            &#123;</span><br><span class="line">    error: error</span><br><span class="line">    msg: &quot;ajax error&quot;</span><br><span class="line">  &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        return Promise.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="2、使用try-catch捕获"><a href="#2、使用try-catch捕获" class="headerlink" title="2、使用try..catch捕获"></a>2、使用<code>try..catch</code>捕获</h3><p>判断某个函数或某段代码里存在错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  fetch();</span><br><span class="line">   </span><br><span class="line">&#125; catch(e)&#123;</span><br><span class="line">  Reporter.send(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在React应用中， 可以使用组件的 <code>componentOnCatch</code>来捕获该组件内所有错误</p>
<h3 id="3、window-onerror"><a href="#3、window-onerror" class="headerlink" title="3、window.onerror"></a>3、<code>window.onerror</code></h3><p>捕获全局错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.onerror =  () =&gt; &#123;</span><br><span class="line">  var errInfo = format(arguments);</span><br><span class="line">  Reporter.send(errInfo);</span><br><span class="line">  return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的函数中返回 <code>return true</code>，控制台不会输出错误信息。下面是它的参数信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;String&#125;  errorMessage   错误信息</span><br><span class="line"> * @param &#123;String&#125;  scriptURI      出错的文件</span><br><span class="line"> * @param &#123;Long&#125;    lineNumber     出错代码的行号</span><br><span class="line"> * @param &#123;Long&#125;    columnNumber   出错代码的列号</span><br><span class="line"> * @param &#123;Object&#125;  errorObj       错误的详细信息，Anything</span><br><span class="line"> */</span><br><span class="line">window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    // code..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、前端上报异常的坑"><a href="#三、前端上报异常的坑" class="headerlink" title="三、前端上报异常的坑"></a>三、前端上报异常的坑</h1><h3 id="1、无具体报错信息，Script-error"><a href="#1、无具体报错信息，Script-error" class="headerlink" title="1、无具体报错信息，Script error."></a>1、无具体报错信息，<code>Script error</code>.</h3><p>在日常开发中我们会医用一些第三方库， 当这些库在我们的应用中出现异常时， 由于浏览器的安全限制，我们无法捕获到具体的错误和错误位置，目的是避免数据泄露到不安全的域中。</p>
<h3 id="2、-异常上报跨域限制"><a href="#2、-异常上报跨域限制" class="headerlink" title="2、 异常上报跨域限制"></a>2、 异常上报跨域限制</h3><p>这也是由于浏览器的同源策略， 不予对非同源的资源进行操作。但通常异常监控系统与目标应用都是不同源， 这就涉及到一个跨域问题了。在React的开发中，若使用rest api进行通讯， 也需要配置反向代理才能进行Ajax请求。</p>
<p>那我们该如何在异常上报中打破跨域的限制呢？</p>
<p>在上报的HTTP的投中加入 <code>header(&#39;Access-Control-Allow-Origin: *&#39;)</code> 同样，在服务中也需要设置 <code>Access-Control-Allow-Origin</code>的响应头。</p>
<h3 id="3、压缩代码无法定位到错误位置。"><a href="#3、压缩代码无法定位到错误位置。" class="headerlink" title="3、压缩代码无法定位到错误位置。"></a>3、压缩代码无法定位到错误位置。</h3><p>在我们的日常开发中，我们使用Debug可以定位到代码错误的哪一行哪一列。但在生产环境中的代码通常是经过压缩的，按照正常debug方法， 显示的错误位置都是第一行。那么我们如何解决呢？</p>
<p>第一个想到的办法是利用 sourceMap，利用它可以定位到压缩代码某一点在未压缩代码的具体位置。下面是 sourceMap 引入的格式，在代码的最后一行加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//# sourceMappingURL=index.js.map</span><br></pre></td></tr></table></figure>
<h3 id="4、切勿重复注册error事件"><a href="#4、切勿重复注册error事件" class="headerlink" title="4、切勿重复注册error事件"></a>4、切勿重复注册error事件</h3><p>在以前的前端应用中，很容易出现这个问题。在React这种单页面应用， 我们只需要在应用的入口处注册我们的error事件即可。保证error事件只被注册一次， 以免漏掉错误发生点。</p>
<h3 id="5、异常上报频率"><a href="#5、异常上报频率" class="headerlink" title="5、异常上报频率"></a>5、异常上报频率</h3><p>我们当然希望把所有的错误上上报到监控系统中， 但一旦应用十分庞大时， 上报的频率会非常大， 在一定程度上会影响前端应用的性能。这个只能根据实际项目去衡量得失了。</p>
<h1 id="四、设计监控系统"><a href="#四、设计监控系统" class="headerlink" title="四、设计监控系统"></a>四、设计监控系统</h1><p>对于前端开发人员来说， 最熟悉的还是Nodejs了。因此我们决定使用Nodejs搭建一个简单的异常收集与监控系统。</p>
<h3 id="1、数据库设计"><a href="#1、数据库设计" class="headerlink" title="1、数据库设计"></a>1、数据库设计</h3><p>在数据库想选择上当然是MongoDB了 ， 适合存储格式不统一的日志文本。</p>
<p>创建四个文档：</p>
<p>####（1）<code>user</code> 用于存储监控系统的用户和角色等控制。</p>
<h4 id="2-bug-用于存储前端上报的错误与异常。"><a href="#2-bug-用于存储前端上报的错误与异常。" class="headerlink" title="(2) bug 用于存储前端上报的错误与异常。"></a>(2) <code>bug</code> 用于存储前端上报的错误与异常。</h4><h4 id="3-project-目前来说我们的有不止一个的前端项目，-所有监控系统需要支持多项目管理，-存储不同的项目的上报KEY，用于统计和分析。"><a href="#3-project-目前来说我们的有不止一个的前端项目，-所有监控系统需要支持多项目管理，-存储不同的项目的上报KEY，用于统计和分析。" class="headerlink" title="(3) project 目前来说我们的有不止一个的前端项目， 所有监控系统需要支持多项目管理， 存储不同的项目的上报KEY，用于统计和分析。"></a>(3) <code>project</code> 目前来说我们的有不止一个的前端项目， 所有监控系统需要支持多项目管理， 存储不同的项目的上报KEY，用于统计和分析。</h4><h4 id="4-ajax-用于ajax请求中上报的错误，-ajax的错误或许会很多，-而且错误格式与window-error不一致，-所以将两者分开存储。"><a href="#4-ajax-用于ajax请求中上报的错误，-ajax的错误或许会很多，-而且错误格式与window-error不一致，-所以将两者分开存储。" class="headerlink" title="(4) ajax 用于ajax请求中上报的错误， ajax的错误或许会很多， 而且错误格式与window.error不一致， 所以将两者分开存储。"></a>(4) <code>ajax</code> 用于ajax请求中上报的错误， ajax的错误或许会很多， 而且错误格式与window.error不一致， 所以将两者分开存储。</h4><p>剩下的就是各个文档中的字段设计了， 这里就不赘述了。</p>
<h3 id="2、系统架构设计"><a href="#2、系统架构设计" class="headerlink" title="2、系统架构设计"></a>2、系统架构设计</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fr1wtqpfcyj305q09oq2u.jpg" alt=""></p>
<ul>
<li><p><code>config</code> 用于一些系统配置</p>
</li>
<li><p><code>controllers</code> 用于系统控制器，接受http请求被返回处理后的结果</p>
</li>
<li><p><code>lib</code> 用于系统函数和工具函数</p>
</li>
<li><p><code>models</code> 用于数据模型的定于与设计</p>
</li>
<li><p><code>router</code> 用于系统的路由定义</p>
</li>
<li><p><code>services</code> 用于封装数据库的查询服务</p>
</li>
<li><p><code>app.js</code> 是整个Nodejs系统的入口，启动http服务和连接数据库等等。</p>
</li>
</ul>
<h3 id="3、reast-api设计"><a href="#3、reast-api设计" class="headerlink" title="3、reast api设计"></a>3、reast api设计</h3><p>在rest通讯中最重要的一点就是使用token进行用户的认证与授权（JWT）， 我在这里使用的是<code>jsonwebtoken</code></p>
<p>在控制器的方法中定义http的请求的类型、参数和响应体，总体难度不大， 根据项目实际需求来设计。</p>
<h1 id="五、-最后"><a href="#五、-最后" class="headerlink" title="五、 最后"></a>五、 最后</h1><p>到目前为止我们的简单异常监控系统初具雏形了，剩下的就是如何填充血肉了。在整个系统的设计中还是学到不少知识， 有些东西因为时间久了，有些遗忘，不得不去重新学习。因此，作为一个开发者， 最重要的还是要时刻保持求贤若渴的心态许学习心知识和温故旧知识。</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建企业内部React组件库]]></title>
      <url>https://qimajiang.com/2018/03/24/%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8React%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
      <content type="html"><![CDATA[<ul>
<li>最近针对日常业务需求使用react封装了一套基于 ant-design 的[业务组件库], 大概记录下整个开发过程中的心得，在这里只对开发过程中的选型和打包等进行讨论，后续再对具体组件的封装进行讨论。<a id="more"></a>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着公司的 React 应用越来越多， 在编写每个应用时都会封装各自的组件， 但久而久之会发现， 有些组件是每个应用都可以使用的。 然而，在每个应用内维护相同的功能组件， 既浪费时间， 组件功能和样式又得不到同步。于是我就在想能不能把这些通用组件抽取出来， 创建一个企业内部的业务组件库， 打包发布到 npm 内部管理服务器。</p>
<p>由于目前公司采用的组件库是 ant-design ，本次的内部组件库是对 ant-design 的二次封装，以便满足公司的业务。虽然 <a href="https://pro.ant.design/index-cn" target="_blank" rel="noopener">antd-pro</a>是基于 ant-desgin 的中后台业务组件库， 但也无法完全满足公司的业务逻辑， 所以还是自己做一些功夫， 定制自己业务组件库，暂且命名为 hx-react-components</p>
<h2 id="搭建-npm-私服"><a href="#搭建-npm-私服" class="headerlink" title="搭建 npm 私服"></a>搭建 npm 私服</h2><p>npm 私服有几个选择：</p>
<ul>
<li><p><a href="https://www.npmjs.com/package/sinopia" target="_blank" rel="noopener">sinopia</a> 已停止维护和升级</p>
</li>
<li><p><a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a> 一个sinopia的fork</p>
</li>
</ul>
<p>这里我采用 Verdaccio 搭建 npm 私服。安装教程可参考官方教程。使用也很简单：</p>
<ul>
<li><p>启动 <code>verdaccio</code>,不要用 root 启动，会引发不可控错误。</p>
</li>
<li><p>设置服务访问路径，默认只能本地访问 <code>npm set registry http://ip:4873/</code></p>
</li>
<li><p>添加用户 <code>npm adduser --registry http://ip:4873</code></p>
</li>
<li><p>发布我们的包 <code>npm publish --registry http://ip:4873</code></p>
</li>
</ul>
<p>就是如此简单！</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="技术方案选择"><a href="#技术方案选择" class="headerlink" title="技术方案选择"></a>技术方案选择</h3><p>Webpack + React</p>
<p>毫无疑问的选择 React 进行业务组件定制。</p>
<h4 id="1、应用初始化"><a href="#1、应用初始化" class="headerlink" title="1、应用初始化"></a>1、应用初始化</h4><p>使用 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>进行初始化， 无须过多的配置。</p>
<h4 id="2、引入-ant-design"><a href="#2、引入-ant-design" class="headerlink" title="2、引入 ant-design"></a>2、引入 ant-design</h4><p>具体方法参考 <a href="ant.design">ant-desgin</a> 的官方教程。</p>
<h4 id="3、样式预编译语言"><a href="#3、样式预编译语言" class="headerlink" title="3、样式预编译语言"></a>3、样式预编译语言</h4><p>由于该组件库大多是业务逻辑组件， 暂且不考虑 Less 其他样式预编译语言。后期再考虑。所以依然采用 CSS 进行部分样式描绘。</p>
<h3 id="开发流程和规范"><a href="#开发流程和规范" class="headerlink" title="开发流程和规范"></a>开发流程和规范</h3><p>由于该组件库是完全独立于其他任何 React 项目， 而且不需要编写页面， 因此需要有特有的开发流程和架构。主要有一下几点：</p>
<ul>
<li><p>包含开发、测试和打包三种模式。</p>
</li>
<li><p>使用pure-render，autobind等尽可能保证组件的性能及效率</p>
</li>
<li><p>保证props和回调的语义性，如回调统一使用onXXX进行处理</p>
</li>
</ul>
<p>针对不同的模式， 配置不同的 webpack脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,//测试</span><br><span class="line"><span class="string">"styleguide"</span>: <span class="string">"styleguidist server"</span>, //文档开发</span><br><span class="line"><span class="string">"styleguide:build"</span>: <span class="string">"styleguidist build"</span>, //文档大伯</span><br><span class="line"><span class="string">"styleguide:deploy"</span>: <span class="string">"scp -r styleguide/* root@192.168.1.x:/var/www/styleguide"</span>,//文档部署，供公司人员查看</span><br><span class="line"><span class="string">"predeploy"</span>: <span class="string">"npm run styleguide:build"</span>,//预处理文档部署</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"babel src -d lib"</span>,//组件库打包</span><br><span class="line"><span class="string">"lint"</span>: <span class="string">"eslint src/components/**; exit 0"</span>,//组件库规范检查</span><br><span class="line"><span class="string">"lint:watch"</span>: <span class="string">"esw -w src/**"</span>,//规范监控</span><br><span class="line"><span class="string">"prepublish"</span>: <span class="string">"npm run build"</span>,//预发布</span><br><span class="line"><span class="string">"push"</span>: <span class="string">"git push origin &amp;&amp; git push origin --tags"</span>,//推送远程仓库</span><br><span class="line"><span class="string">"release:patch"</span>: <span class="string">"npm version patch &amp;&amp; npm publish --registry=http://192.168.1.x"</span>,// 兼容版本发布到 Verdaccio</span><br><span class="line"><span class="string">"release:minor"</span>: <span class="string">"npm version minor &amp;&amp; npm publish --registry=http://192.168.1.x"</span>,// 小版本发布到 Verdaccio</span><br><span class="line"><span class="string">"release:major"</span>: <span class="string">"npm version major &amp;&amp; npm publish --registry=http://192.168.1.x"</span>// 大版本发布到 Verdaccio</span><br></pre></td></tr></table></figure>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h3><p>针对组件库的打包，我们以UMD格式对其进行打包。webpack可以针对输出进行格式设置：（引自cnode)</p>
<ul>
<li>“var” 以变量方式输出</li>
<li>“this” 以 this 的一个属性输出： this[“Library”] = xxx；</li>
<li>“commonjs” 以 exports 的一个属性输出：exports[“Library”] = xxx；</li>
<li>“commonjs2” 以 module.exports 形式输出：module.exports = xxx；</li>
<li>“amd” 以 AMD 格式输出；</li>
<li>“umd” 同时以 AMD、CommonJS2 和全局属性形式输出。</li>
</ul>
<p>配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">output: &#123;</span><br><span class="line">  path: config.build.assetsRoot,</span><br><span class="line">  filename: utils.assetsPath(<span class="string">'js/[name].js'</span>),</span><br><span class="line">  chunkFilename: utils.assetsPath(<span class="string">'js/[id].js'</span>),</span><br><span class="line">  library: <span class="string">'TipUi'</span>,</span><br><span class="line">  libraryTarget: <span class="string">'umd'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<blockquote>
<p>这里不应该把React引用进去。一般我们可以采用externals的方式对其进行处理。</p>
</blockquote>
<h2 id="文档示例"><a href="#文档示例" class="headerlink" title="文档示例"></a>文档示例</h2><p>开发组件库不同于页面开发， 可以配置路由来预览我们的开发。</p>
<p>一个完善的文档对于一个组件库是及其重要的，每个组件有什么样的配置参数，拥有哪些事件回调，对应的Demo和展示效果。假设没有这些，除了封装组件的人，没有人知道它该如何使用。但是写文档的过程往往是痛苦的，在这里推荐几个文档生成库，可以极大的简化文档工作：</p>
<ul>
<li>docsify 基于Vue的组件生成器，轻量好用</li>
<li>react-styleguidist 基于React的组件库文档生成器，自动根据注释生成文档，支持Demo展示。超好用</li>
<li>bisheng ant design自己写的文档生成器</li>
</ul>
<p>我们使用的styleguidist, 可以将md自动转化为文档，支持在md内直接调用你封装好的组件并进行展示，简单好用</p>
<h2 id="组件库使用"><a href="#组件库使用" class="headerlink" title="组件库使用"></a>组件库使用</h2><p>在我们的项目里， 其他的依赖包是从 npm 官网拉取， 但我们的x-react-components 是走npm 私服 - verdaccio， 那如何写package.json 的 x-react-components 依赖路径呢？</p>
<p> 目前我们是这样写：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"x-react-components"</span>:<span class="string">"http://ip:4873/x-react-components/-/0.1.15.tar.gz"</span></span><br></pre></td></tr></table></figure>
<p>这样写的缺点就是每次手动改版本号，  后续会考虑采用 dll检查组件库的更新状况。</p>
<p>每次 react 应用打包前检查 x-react-components 是否有更新。有， 先更新组件库， 再打包； 否则， 直接打包。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文概述了如何构建 npm 私服、开发自己的业务组件库。篇幅有限， 可能很多细节没有描述清楚， 但这大致是我在公司搭建的内部react 组件 库的过程。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端预览PDF那些事]]></title>
      <url>https://qimajiang.com/2018/03/10/%E5%89%8D%E7%AB%AFPDF%E9%A2%84%E8%A7%88%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<ul>
<li>最近项目中需要在网页上预览 PDF，目前了解到 有<code>&lt;iframe&gt;、&lt;object&gt;、&lt;embed&gt;</code>标签 和 pdf.js、pdfObject等几种第三方解决方案， 但还有一些注意事项。<a id="more"></a>
</li>
</ul>
<h1 id="一、-lt-iframe-gt-预览-PDF"><a href="#一、-lt-iframe-gt-预览-PDF" class="headerlink" title="一、&lt;iframe&gt; 预览 PDF"></a>一、<code>&lt;iframe&gt;</code> 预览 PDF</h1><p>在 PDF 预览中<code>&lt;iframe&gt;</code>算是一种古老但高效的解决方案。现在所有浏览器都支持 &lt; iframe &gt; 标签，直接将src设置为指定的PDF文件就可以预览了。src可以是url、bolb 或者 base64,一切问题都容易解决， 关键是要标记 资源类型<code>type=“application/pdf”</code></p>
<h1 id="二、-lt-embed-gt-预览-PDF"><a href="#二、-lt-embed-gt-预览-PDF" class="headerlink" title="二、&lt;embed&gt;预览 PDF"></a>二、<code>&lt;embed&gt;</code>预览 PDF</h1><p><code>&lt; embed &gt;</code>标签定义嵌入的内容，比如插件。但是这个标签没有提供回退方案，与<code>&lt; iframe &gt; &lt; / iframe &gt;</code><br>不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到，经测试在 Safari 下无法预览。用法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;embed src=<span class="string">"/my.pdf"</span> <span class="built_in">type</span>=<span class="string">"application/pdf"</span> width=<span class="string">"100%"</span> height=<span class="string">"100%"</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="三、-lt-object-gt-预览-PDF"><a href="#三、-lt-object-gt-预览-PDF" class="headerlink" title="三、&lt;object&gt;预览 PDF"></a>三、<code>&lt;object&gt;</code>预览 PDF</h1><p><code>&lt; object &gt;</code>定义了一个嵌入的对象，可以使用此元素向页面添加多媒体。该元素允许您规定插入 HTML 文档中的对象的数据和参数，以及可用来显示和操作数据的代码。用于包含对象，比如图像、音频、视频、Java applets、ActiveX、PDF 以及 Flash。几乎所有主流浏览器都拥有部分对 <code>&lt; object &gt;</code>标签的支持。这个标签在这里的用法和<code>&lt; iframe &gt;</code>很类似，也支持回退；还可以和<code>&lt;iframe&gt;</code>结合使用， 为我们提供更强大的回退方案。</p>
<blockquote>
<p>以上的标签都是无需 JavaScript 支持的 PDF 预览方案， 接下来谈谈 JS 库下的 pdf 预览方案。</p>
</blockquote>
<h1 id="四、pdf-js-预览-PDF"><a href="#四、pdf-js-预览-PDF" class="headerlink" title="四、pdf.js 预览 PDF"></a>四、pdf.js 预览 PDF</h1><p>PDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。 </p>
<p>由于我是在 React 下使用该库， 因此使用了 <a href="https://github.com/mikecousins/react-pdf-js" target="_blank" rel="noopener">react-pdf-js</a> 这个react 组件实现 pdf.js相同的效果。</p>
<p>具体用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import PDF from &apos;react-pdf-js&apos;;</span><br><span class="line"></span><br><span class="line">class MyPdfViewer extends React.Component &#123;</span><br><span class="line">  state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  onDocumentComplete = (pages) =&gt; &#123;</span><br><span class="line">    this.setState(&#123; page: 1, pages &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onPageComplete = (page) =&gt; &#123;</span><br><span class="line">    this.setState(&#123; page &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePrevious = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; page: this.state.page - 1 &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleNext = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; page: this.state.page + 1 &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderPagination = (page, pages) =&gt; &#123;</span><br><span class="line">    let previousButton = &lt;li className=&quot;previous&quot; onClick=&#123;this.handlePrevious&#125;&gt;&lt;a href=&quot;#&quot;&gt;&lt;i className=&quot;fa fa-arrow-left&quot;&gt;&lt;/i&gt; Previous&lt;/a&gt;&lt;/li&gt;;</span><br><span class="line">    if (page === 1) &#123;</span><br><span class="line">      previousButton = &lt;li className=&quot;previous disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;i className=&quot;fa fa-arrow-left&quot;&gt;&lt;/i&gt; Previous&lt;/a&gt;&lt;/li&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    let nextButton = &lt;li className=&quot;next&quot; onClick=&#123;this.handleNext&#125;&gt;&lt;a href=&quot;#&quot;&gt;Next &lt;i className=&quot;fa fa-arrow-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;;</span><br><span class="line">    if (page === pages) &#123;</span><br><span class="line">      nextButton = &lt;li className=&quot;next disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;Next &lt;i className=&quot;fa fa-arrow-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;ul className=&quot;pager&quot;&gt;</span><br><span class="line">          &#123;previousButton&#125;</span><br><span class="line">          &#123;nextButton&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    let pagination = null;</span><br><span class="line">    if (this.state.pages) &#123;</span><br><span class="line">      pagination = this.renderPagination(this.state.page, this.state.pages);</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PDF</span><br><span class="line">          file=&quot;somefile.pdf&quot;</span><br><span class="line">          onDocumentComplete=&#123;this.onDocumentComplete&#125;</span><br><span class="line">          onPageComplete=&#123;this.onPageComplete&#125;</span><br><span class="line">          page=&#123;this.state.page&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &#123;pagination&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = MyPdfViewer;</span><br></pre></td></tr></table></figure>
<h3 id="在实际使用中，-效果确实不错，-还提供-webworker-来实现分页渲染，但因为我目前的项目是要预览含有电子签章的-PDF-文件，"><a href="#在实际使用中，-效果确实不错，-还提供-webworker-来实现分页渲染，但因为我目前的项目是要预览含有电子签章的-PDF-文件，" class="headerlink" title="在实际使用中， 效果确实不错， 还提供 webworker 来实现分页渲染，但因为我目前的项目是要预览含有电子签章的 PDF 文件，"></a>在实际使用中， 效果确实不错， 还提供 webworker 来实现分页渲染，但因为我目前的项目是要预览含有电子签章的 PDF 文件，</h3><p>在测试中发现，pdf.js 并不支持该特性，若要显示电子签章， 需要在源文件中更改一些地方， 故此我在项目中放弃使用 pdf.js</p>
<h1 id="五、pdfObject"><a href="#五、pdfObject" class="headerlink" title="五、pdfObject"></a>五、pdfObject</h1><p>看官网上的介绍，PDFObject并不是一个PDF渲染工具，它也是通过&lt; embed &gt;标签实现PDF预览。PDFObject提供了一个PDFObject.supportsPDFs用于判断该浏览器能否使用PDFObject。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span><br><span class="line">   console.log(<span class="string">"Yay, this browser supports inline PDFs."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   console.log(<span class="string">"Boo, inline PDFs are not supported by this browser"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个库我是最近才了解到，本打算看看如何隐藏<code>&lt;iframe&gt;</code>预览的 pdf 中的工具栏， 无意中发现该方案，目前尚未尝试，基本用法也很简单:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span><br><span class="line">        // PDF嵌入到网页</span><br><span class="line">        PDFObject.embed(<span class="string">"index.pdf"</span>, <span class="string">"#pdf_viewer"</span> );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        location.href = <span class="string">"/canvas"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h1><p>总的来说，pdf 预览的方案挺多选择的， 适合自己项目的才是最好。 像我的需求是要显示电子签章， 验证多种方案后选择使用 iframe 标签显示。当然你也可以再后端把 pdf 文件转换成图片传回前端显示。</p>
]]></content>
      
        
        <tags>
            
            <tag> PDF </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发一个美剧自动嗅探下载器:TVDragon(下)]]></title>
      <url>https://qimajiang.com/2018/01/28/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%BE%8E%E5%89%A7%E8%87%AA%E5%8A%A8%E5%97%85%E6%8E%A2%E4%B8%8B%E8%BD%BD%E5%99%A8-TVDragon-%E4%B8%8B/</url>
      <content type="html"><![CDATA[<ul>
<li>通过上篇的准备工作， 我们基本掌握整个爬虫的工作流程。接下来我们就要实现该爬虫系统了。在程序语言上有了改动， 因为最近基本是 JavaScript开发， 所以我们采用 Nodejs 作为开发语言， 而不是 PHP。毕竟， 一个程序的好坏跟程序语言没有必然联系。<a id="more"></a>
</li>
</ul>
<h2 id="一、搭建框架"><a href="#一、搭建框架" class="headerlink" title="一、搭建框架"></a>一、搭建框架</h2><h4 id="1、使用-package-json初始化。"><a href="#1、使用-package-json初始化。" class="headerlink" title="1、使用 package.json初始化。"></a>1、使用 <code>package.json</code>初始化。</h4><h4 id="2、构建目录结构，目前的目录结构如图。"><a href="#2、构建目录结构，目前的目录结构如图。" class="headerlink" title="2、构建目录结构，目前的目录结构如图。"></a>2、构建目录结构，目前的目录结构如图。</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnwaa886m9j306n097wef.jpg" alt=""></p>
<p> 解释：</p>
<ul>
<li><code>src</code><ul>
<li><code>dev.js spider.js index.js</code>根据部署环境调用不同文件作为入口。</li>
<li><code>config</code> 数据库和 程序参数等基本设置</li>
<li><code>constants</code> 一些种子网站列表和 api 等定义。</li>
<li><code>core</code>核心的爬虫类， 定义播放表获取、下 html 代码 html解析类和 transmissiorpc 连接类等核心类库。  </li>
<li><code>storage</code>  数据库 Schema 定义和 CRUD 的基本服务类。</li>
</ul>
</li>
</ul>
<h4 id="3、定义-Mongoose-Schema"><a href="#3、定义-Mongoose-Schema" class="headerlink" title="3、定义 Mongoose Schema"></a>3、定义 Mongoose Schema</h4><p>这里我们使用 Mongoose 来操作MongoDB，首先需要定义Schema。</p>
<p>1、 播放表 Schema，用了存储从字幕组 APP 获取的美剧播放表。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import mongoose from <span class="string">'mongoose'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> SeriesSchema = <span class="keyword">new</span> Schema(</span><br><span class="line">    &#123;</span><br><span class="line">        id: &#123;type: Number, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        cnname: &#123;type: String, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        enname: &#123;type: String, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        poster:  String ,</span><br><span class="line">        season: &#123;type: Number, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        episode: &#123;type: Number, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        play_time: &#123;type: String, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        poster_a: String,</span><br><span class="line">        poster_b: String,</span><br><span class="line">        poster_m: String,</span><br><span class="line">        poster_s: String,</span><br><span class="line">        status: &#123; type: Number, required: <span class="keyword">true</span>, <span class="keyword">default</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">        created_at: &#123;type: Date, <span class="keyword">default</span>: Date.now&#125;,</span><br><span class="line">        updated_at: &#123;type: Date, <span class="keyword">default</span>: Date.now&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        collection: <span class="string">'series'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span>   mongoose.model(<span class="string">'series'</span>, SeriesSchema)</span><br></pre></td></tr></table></figure>
<p>2、种子 Schema,用来存储从种子网站爬取解析得到的 torrent 列表。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mongoose from <span class="string">'mongoose'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> TorrentSchema = <span class="keyword">new</span> Schema(</span><br><span class="line">    &#123;</span><br><span class="line">        series_id: &#123;type: Number, required: <span class="keyword">true</span>&#125;,</span><br><span class="line">        torrent_name: String,</span><br><span class="line">        hash: String,</span><br><span class="line">        url: String,</span><br><span class="line">        size: String,</span><br><span class="line">        seeds:Number,<span class="comment">//种子数</span></span><br><span class="line">        downloaded: &#123;type: Boolean, required: <span class="keyword">true</span>, <span class="keyword">default</span>: <span class="keyword">false</span>&#125;,</span><br><span class="line">        status: &#123; type: Number, required: <span class="keyword">true</span>, <span class="keyword">default</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">        created_time: &#123;type: Date, <span class="keyword">default</span>: Date.now&#125;,</span><br><span class="line">        updated_time: &#123;type: Date, <span class="keyword">default</span>: Date.now&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        collection: <span class="string">'torrent'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span>   mongoose.model(<span class="string">'torrent'</span>, TorrentSchema)</span><br></pre></td></tr></table></figure>
<h4 id="4、爬取美剧播放表信息（根据当天日期），持久化存储到-MongoDB"><a href="#4、爬取美剧播放表信息（根据当天日期），持久化存储到-MongoDB" class="headerlink" title="4、爬取美剧播放表信息（根据当天日期），持久化存储到 MongoDB"></a>4、爬取美剧播放表信息（根据当天日期），持久化存储到 MongoDB</h4><p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> fetchSchedule (startDate, endDate)  &#123;</span><br><span class="line">    <span class="keyword">const</span> queryStr =  &#123;</span><br><span class="line">        accesskey:<span class="string">'e519f9cajd7qc8059d175449479u61a827'</span>,</span><br><span class="line">        client:<span class="number">1</span>,</span><br><span class="line">        g:<span class="string">'api/v2'</span>,</span><br><span class="line">        m:<span class="string">'index'</span>,</span><br><span class="line">        a:<span class="string">'tv_schedule'</span>,</span><br><span class="line">        start:  startDate,</span><br><span class="line">        end: endDate</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        url: RR_PLAY_SCHEDULE,</span><br><span class="line">        method: <span class="string">"get"</span>,</span><br><span class="line">        qs: queryStr,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: UserAgent[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        request(options, (error, response, body) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> info = JSON.parse(body);</span><br><span class="line">                <span class="keyword">return</span> resolve(info)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(error)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、使用-Pupeteer-下载-html-源码。"><a href="#5、使用-Pupeteer-下载-html-源码。" class="headerlink" title="5、使用 Pupeteer 下载 html 源码。"></a>5、使用 Pupeteer 下载 html 源码。</h4><p>Puppeteer是谷歌官方出品的一个通过DevTools协议控制headless Chrome的Node库。可以通过Puppeteer的提供的api直接控制Chrome模拟大部分用户操作来进行UI Test或者作为爬虫访问页面来收集数据。</p>
<p>Puppeteer的使用十分简单，通过操作Browser实例来操作浏览器作出相应的反应。</p>
<p>此处使用Puppeteer下载 html页面的关键代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">puppeteerDownloadHTML () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(async (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> browser = await puppeteer.launch(&#123;</span><br><span class="line">          headless: <span class="keyword">true</span>,</span><br><span class="line">          ignoreHTTPSErrors: <span class="keyword">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> page = await browser.newPage()</span><br><span class="line">        await page.setCookie(this.cookie)</span><br><span class="line">      await page.<span class="keyword">goto</span>(this.url)</span><br><span class="line">      <span class="keyword">const</span> bodyHandle = await page.$(<span class="string">'body'</span>)</span><br><span class="line">      <span class="keyword">const</span> bodyHTML = await page.evaluate(body =&gt; body.innerHTML, bodyHandle)</span><br><span class="line">      <span class="keyword">return</span> resolve(bodyHTML)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">      <span class="keyword">return</span> reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、使用-cheerio-从-html-文本中解析数据。"><a href="#6、使用-cheerio-从-html-文本中解析数据。" class="headerlink" title="6、使用 cheerio 从 html 文本中解析数据。"></a>6、使用 cheerio 从 html 文本中解析数据。</h4><p>cheerio是一个node的库，可以理解为一个Node.js版本的jquery，用来从网页中以 css selector取数据，使用方式和jquery基本相同。事实上，Cheerio 从jQuery库中去除了所有 DOM不一致性和浏览器尴尬的部分，性能更优。</p>
<p>前面我们已经使用 Pupeteer 下载了 html 源码， 我们将提取我们需要的数据列表，然后持久化到 mongodb 中。</p>
<p>关键代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">torrentz2HubExtract() &#123;</span><br><span class="line">      let nodeList = this.$(<span class="string">'#wrap'</span>).find(<span class="string">'.results'</span>).find(<span class="string">'dl'</span>)</span><br><span class="line">      nodeList.each((i, e) =&gt; &#123;</span><br><span class="line">          let a = this.$(e).find(<span class="string">'a'</span>);</span><br><span class="line">          <span class="keyword">const</span> hash = a.attr(<span class="string">'href'</span>)?a.attr(<span class="string">'href'</span>).replace(<span class="string">'/'</span>, <span class="string">''</span>):a.attr(<span class="string">'href'</span>);</span><br><span class="line">          <span class="keyword">const</span> seeds = this.$(e).find(<span class="string">'dd'</span>).find(<span class="string">'span'</span>).eq(<span class="number">3</span>).text()</span><br><span class="line">          this.extractData.push(</span><br><span class="line">              this.extractDataFactory(</span><br><span class="line">                  <span class="string">'http://itorrents.org/torrent/'</span> + hash.toUpperCase() + <span class="string">'.torrent'</span>,</span><br><span class="line">                  a.text(),</span><br><span class="line">                  seeds,</span><br><span class="line">                  hash,</span><br><span class="line"></span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> this.extractData</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h5 id="当然每个网站的页面结构不一致，-对不同的站点，我们需要不同解析模式，但使用-cheerio-让这项工作变的超级简单。"><a href="#当然每个网站的页面结构不一致，-对不同的站点，我们需要不同解析模式，但使用-cheerio-让这项工作变的超级简单。" class="headerlink" title="当然每个网站的页面结构不一致， 对不同的站点，我们需要不同解析模式，但使用 cheerio 让这项工作变的超级简单。"></a>当然每个网站的页面结构不一致， 对不同的站点，我们需要不同解析模式，但使用 cheerio 让这项工作变的超级简单。</h5><h4 id="7、使用-TransmissionRPC-进行-torrent-上传及资源下载。"><a href="#7、使用-TransmissionRPC-进行-torrent-上传及资源下载。" class="headerlink" title="7、使用 TransmissionRPC 进行 torrent 上传及资源下载。"></a>7、使用 TransmissionRPC 进行 torrent 上传及资源下载。</h4><p>这里我们采用 <a href="https://github.com/grantholle/transmission" target="_blank" rel="noopener">transmission-promise</a> 进行 transmission 接口调用。根据其文档，我们很容易实现一个自己的 rpc 类库。</p>
<p>这里就不贴代码了， 与文档的例子差不多。</p>
<h4 id="8、cron定时作业"><a href="#8、cron定时作业" class="headerlink" title="8、cron定时作业"></a>8、cron定时作业</h4><p>爬虫的意义之一就是能定时自动化爬取目标数据。</p>
<p>关键代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/!**</span><br><span class="line"> *  <span class="comment"># ┌────────────── second (optional)</span></span><br><span class="line"> *  <span class="comment"># │ ┌──────────── minute</span></span><br><span class="line"> *  <span class="comment"># │ │ ┌────────── hour</span></span><br><span class="line"> *  <span class="comment"># │ │ │ ┌──────── day of month</span></span><br><span class="line"> *  <span class="comment"># │ │ │ │ ┌────── month</span></span><br><span class="line"> *  <span class="comment"># │ │ │ │ │ ┌──── day of week</span></span><br><span class="line"> *  <span class="comment"># │ │ │ │ │ │</span></span><br><span class="line"> *  <span class="comment"># │ │ │ │ │ │</span></span><br><span class="line"> *  <span class="comment"># * * * * * *</span></span><br><span class="line"> *!/</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">job</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    let cronJob = <span class="keyword">new</span> cron.CronJob(&#123;</span><br><span class="line">        cronTime: cronConfig.cronTime,</span><br><span class="line">        onTick: () =&gt; &#123;</span><br><span class="line">            spider()</span><br><span class="line">        &#125;,</span><br><span class="line">        start: <span class="keyword">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    cronJob.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">job()</span><br></pre></td></tr></table></figure>
<p>每天定时跑一遍上述的流程即可。</p>
<h2 id="二、后记"><a href="#二、后记" class="headerlink" title="二、后记"></a>二、后记</h2><p>目前 TVDragon 还在开发中， 平时时间不是很充裕， 现在基本完成上述模块。</p>
<p>1、需要订阅所追的所有美剧名称，根据订阅的美剧和播放表去搜索 Torrent， 节省耗损。<br>2、搜索的 Torrent 列表可能有多个， 视频的质量参差不齐， 需要一个从优筛选 torrent 的算法。<br>3、 使用日志代替各个 console，针对下仔的信息使用微信公众号模板消息推送， 方便实时跟踪程序运行情况。</p>
<p>4、todo</p>
]]></content>
      
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发一个美剧自动嗅探下载器:TVDragon(上)]]></title>
      <url>https://qimajiang.com/2017/12/16/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%BE%8E%E5%89%A7%E8%87%AA%E5%8A%A8%E5%97%85%E6%8E%A2%E4%B8%8B%E8%BD%BD%E5%99%A8-%E4%B8%8A-/</url>
      <content type="html"><![CDATA[<ul>
<li>从今天开始我们来写一个美剧自动嗅探下载器， 名为 TVDragon， 为我们提供美剧‘一条龙服务’。 其工作原理是根据已订阅的美剧名称（英文名），自动搜索当天的美剧播放表， 从种子网站搜索 torrent 列表， 筛选，自动下载该种子，接着上传torrent到树莓派的 transmission 上进行bt下载。<a id="more"></a>
</li>
</ul>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>本人是个美剧爱好者，平时几乎每天都有一部美剧更新，而我每天我要做的事情是上 &lt;zimuzu.tv&gt; 去查看当天的美剧播放表， 然后到&lt;torrentz2.eu&gt;搜索所追美剧的种子， 然后根据清晰度筛选，下载，上传后 transmission 进行资源下载。整个过程虽耗时不长， 但有时当天的美剧有好几部， 而且不一定资源已上传， 这就需要重复上述的步骤了。有时之后就会忘记了， 因此造成晚上下班后才去下载，不能好好的享用“美剧大餐”了。这就是 TVDragon 诞生的背景了。</p>
<h2 id="二、必备条件-材料"><a href="#二、必备条件-材料" class="headerlink" title="二、必备条件(材料)"></a>二、必备条件(材料)</h2><h4 id="若要TVDragon-成功运行，-需要满足以下条件"><a href="#若要TVDragon-成功运行，-需要满足以下条件" class="headerlink" title="若要TVDragon 成功运行， 需要满足以下条件"></a>若要TVDragon 成功运行， 需要满足以下条件</h4><ul>
<li>7x24小时运行的Linux服务器（树莓派）</li>
<li>宽带网络</li>
<li>transmission 软件</li>
<li>PHP7.0+</li>
</ul>
<h2 id="三、APi-分析"><a href="#三、APi-分析" class="headerlink" title="三、APi 分析"></a>三、APi 分析</h2><p>既然我们需要爬取美剧播放表和搜索美剧种子等， 就需要用到<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a>这个抓包神器。关于 Charles 的用法可自行搜索，这里不作描述。</p>
<h4 id="1、许多网站都有美剧的播放表，我选择-lt-zimuzu-tv-gt-上的，而且这里我选用了字幕组IOS非-App-Store-版-app作为抓包目标。"><a href="#1、许多网站都有美剧的播放表，我选择-lt-zimuzu-tv-gt-上的，而且这里我选用了字幕组IOS非-App-Store-版-app作为抓包目标。" class="headerlink" title="1、许多网站都有美剧的播放表，我选择 &lt;zimuzu.tv&gt;上的，而且这里我选用了字幕组IOS非 App Store 版 app作为抓包目标。"></a>1、许多网站都有美剧的播放表，我选择 &lt;zimuzu.tv&gt;上的，而且这里我选用了<a href="http://m.yuyue111.com/app/1223493862?s=rrys" target="_blank" rel="noopener">字幕组IOS非 App Store 版</a> app作为抓包目标。</h4><p>经分析， App 上面的播放表 api 是<a href="https://api1.ousns.net/index.php" target="_blank" rel="noopener">https://api1.ousns.net/index.php</a> ,其需要的参数是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"accesskey"</span>: <span class="string">"519f9cab85c8059d17544947k36113fd3g"</span>,</span><br><span class="line">  <span class="string">"client"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"g"</span>: <span class="string">"api/v2"</span>,</span><br><span class="line">  <span class="string">"m"</span>: <span class="string">"index"</span>,</span><br><span class="line">  <span class="string">"a"</span>: <span class="string">"tv_schedule"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"2017-12-10"</span>,</span><br><span class="line">  <span class="string">"end"</span>: <span class="string">"2017-12-11"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>我们这里只需要改变 start 和 end 的值即可获取不同日期的当天美剧播放列表， 但不包含 end 日期的数据</code></p>
<h5 id="响应内容是"><a href="#响应内容是" class="headerlink" title="响应内容是"></a>响应内容是</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"data"</span>: &#123;</span><br><span class="line">        <span class="string">"2017-12-24"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"35673"</span>,</span><br><span class="line">                <span class="string">"cnname"</span>: <span class="string">"谷中十日"</span>,</span><br><span class="line">                <span class="string">"enname"</span>: <span class="string">"Ten Days In the Valley"</span>,</span><br><span class="line">                <span class="string">"poster"</span>: <span class="string">"http://tu.zmzjstu.com/ftp/2017/1001/88292ec7121c82fd6f432f3509411913.jpg"</span>,</span><br><span class="line">                <span class="string">"season"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="string">"episode"</span>: <span class="string">"7"</span>,</span><br><span class="line">                <span class="string">"play_time"</span>: <span class="string">"2017-12-24"</span>,</span><br><span class="line">                <span class="string">"poster_b"</span>: <span class="string">"http://tu.zmzjstu.com/ftp/2017/1001/b_88292ec7121c82fd6f432f3509411913.jpg"</span>,</span><br><span class="line">                <span class="string">"poster_m"</span>: <span class="string">"http://tu.zmzjstu.com/ftp/2017/1001/m_88292ec7121c82fd6f432f3509411913.jpg"</span>,</span><br><span class="line">                <span class="string">"poster_s"</span>: <span class="string">"http://tu.zmzjstu.com/ftp/2017/1001/s_88292ec7121c82fd6f432f3509411913.jpg"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>status=1 表示请求成功。data 字段里的数据就是我们真正需要的，里面包含了每部美剧的中文名、英文名和剧集数量等等</code></p>
<h4 id="2、根据美剧英文名搜索-torrent-种子列表。"><a href="#2、根据美剧英文名搜索-torrent-种子列表。" class="headerlink" title="2、根据美剧英文名搜索 torrent 种子列表。"></a>2、根据美剧英文名搜索 torrent 种子列表。</h4><p>这里选择<a href="https://torrentz2.eu/search" target="_blank" rel="noopener">https://torrentz2.eu/search</a>作为搜索的工具。请求参数很简单：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"f"</span>: <span class="string">"the+flash+2014+s04e09"</span>,</span><br><span class="line">  <span class="string">"save"</span>: <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>f 表示搜索的关键字，关键字中的空格转变为+或 urlEcode ；例如：the flash 2014 s04e09 搜索时变为：the%2Bflash%2B2014%2Bs04e09；<br>save 表示是否开启安全搜索，默认开启。<br><code></code></p>
<h5 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h5><p><img src="http://ww4.sinaimg.cn/large/a15b4afegy1fmjw8ki15ij20ya0ba782" alt="d.png"></p>
<p>更多的搜索结果可查看<br><a href="https://torrentz2.eu/search?f=the%2Bflash%2B2014%2Bs04e09" target="_blank" rel="noopener">https://torrentz2.eu/search?f=the%2Bflash%2B2014%2Bs04e09</a></p>
<h4 id="3、查看可用的-torrent-列表"><a href="#3、查看可用的-torrent-列表" class="headerlink" title="3、查看可用的 torrent 列表"></a>3、查看可用的 torrent 列表</h4><p>经过上面的搜索后， 我们可以选择清晰度较高的一个资源查看其可用的 torrent 下载列表。<br>选择这个资源&lt;The.Flash.2014.S04E09.720p.HDTV.x264-SVA[rarbg]&gt;，之后可以看到如下的 torrent 列表：</p>
<p><img src="http://ww4.sinaimg.cn/large/a15b4afegy1fmjwdvfcswj20yv0j50zn" alt="torrent 列表"></p>
<p>这里的 torrent 列表可能每一次都不一致的， 因此需要找一个资源列表最多的站点， 对每个站点都分析其下载 torrent 的按钮元素和事件， 方可自动下载 torrent 文件。</p>
<p><code></code><br>这里建议若有 rarbg 站点， 首选这个。大多数情况 rarbg 都会比较快更新资源。</p>
<p><code>更快捷的方法是：根据搜索列表中的 title 中 hash 值解析出 torrent 的真实地址。 规则：</code><br><a href="http://itorrents.org/torrent/hash" target="_blank" rel="noopener">http://itorrents.org/torrent/hash</a> 值.torrent<br><code></code></p>
<h3 id="四、Transmission-远程调用接口"><a href="#四、Transmission-远程调用接口" class="headerlink" title="四、Transmission 远程调用接口"></a>四、Transmission 远程调用接口</h3><h5 id="关于树莓派是什么？如何购买树莓派？如何在树莓派安装-transmission等等问题，可自行摸索。这里假设一切条件就绪。"><a href="#关于树莓派是什么？如何购买树莓派？如何在树莓派安装-transmission等等问题，可自行摸索。这里假设一切条件就绪。" class="headerlink" title="关于树莓派是什么？如何购买树莓派？如何在树莓派安装 transmission等等问题，可自行摸索。这里假设一切条件就绪。"></a>关于树莓派是什么？如何购买树莓派？如何在树莓派安装 transmission等等问题，可自行摸索。这里假设一切条件就绪。</h5><p> 通过上面的步骤我们已经能够实现自动下载 torrent 文件了。既然这样我们需要把 torrent 文件上传到 Transmission 上进资源下载。&lt;transmission.com&gt;上的文档有说明RPC 的方法， 还推荐了几个比较好的类库。</p>
<p>这里我们使用 PHP 实现的transmission RPC类库, <a href="https://github.com/vohof/transmission" target="_blank" rel="noopener">https://github.com/vohof/transmission</a>. </p>
<h3 id="五、结束"><a href="#五、结束" class="headerlink" title="五、结束"></a>五、结束</h3><p>到这里为止， 我们基本分析了TVDragon 的工作流程和梳理如何实现这些需求，关键之处就是如何分析所需要的目标程序， 拆分各个功能需求， 搜索是否已有类似的类库， 这样可减少我们的前期工作量。调研工作已基本结束， 后面的事情就是如何搭建一个开发框架了。这将在下一盘文章中阐述。</p>
]]></content>
      
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Goutte爬取 IP 代理池]]></title>
      <url>https://qimajiang.com/2017/11/18/%E4%BD%BF%E7%94%A8%20Goutte%E7%88%AC%E5%8F%96%E4%BB%A3%E7%90%86%20IP%20%E6%B1%A0/</url>
      <content type="html"><![CDATA[<ul>
<li>最近几乎所有精力都投入到 React 的开发中，可以说对 JS 的理解更深入了， 使用起来也得心应手了。但对于 PHP, 我还是想找点东西捣鼓下的。这次我们就用 PHP 的爬虫框架 Goutte 来爬取多个 代理IP，实现一个简单的自动投票系统， 该系统可以切换 IP，从而避免被封禁。当然，这里只是抛砖引玉， Goutte 的强大之处远不在于此。<a id="more"></a>
</li>
</ul>
<h2 id="一、关于-Goutte"><a href="#一、关于-Goutte" class="headerlink" title="一、关于 Goutte"></a>一、关于 Goutte</h2><p>Goutte 是一个 PHP 爬虫框架，提供了优雅的 API 进行链接抓取，和解析 HTML 文档。Goutte 主要使用以下 PHP 类库：</p>
<ul>
<li>页面解析：Symfony 的 BrowserKit ， CssSelector 和 DomCrawler；</li>
<li>HTTP 请求： Guzzle</li>
</ul>
<p>相信各位 PHPer 对Guzzle这个库很熟悉吧，这里不展开讨论了。简单来说， 利用 Goutte 可以快速的爬取和解析 Html、xml 的文档， 得到我们的目标数据。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p> 既然 Goutte 是解析 HTML 结构的， 那解析规则必须已经设置好，分析目标网站的 DOM 结构是我们的首要工作。</p>
<p>这里我使用的是<a href="https://proxy.coderbusy.com/" target="_blank" rel="noopener">https://proxy.coderbusy.com/</a>, 打开该网站， 通过页面我们可以知道， 我们的目标数据（IP 池）是显示在 Table 中， 但究竟这是个怎样的 Table 呢？我们打开网站的开发者工具， 分析其 HTMl 代码：<br>1、  <table class="table proxy-server-table">, 这个就是我们的目标表格， 其还定义了类名， 这样我们可以快速定位到此元素了。<br>2、  table 的头部有很多列， 这里是每个 IP 的其他属性， 因为我们的目的不是 IP 的属性， 只需要一个代理 IP和端口， 因此我们关心的是 table 的第一列的 IP 地址和第二列的端口。我们直接查看 table 的主体部分<tbody>的第一个<code>&lt;td&gt;</code>和第二个<code>&lt;td&gt;</code>。</tbody></table></p>
<p>通过查看源码我们可以知道， 我们的 goute 需要解析的是该页面的<code>class=&#39;table proxy-server-table&#39;</code>的 table 中 tbody 中的第一列和第二列。</p>
<h2 id="正式爬取"><a href="#正式爬取" class="headerlink" title="正式爬取"></a>正式爬取</h2><p>1、 我们使用 composer 安装 Goutte，然后引入。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> dirname(dirname(<span class="keyword">__FILE__</span>)).<span class="string">'./vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Goutte</span>\<span class="title">Client</span>;</span><br></pre></td></tr></table></figure></p>
<p>2、编写爬取函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function getProxyIPPool()&#123;</span><br><span class="line">    $client = new Client();</span><br><span class="line">    $ipPoolUrl = &apos;https://proxy.coderbusy.com/&apos;;</span><br><span class="line">    $crawler = $client-&gt;request(&apos;GET&apos;, $ipPoolUrl);</span><br><span class="line">    $ipArr = $crawler-&gt;filter(&apos;table&apos;)-&gt;filter(&apos;tr&apos;)-&gt;each(function ($tr, $i) &#123;</span><br><span class="line">        return $tr-&gt;filter(&apos;td&apos;)-&gt;each(function ($td, $i) &#123;</span><br><span class="line">            return trim($td-&gt;text());</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $newArr = [];</span><br><span class="line">    foreach ($ipArr as $key =&gt;$value)&#123;</span><br><span class="line">        if ($key &gt;0)&#123;</span><br><span class="line">            $newArr[$key-1] = $value[0].&apos;:&apos;.$value[1];//这里就是 table 的第一列和第二列</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $file = file_put_contents(&apos;ipPool.json&apos;, json_encode($newArr));</span><br><span class="line"></span><br><span class="line">    echo &quot;更新代理 IP 尺完毕&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我们直接把解析出来的数据存储到本地 json 文件中（真正应用时最好存到数据库， 以便用于其他分析用途）。<br>执行完一次后我们得到的 json 文件(仅显示部分数据):<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"13.59.33.106:3128"</span>,</span><br><span class="line">    <span class="string">"200.116.227.99:53281"</span>,</span><br><span class="line">    <span class="string">"190.232.168.242:8080"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>由于该网站每次刷新的时候表格的数据都是不一样，我们既可以存储到不同 json 文件中， 也可以覆盖同一个 json 文件。</p>
<h3 id="对，-就是这么简单，-通过设定爬取周期，就可以得到很多代理-IP-了。"><a href="#对，-就是这么简单，-通过设定爬取周期，就可以得到很多代理-IP-了。" class="headerlink" title="对， 就是这么简单， 通过设定爬取周期，就可以得到很多代理 IP 了。"></a>对， 就是这么简单， 通过设定爬取周期，就可以得到很多代理 IP 了。</h3><h2 id="自动投票系统"><a href="#自动投票系统" class="headerlink" title="自动投票系统"></a>自动投票系统</h2><p>其实这种自动刷票的功能不是很愿意做， 但为了学习还是可以练习一下的。</p>
<p>1、目标网站<a href="http://jljapi.manhuadao.cn/Vote/vote" target="_blank" rel="noopener">http://jljapi.manhuadao.cn/Vote/vote</a></p>
<p>2、编写投票函数(这里 请求比较简单，直接用 CURL)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">voteByIP</span> <span class="params">($ip, $port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    $post_data = <span class="keyword">array</span> (<span class="string">"bookid"</span> =&gt; <span class="string">"102428"</span>);</span><br><span class="line">    $ch = curl_init(<span class="string">"http://jljapi.manhuadao.cn/Vote/vote"</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch,CURLOPT_PROXY,$ip);</span><br><span class="line">    curl_setopt($ch,CURLOPT_PROXYPORT,$port);</span><br><span class="line">    curl_setopt ($ch, CURLOPT_TIMEOUT, <span class="number">1200</span>);</span><br><span class="line"></span><br><span class="line">    $result = curl_exec($ch);</span><br><span class="line">   print_r($result.PHP_EOL);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、使用不同的 IP 发起投票请求</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ipPoolArr = json_decode(file_get_contents(<span class="string">'ipPool.json'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($ipPoolArr <span class="keyword">as</span> $key=&gt;$proxyStr)&#123;</span><br><span class="line">     $ip = $proxyArr[<span class="number">0</span>];</span><br><span class="line">    $port = $proxyArr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    voteByIP($ip, $port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、自动循环投票Shell脚本</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=<span class="number">99999999999999999999999999999999999999</span>;i++)); </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     php autoVote.php</span><br><span class="line"></span><br><span class="line">     <span class="comment">//还可以执行其他的操作，例如 php getIPPool.php 来更新代理 IP 池</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>5、功能扩展</p>
<p>其实这里只是做了简单自动爬虫和投票功能， 从获取代理 IP 到投票， 本地的 IP使用完之后刷新 IP 池。因此，可以扩展的功能有：</p>
<p>1、把代理 IP 池存储到数据；<br>2、不定时发起投票请求， 防止频繁请求被封禁，虽然切换了代理 IP。<br>3、统计代理 IP 的使用情况和对应的投票成功率；<br>4、ETC</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文使用 Goutte爬虫框架实现爬取代理 IP 池，然后利用得到的 IP来 自动投票。这里只是 Goutte 的简单用法，更多用法可以查看 Goutte 官方文档。</p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Goutte </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Jenkins自动部署React前端项目]]></title>
      <url>https://qimajiang.com/2017/10/28/%E4%BD%BF%E7%94%A8Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2React%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>经过一个月的开发，公司的 React 项目基本进入测试阶段，最开始是手动打包并传送到目标服务器，效率十分低下。w闻将介绍如何用 Jenkins 实现 React 项目的自动打包和部署。<a id="more"></a>
</li>
</ul>
<h2 id="安装Java-和-Jenkins"><a href="#安装Java-和-Jenkins" class="headerlink" title="安装Java 和 Jenkins"></a>安装Java 和 Jenkins</h2><h3 id="1、略过安装-Java"><a href="#1、略过安装-Java" class="headerlink" title="1、略过安装 Java"></a>1、略过安装 Java</h3><h3 id="2、下载-Jenkins-的-war包"><a href="#2、下载-Jenkins-的-war包" class="headerlink" title="2、下载 Jenkins 的 war包"></a>2、下载 Jenkins 的 <a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">war包</a></h3><h3 id="3、根据提示安装-Jenkins"><a href="#3、根据提示安装-Jenkins" class="headerlink" title="3、根据提示安装 Jenkins"></a>3、根据提示安装 Jenkins</h3><p>war包启动方式：<code>java -jar jenkins.war –httpPort=8080</code>,端口可自定义，然后访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></p>
<h3 id="4、插件管理"><a href="#4、插件管理" class="headerlink" title="4、插件管理"></a>4、插件管理</h3><p>点开系统设置的插件管理页面，如果可选插件列表为空，点击高级标签页，替换升级站点的URL为：<a href="http://mirror.xmission.com/jenkins/updates/update-center.json" target="_blank" rel="noopener">http://mirror.xmission.com/jenkins/updates/update-center.json</a><br>并且点击提交和立即获取<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fkyahvg2tbj30i5062a9z.jpg" alt=""></p>
<h3 id="5、返回可选插件，选择如下插件安装（如果已安装，请忽略）"><a href="#5、返回可选插件，选择如下插件安装（如果已安装，请忽略）" class="headerlink" title="5、返回可选插件，选择如下插件安装（如果已安装，请忽略）"></a>5、返回可选插件，选择如下插件安装（如果已安装，请忽略）</h3><p>1).Publish Over SSH<br>2).GitLab Plugin<br>3).Email Extension Plugin</p>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><h3 id="配置Publish-Over-SSH"><a href="#配置Publish-Over-SSH" class="headerlink" title="配置Publish Over SSH"></a>配置Publish Over SSH</h3><p>在Publish over SSH处点击增加，添加SSH server，并且选择高级设置，勾选使用用户名登录，设置相应的ip,用户名和密码等。（其他选项可忽略）<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkyak4hfh8j30j70apdfv.jpg" alt=""></p>
<h3 id="配置Email-Extension-Plugin"><a href="#配置Email-Extension-Plugin" class="headerlink" title="配置Email Extension Plugin"></a>配置Email Extension Plugin</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fkyampxjwkj30iz05emx2.jpg" alt=""></p>
<h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><h3 id="1、新建项目"><a href="#1、新建项目" class="headerlink" title="1、新建项目"></a>1、新建项目</h3><p>点击新建，输入项目名称，选择‘自由风格项目’，OK<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fkyao3jzb3j30jg080q33.jpg" alt=""></p>
<h3 id="2、配置源码"><a href="#2、配置源码" class="headerlink" title="2、配置源码"></a>2、配置源码</h3><p>选择Git，并填上gitlab项目克隆地址，用户密钥以及分支<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fkyaqocvfej30j8081weg.jpg" alt=""></p>
<h3 id="3、配置构建触发器"><a href="#3、配置构建触发器" class="headerlink" title="3、配置构建触发器"></a>3、配置构建触发器</h3><p>勾选Build when a change is pushed to GitLab和Poll SCM即可，其他可忽略，默认提交代码到相应的分支触发该任务。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fkyatmvugcj30q40jlgm1.jpg" alt=""></p>
<h3 id="4、配置构建"><a href="#4、配置构建" class="headerlink" title="4、配置构建"></a>4、配置构建</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fkyauxerpij30px0883yf.jpg" alt=""></p>
<h3 id="5、配置构建后操作"><a href="#5、配置构建后操作" class="headerlink" title="5、配置构建后操作"></a>5、配置构建后操作</h3><p>增加构建后操作，选择<code>Send build artifacts over SSH</code>。即上述操作全部完成并自动生产了部署文件，该步骤将部署文件上传到之前的SSH服务器（Linux服务器），并执行你想让他执行的命名，部署多个服务器及平台，选择添加server并完成相应的配置<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkyazvs1edj30un0gngly.jpg" alt=""></p>
<h4 id="（1）、构建后配置-Email（可选）"><a href="#（1）、构建后配置-Email（可选）" class="headerlink" title="（1）、构建后配置 Email（可选）"></a>（1）、构建后配置 Email（可选）</h4><p>配置后再增加构建后操作，选择Editable Email Notification。根据提示配置需要通知的邮箱，其他可默认。然后选择高级设置，配置失败和成功邮件通知。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkybnzkymuj30j307z747.jpg" alt=""></p>
<h4 id="（2）、构建后执行-Shell命令（可选）"><a href="#（2）、构建后执行-Shell命令（可选）" class="headerlink" title="（2）、构建后执行 Shell命令（可选）"></a>（2）、构建后执行 Shell命令（可选）</h4><p>增加构建后操作 ，选择Post build task。根据 匹配 Log 的文本消息执行不同的 shell 命令，<br>Log 文本的匹配需要根据实际情况修改，可使用简单正则表达式。这里执行的命令可以是一个 shell脚本，把自己需要执行的任务写到脚本中。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fkyb5ue9uuj30ux0kz0sx.jpg" alt=""></p>
<h2 id="绑定-Gitlabs-Web-hooks"><a href="#绑定-Gitlabs-Web-hooks" class="headerlink" title="绑定 Gitlabs Web hooks"></a>绑定 Gitlabs Web hooks</h2><p>添加web hook. <code>http://jenkins-server/gitlab/notify_commit</code> 需要填上的固定格式的URL地址，把jenkins-server替换成对应的Jenkins访问地址，注意：如果是localhost，需要换成ip地址。<br>添加完之后，点击Test Hook。此时Jenkins界面构建队列出现某个任务正在执行，表示配置成功。<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkyb8013acj30im0820sw.jpg" alt=""></p>
<h2 id="提交代码验证-Jenkins-功能。"><a href="#提交代码验证-Jenkins-功能。" class="headerlink" title="提交代码验证 Jenkins 功能。"></a>提交代码验证 Jenkins 功能。</h2><p>我这里使用的构建后任务是发送公司内部 IM 消息，构建后我收到了这样的消息。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fkybbvlhqgj309b0153yc.jpg" alt=""></p>
<h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><p>由于构建后的 React 文件都是静态文件，我们需要一个 Web 服务器来托管我们的项目。这里使用 nginx,并配置反向代理。<br>这里略过如何安装 nginx，可参考<a href="http://qimajiang.com/2017/02/25/PHP%E5%B7%A5%E5%8C%A0%E5%8E%86%E9%99%A9%E8%AE%B0-%E5%BC%80%E5%90%AF%E7%AF%87-%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/">安装 PHP 开发环境的 nginx 安装部分</a><br>讲一下 nginx 配置的注意点。<br>1、反向代理:反向代理转发时过滤掉 /api路径。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line"> 	rewrite /api(.*) $<span class="number">1</span> <span class="keyword">break</span>;</span><br><span class="line">proxy_pass         http:<span class="comment">//localhost:8080;</span></span><br><span class="line">	proxy_redirect     off;</span><br><span class="line">   proxy_set_header   Host $host;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>2、react-router 失效。<br>可能会有朋友注意到，当刷新页面时，nginx 会返回404响应。这是因为nginx 查找的路由是浏览器上的地址，但我们的项目不存在这样的路由，所以会出错。我们需要把所有的请求都重定向到 index.html 文件。在 location / {}里增加：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try_files $uri /index.html;</span><br></pre></td></tr></table></figure></p>
<h2 id="完毕"><a href="#完毕" class="headerlink" title="完毕"></a>完毕</h2>]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React开发笔记]]></title>
      <url>https://qimajiang.com/2017/10/21/React%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>由于公司产品需要，最近一个月开始了 web 前端开发，技术栈是 webpack+react+mobx 的 react 全家桶架构。<a id="more"></a>
</li>
</ul>
<h2 id="什么是-react"><a href="#什么是-react" class="headerlink" title="什么是 react"></a>什么是 react</h2><p>文章的开始还是有必要介绍一下 react 的概念。react.js 是 FaceBook 研发的前端 JS 框架，主要 特色是使用虚拟 DOM，性能卓越。其本质还是使用 javascript 作为开发语言。但需要注意的是现在一般使用 ES6的新特性作为主流开发。这里不详细阐述各个概念了，可以自行查看相关资料。</p>
<h2 id="应用框架结构设计"><a href="#应用框架结构设计" class="headerlink" title="应用框架结构设计"></a>应用框架结构设计</h2><p>这次的 react 开发应该算是我真正第一次独自负责，距离上一次的 react学习以及过去几个月的时间，当时react的版本 已经到了v15.6(现在 v16已经发布)，每个大版本的特性还是不大一样。尤其是 react-router4和 router3的区别很大，所以重新阅读最新的 react 开发文档是最稳妥的。由于这次的应用是对之前用传统 jquery 开发的<br>系统进行重构，所以在应用目录结构上是未知数。所有东西都是我自己去把握和决定。在开始的时候，使用了 koa2作为开发服务器，当时是基于这样的考虑：上线后可以继续使用 koa 作为 http 服务器，就不用配置 nginx 或者其他服务器，但几天后发现，很多东西还是跟传统的 mvc 框架的开发模式差不多，要定义很多的路由，使得整个开发效率大大降低。这种情况下，我决定推翻现有的架构，从零搭建一个 react 初始化模板。该模板的地址<a href="https://github.com/moxun33/react-mobx-antd-boilerplate" target="_blank" rel="noopener">https://github.com/moxun33/react-mobx-antd-boilerplate</a>。该模板使用的技术栈是 webpack+react+mobx+router4,前端 UI 是 ant-design。</p>
<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>我们都知道，在之前的jquery 开发的方式中，代码的组织和方式基本按照一个页面进行归类，不管这个页面需要多少的 js 代码都需要写在同一个文件，虽然有人会说我可以拆分一些出来啊，然而最后还是要引入到同个文件，而且文件之间的关系不够清晰，带来的问题就是维护难，代码可读性差。正是基于这个考虑，我们公司才决定使用 react 进行组件化开发。所谓的组件化管理，就是利用 ES6或之后的版本的 js 特性配合 react 的设计思想，对一个页面划分不同的组件，最后把这些组件导入到一个文件中，而且在组件化开发的过程中可以抽取一些比较通用的组件归并到组件的模块中，久而久之，就形成了我们自己系统的组件库了，对于主题定制和网站风格的定义还是比较有用 的。至于划分组件的标准是什么就不好定义了，打到一个页面，小到一个按钮都可以作为一个组件，在开发的过程中，会很自然的看出应该如何划分页面组件，但要记住的一点的，所有组件都是继承与 react 顶级 Component 类中。</p>
<h2 id="高阶组件和-html-模板"><a href="#高阶组件和-html-模板" class="headerlink" title="高阶组件和 html 模板"></a>高阶组件和 html 模板</h2><p>当使用 react 进行组件化开发时，在不经意中会发现很多代码都是重复的（这里主要讲 react 组件的代码复用，忽略逻辑部分），那应该怎么提高组件代码复用率呢？</p>
<h3 id="1、高级组件"><a href="#1、高级组件" class="headerlink" title="1、高级组件"></a>1、高级组件</h3><ul>
<li>一个高阶组件只是一个包装了另外一个 React 组件的 React 组件。<br>这种形式通常实现为一个函数，本质上是一个类工厂（class factory），它下方的函数标签伪代码启发自 Haskell</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hocFactory:: W: React.Component =&gt; E: React.Component</span><br></pre></td></tr></table></figure>
<p>这里 W（WrappedComponent） 指被包装的 React.Component，E（Enhanced Component） 指返回的新的高阶 React 组件。</p>
<p>定义中的『包装』一词故意被定义的比较模糊，因为它可以指两件事情：</p>
<p>(1) 属性代理（Props Proxy）：高阶组件操控传递给 WrappedComponent 的 props，<br>(2) 反向继承（Inheritance Inversion）：高阶组件继承（extends）WrappedComponent。</p>
<p>高阶组件允许你做：</p>
<p>a、代码复用，逻辑抽象，抽离底层准备（bootstrap）代码<br>b、渲染劫持<br>c、State 抽象和更改<br>d、Props 更改</p>
<p>在目前的开发中，我只用了高级组件来包裹网站的权限组件，轻松管理完整元素权限和逻辑权限问题；还有就是解决在不同页面使用相同布局问题的重复工作；至于其他的用途在用到时将继续更新。</p>
<h3 id="2、html-模板"><a href="#2、html-模板" class="headerlink" title="2、html 模板"></a>2、html 模板</h3><p>在很多时候，我们并不需要一个 react 组件去实现我们的一个视图，比如：自定义的列表，这个列表在所有地方都是一样的数据结构和样式，那么我们只需要把静态的 html 代码抽离到同个地方，抽象成一个工具函数，那么在使用的时候，传入模板数据就可以得到相同的视图效果而且不用重复考虑 css 布局问题。还有一个使用这种方式比较多的地方就是表单了，一个网站中表单有很多，但表单的输入框效果都大同小异，只要把当前的 react的 input 组件获取 ant-desing 的 input 组件等再高度定制成我们自己风格的 input 组件，那么在使用的时候，只需要传入特定的函数参数就可以 render 到一样的效果，而不用重复的使用 row 和 col 的去布局。而且这样做可以更好的管理css 样式和公用规则选项。这种方式，还是类似于我们以前的做法，但以前的 js 操作的 dom 是真实的 dom，性能很低，现在只是操作虚拟 dom，保证了网站的西能和开发效率。</p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>1、使用 HOC 时，传入的 wrappedComponent 必须的 React type 例如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addBtn = (&lt;p&gt;hi!!!&lt;/p&gt;)</span><br><span class="line">  <span class="keyword">const</span> AddProjectAuthBtn = wrapAuth(()=&gt;addBtn)</span><br></pre></td></tr></table></figure>
<p>常见错误是写成：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addBtn = (&lt;p&gt;hi!!!&lt;/p&gt;)</span><br><span class="line">  <span class="keyword">const</span> AddProjectAuthBtn = wrapAuth(addBtn)</span><br></pre></td></tr></table></figure>
<p>2、Javascript 中 formData 会把 null 对象转化成”null” 字符串;判断空对象{}的方法是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mobject = &#123;&#125;</span><br><span class="line">JSON.stringify(mobject) === <span class="string">"&#123;&#125;"</span></span><br></pre></td></tr></table></figure></p>
<p>不能直接使用 mobject !== {}或 null 这种方式。</p>
<p>3、ant-design 中 Select 组件同时设置了initialValue 和 placeholder,initialValue 为空的情况下 placeholder不生效,initialValue 不设置或设为 undefined，应该能解决。</p>
<p>4、mobx 中@inject(‘modalStore’) @observer 需要放在其他注解的后面，否则无法更改状态</p>
<p>5、从 http 的 response 中读取图片并显示到 dom 上, 请求的时候 responseType=”arrayBuffer”</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getSupplierImageBuffer(&#123;id: attachId&#125;).then((res) =&gt; &#123;</span><br><span class="line">           <span class="keyword">const</span> arrayBufferView = <span class="keyword">new</span> Uint8Array(res);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Blob([arrayBufferView], &#123;type: <span class="string">"image/jpeg"</span>&#125;)</span><br><span class="line">       &#125;).then((myBlob) =&gt; &#123;</span><br><span class="line">           <span class="keyword">const</span> urlCreator = window.URL || window.webkitURL;</span><br><span class="line">           <span class="keyword">const</span> objectUrl = urlCreator.createObjectURL(myBlob);</span><br><span class="line">           screenshot.src = objectUrl;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>6、js 获取文件并处罚浏览器的下载功能, http 中 responseType=”blob” 可以使用 download.js 或者其他的 js 文件下载库 当然 可以自定义工具<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://somehost/somefile.zip'</span>).then(res =&gt; res.blob().then(blob =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> a = document.createElement(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">var</span> url = window.URL.createObjectURL(blob);</span><br><span class="line">    <span class="keyword">var</span> filename = <span class="string">'myfile.zip'</span>;</span><br><span class="line">    a.href = url;</span><br><span class="line">    a.download = filename;</span><br><span class="line">    a.click();</span><br><span class="line">    window.URL.revokeObjectURL(url);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p>
<p>7、FormData 的 append 函数中,如果如果当前 key 对应的值是 null 或者 undefined，那么填入 FormData 中 的数据会变成 “null”或”undefined” 字符串。目前的解决办法时，只 append 飞非 null 的值。</p>
<p>8、react 中每次调用 setState 方法设置新状态都会出发 render 事件， 但并不一定刷新页面，当DOM 树发生变化才会刷新 UI.</p>
<p>9、样式的书写最好用 LESS,这样既可以定义主题也可以提高代码复用率。</p>
<p>10、在编码的过程中需要不断的抽取共同代码， 封装成通用组件，这样才能提高代码质量， 还可以武装专有的‘武器库’。<br>11、前端的 pdf 预览最好使用浏览器自带的预览功能， 使用 iframe 加载 PDF 文件流:</p>
<ul>
<li>请求 responseType = ‘arraybuffer’</li>
<li>响应处理  const data = window.URL.createObjectURL(new Blob([res], {type: “application/pdf”}))</li>
<li>预览组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=&#123;this.state.contractPDFUrl&#125; width=&#123;&apos;200px&apos;&#125; height=&#123;&apos;100px&apos;&#125;  &gt;</span><br><span class="line">      &lt;embed src=&#123;this.state.contractPDFUrl&#125;  width=&#123;&apos;200px&apos;&#125; height=&#123;&apos;100px&apos;&#125; /&gt;</span><br><span class="line"> &lt;/object&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<p> <code>&lt;iframe src={this.state.contractPDFUrl}  width={&#39;400px&#39;} height={&#39;500px&#39;} /&gt;</code></p>
<p><code>embed 在 windows 下兼容性价差: 在firefox上 无法渲染；iframe 兼容性较好，推荐。</code></p>
<p> 12、避免使用 window.history 或者 window.location; 推荐使用 react-router 。 因为当加入了 mobx 状态管理器后， 使用 window.location刷新页面, 体验较差。</p>
<p> 13、 在 使用 mobx 下，当根据mobx 中的@observable isLogined 来判定授权与否， 当登录请求成功后，设置isLoginde<br> d 后，立刻跳转的话， 会出现404的情况， 因为未登录下， 没有设置 router， 解决方法：延时300ms 左右再跳转，可临时解决该问题。推荐解决方法是：把登录页写入相同的路由配置中。</p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*、*</span><br><span class="line">*</span><br><span class="line">* 验证手机号码</span><br><span class="line">* */</span><br><span class="line">export const isMobilePoneValid = (str) =&gt; &#123;</span><br><span class="line">    const myreg = /^1[0-9]&#123;10&#125;$/;</span><br><span class="line">    return myreg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 验证身份证号码</span><br><span class="line"> *</span><br><span class="line"> * */</span><br><span class="line">export const isIDNumberValid = (str) =&gt; &#123;</span><br><span class="line">    const myreg = /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/;</span><br><span class="line">    return myreg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 函数去抖,针对winodw.onresize等事件</span><br><span class="line"> * @param &#123;Function&#125; method 需要去抖的方法</span><br><span class="line"> */</span><br><span class="line">export const debounce = method =&gt; &#123;</span><br><span class="line">	if (method.timeout) &#123;</span><br><span class="line">		clearTimeout(method.timeout);</span><br><span class="line">	&#125;</span><br><span class="line">	method.timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">		method();</span><br><span class="line">	&#125;, 500);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 求两个数组的交集,非对象数组</span><br><span class="line"> * ES7  let intersection = allData.filter(v =&gt; editData.includes(v));</span><br><span class="line"> * */</span><br><span class="line">export const findArrayIntersection = (arr1, arr2) =&gt; &#123;</span><br><span class="line">	if (</span><br><span class="line">		Object.prototype.toString.call(arr1) === &apos;[object Array]&apos; &amp;&amp;</span><br><span class="line">		Object.prototype.toString.call(arr2) === &apos;[object Array]&apos;</span><br><span class="line">	) &#123;</span><br><span class="line">		return arr1.filter(function (v) &#123;</span><br><span class="line">			return arr2.indexOf(v) !== -1;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对象数组的交集,  数据结构必须相同</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">export const findArrayIntersectionOfObject = (list1, list2, key,isUnion = true) =&gt; &#123;</span><br><span class="line">	if (list2 !== undefined &amp;&amp; list2 !== undefined) &#123;</span><br><span class="line">		return list1.filter(a =&gt; isUnion === list2.some(b =&gt; a[key] === b[key]));</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		return [];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 识别是否为微信浏览器</span><br><span class="line"> */</span><br><span class="line">export const isWeixinBrowser = () =&gt;</span><br><span class="line">	/micromessenger/.test(navigator.userAgent.toLowerCase());</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">* 根据 key在  object中 获取指定子 object</span><br><span class="line">*  </span><br><span class="line">* key：所查询的 key</span><br><span class="line">* value：查询 key 对应的 value</span><br><span class="line">* */</span><br><span class="line">export const findSubObjectInObject = (data, key, value) =&gt; &#123;</span><br><span class="line">	let target = &#123;&#125;;</span><br><span class="line">	for (let item in data) &#123;</span><br><span class="line">		const object = data[item];</span><br><span class="line"></span><br><span class="line">		if (</span><br><span class="line">			String(object[key]).includes(value) ||</span><br><span class="line">			String(value).includes(object[key])</span><br><span class="line">		) &#123;</span><br><span class="line">			target = object;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (!isObjectValid(target)) &#123;</span><br><span class="line">		openNotification(&apos;error&apos;, `无法获取$&#123;key&#125;与$&#123;value&#125;的映射`);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在新窗口打开给定的 html 元素（string）</span><br><span class="line"> * */</span><br><span class="line">export const openWinWithHtml = (myHtmlStr,spec = &apos;width=940,resizable=no,height=1200,location=no&apos;) =&gt; &#123;</span><br><span class="line">	const wnd = window.open(&apos;about:blank&apos;, &apos;_blank&apos;, spec);</span><br><span class="line">	wnd.document.write(convertStringToHtml(myHtmlStr));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自动调整图片宽高</span><br><span class="line"> * */</span><br><span class="line">export const autoSizeImg = (Img, maxWidth, maxHeight) =&gt; &#123;</span><br><span class="line">	const image = new Image();</span><br><span class="line">	//原图片原始地址（用于获取原图片的真实宽高，当&lt;img&gt;标签指定了宽、高时不受影响）</span><br><span class="line">	image.src = Img.src;</span><br><span class="line">	// 当图片比图片框小时不做任何改变</span><br><span class="line">	if (image.width &lt; maxWidth &amp;&amp; image.height &lt; maxHeight) &#123;</span><br><span class="line">		Img.width = image.width;</span><br><span class="line">		Img.height = image.height;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		//原图片宽高比例 大于 图片框宽高比例,则以框的宽为标准缩放，反之以框的高为标准缩放</span><br><span class="line">		if (maxWidth / maxHeight &lt;= image.width / image.height) &#123;</span><br><span class="line">			//原图片宽高比例 大于 图片框宽高比例</span><br><span class="line">			Img.width = maxWidth; //以框的宽度为标准</span><br><span class="line">			Img.height = maxWidth * (image.height / image.width);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			//原图片宽高比例 小于 图片框宽高比例</span><br><span class="line">			Img.width = maxHeight * (image.width / image.height);</span><br><span class="line">			Img.height = maxHeight; //以框的高度为标准</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return Img;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="后续会继续更新"><a href="#后续会继续更新" class="headerlink" title="后续会继续更新"></a>后续会继续更新</h2>]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 下使用Vagrant 构建跨平台开发环境]]></title>
      <url>https://qimajiang.com/2017/09/03/mac%E4%B8%8B%E4%BD%BF%E7%94%A8Vagrant-%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="vagrant.com">Vagrant</a> 是一款用来构建虚拟开发环境的工具，非常适合 php/python/ruby/java 这类语言开发 web 应用，“代码在我机子上运行没有问题”这种说辞将成为历史。本文通过安装php开发环境<a href="https://d.laravel-china.org/docs/5.5/homestead#configuring-homestead" target="_blank" rel="noopener">homestead</a>来说明 Vagrant 的安装使用与优点。</p>
<a id="more"></a>
</li>
<li><p>我们可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac/Windows/Linux）上开发,这样不仅保证代码运行环境一致，还可以节省部署开发环境带来的不必要时间开销，让团队新成员快速投入开发工作中。</p>
</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1、安装VirtualBox"><a href="#1、安装VirtualBox" class="headerlink" title="1、安装VirtualBox"></a>1、安装VirtualBox</h3><p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a>;虽然 Vagrant 也支持 VMware，但是VMware 对应的 Vagrant 版本也是收费的。</p>
<h3 id="2、安装-Vagrant"><a href="#2、安装-Vagrant" class="headerlink" title="2、安装 Vagrant"></a>2、安装 Vagrant</h3><p>Vagrant 的下载地址<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a>;下载好后，打开 Vagrant镜像一步一步的安装。使用</p>
<pre>
$ vagrant -v
</pre>

<p>查看是否安装成功。</p>
<h3 id="3、添加box镜像"><a href="#3、添加box镜像" class="headerlink" title="3、添加box镜像"></a>3、添加box镜像</h3><p>Vagrant 安装成功后，运行</p>
<pre>
vagrant box add laravel/homestead

</pre>

<p>命令将 laravel/homestead 盒子添加到 Vagrant 中安装。下载盒子需要几分钟的时间，具体取决于你的互联网连接速度。</p>
<p>但一般国内网络环境下都会失败。那么我们需要离线安装 box 。下载<a href="https://vagrantcloud.com/laravel/boxes/homestead/versions/3.0.0/providers/virtualbox.box" target="_blank" rel="noopener">homestead 离线安装包</a>;下载完成后，运行</p>
<pre>
vagrant box add laravel/homestead ~/Download/virtualbox.box
</pre>

<p>此处路径只是为了演示。</p>
<p>因为是手动导入包，还需要多更改几个步骤。</p>
<p>编辑Homestead/scripts/homestead.rb文件</p>
<p>修改</p>
<pre>
config.vm.box_version = settings["version"] ||= ">= 1.0.0"

改成

config.vm.box_version = settings["version"] ||= ">= 0
</pre>
这样就安装离线安装好 homestead box 了。可以使用

<pre>
vagrant up
</pre>
来启动 box 了。
### 4、克隆和配置homestead文件
在目标目录，运行

<pre>
git clone https://github.com/laravel/homestead.git Homestead
</pre>

<p>由于 Homestead 的 master 分支并不是稳定分支，你应该用打过标签的稳定版本。你可以在 Github 发行页面 上找到最新的稳定版本。</p>
<pre>
cd Homestead

// Clone the desired release...
git checkout v6.1.0

</pre>

<p>克隆 Homestead 代码库后，从 Homestead 目录中运行<code>bash init.sh</code> 命令来创建 Homesstead.yaml 配置文件。 Homesstead.yaml 文件会被放置在你的 Homestead 目录中：<br>运行命令来初始化配置</p>
<pre>
bash init.sh

</pre>

<p>其他详细的配置参考官方文档，这里不再赘述。</p>
<h3 id="5、初始化开发环境"><a href="#5、初始化开发环境" class="headerlink" title="5、初始化开发环境"></a>5、初始化开发环境</h3><p>切换到目标目录，使用 <code>vagrant init laravel/homestead</code>初始化该目录的环境。然后启动环境<code>vagrant up</code>。<br>看到终端显示了启动过程，启动完成后，我们就可以用 SSH 登录虚拟机了，剩下的步骤就是在虚拟机里配置你要运行的各种环境和参数了。</p>
<pre>
$ vagrant ssh  # SSH 登录
$ cd /vagrant  # 切换到开发目录，也就是宿主机上的 工作目录
</pre>

<h3 id="6、其他设置"><a href="#6、其他设置" class="headerlink" title="6、其他设置"></a>6、其他设置</h3><p>Vagrant 初始化成功后，会在初始化的目录里生成一个 Vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。</p>
<p>Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 <a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a> 这种访问方式，这种方式比较麻烦，新开和修改端口的时候都得编辑。相比较而言，host-only 模式显得方便多了。打开 Vagrantfile，将下面这行的注释去掉（移除 #）并保存：</p>
<pre>
config.vm.network :private_network, ip: "192.168.33.10"
</pre>

<p>重启虚拟机，这样我们就能用 192.168.33.10 访问这台机器了，你可以把 IP 改成其他地址，只要不产生冲突就行。</p>
<h3 id="7、设置共享文件夹"><a href="#7、设置共享文件夹" class="headerlink" title="7、设置共享文件夹"></a>7、设置共享文件夹</h3><p>打开 Vagrantfile,输入以下代码或者去掉注释<br>config.vm.synced_folder “/Users/name/nginxWeb”, “/wwwroot”<br>第一个是你本地的文件夹 第二个是挂在到虚拟机上的文件夹</p>
<p>给共享文件夹设置权限</p>
<p>默认共享文件夹属主 和属组都是 vagrant 我们如果php操作文件夹 是没权限的  要把该文件夹设置成 www用户</p>
<pre>
  config.vm.synced_folder "/Users/gwyy/wwwroot","/wwwroot", create:true, 

  :owner => "www", :group => "www", :mount_options => ["dmode=775","fmode=664"]

</pre>

<h2 id="打包分发"><a href="#打包分发" class="headerlink" title="打包分发"></a>打包分发</h2><p>虽然我们这里的用 laravel 官方的开发环境， 其他成员可以使用同样方法搭建好一致的开发环境。那么，如果我们需要根据自己的开发需求来定制 box 后该如何打包分发给其他成员呢。<br>当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：</p>
<pre>
vagrant package
</pre>

<p>打包完成后会在当前目录生成一个 package.box 的文件，将这个文件传给其他用户，其他用户只要添加这个 box 并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre>
 $ vagrant init  # 初始化
 $ vagrant up  # 启动虚拟机
 $ vagrant halt  # 关闭虚拟机
 $ vagrant reload  # 重启虚拟机
 $ vagrant ssh  # SSH 至虚拟机
 $ vagrant status  # 查看虚拟机运行状态
 $ vagrant destroy  # 销毁当前虚拟机
</pre>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx 配置文件进行修改：</p>
<pre>
# Apache 配置添加:
EnableSendfile off

# Nginx 配置添加:
sendfile off;
</pre>

<p>2、如果访问出现    no input file specified</p>
<p>输入 <code>vagrantprovision</code></p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Vagrant </tag>
            
            <tag> Homestead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web 的几种通信方式]]></title>
      <url>https://qimajiang.com/2017/08/18/web%20%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<ul>
<li><p>上一篇文章中主要讲述一个完整的HTTP请求过程，了解一个连接是如何建立的。那么，这里再来聊聊web 中常用的几种通信方式，<br>主要讲述其概念和应用场景或实现方式。概况一下，主要有四种方式，它们分别是短轮询、长轮询(comet)、长连接(SSE)、WebSocket。它们大体可以分为两类，一种是在HTTP基础上实现的，包括短轮询、comet和SSE；另一种不是在HTTP基础上实现是，即WebSocket。</p>
<a id="more"></a>
</li>
</ul>
<h3 id="Ajax-轮询"><a href="#Ajax-轮询" class="headerlink" title="Ajax 轮询"></a>Ajax 轮询</h3><h4 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h4><p>（1）、客户端向服务器端发起请求，和上面最基本的请求原理是一样<br>(2)、不同的是该请求方式是通过Ajax实现，设定一定的间隔时间对服务器发送请求(比如1 秒)，通过setInterval()方法，实现每隔一段时间向服务器发送请求的功能。<br>(3)、服务器端返回结果到客户端</p>
<h4 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h4><p>（1）、前端实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;短轮询ajax实现&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;div id=&quot;msgs&quot;&gt;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function showUnreadNews()&#123;</span><br><span class="line">            $(document).ready(function() &#123;</span><br><span class="line">//使用jquery的ajax方法</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                  type: &quot;GET&quot;,</span><br><span class="line">                  url: “shortAjax.php&quot;,   </span><br><span class="line">                  dataType: &quot;json&quot;,</span><br><span class="line">        </span><br><span class="line">                  success: function(msg) &#123;</span><br><span class="line">                      $.each(msg, function(id, title) &#123;</span><br><span class="line">                          $(&quot;#msgs&quot;).append(&quot;&lt;a&gt;&quot; + title + &quot;&lt;/a&gt;&lt;br&gt;&quot;);</span><br><span class="line">                      &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        setInterval(&apos;showUnreadNews()&apos;,2000);//2秒请求一次</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>（2）后端实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr = array(&apos;title&apos;=&gt;&apos;标题&apos;,&apos;text&apos;=&gt;&apos;内容&apos;);   //服务器端更新的数据</span><br><span class="line">echo json_encode($arr);  //返回数据</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="3、应用"><a href="#3、应用" class="headerlink" title="3、应用"></a>3、应用</h4><p>这种方式由于需要不断的建立http连接，严重浪费了服务器端和客户端的资源。最初是用来实现实时更新数据的， 但服务器的压力和用户数成正比，最终会超过服务器的承受范围，造成严重后果。<br>因此短轮询不适用于那些同时在线用户数量比较大，并且很注重性能的Web应用。</p>
<h3 id="comet"><a href="#comet" class="headerlink" title="comet"></a>comet</h3><h4 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h4><p>comet与传统的ajax区别在于，客户端会与服务器端保持一个长连接，此时该连接先挂起，不做响应。只有当客户端需要的数据更新时，服务器才会主动将数据推送给客户端。comet的实现有两种方式，一种方式是使用基于ajax的长轮询，另一种方式是基于Iframe及htmlfile的流方式。基于ajax的长轮询方式中，服务器端在接受到客户端ajax发送的请求后，不立即返回响应，而是阻塞请求直到超时或有数据更新。当服务器端在上述情况下返回响应后，客户端通过js再次发送请求建立连接，重复上述步骤。</p>
<h4 id="2、实现-1"><a href="#2、实现-1" class="headerlink" title="2、实现"></a>2、实现</h4><p>前端实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;长轮询ajax实现&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;click&quot;&gt;</span><br><span class="line">&lt;div id=&quot;msg&quot;&gt;数据情况&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">        $(&quot;#btn&quot;).bind(&apos;click&apos;,&#123;btn:$(&apos;#btn&apos;)&#125;,function(e)&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: &apos;POST&apos;,</span><br><span class="line">                dataType: &apos;json&apos;,               </span><br><span class="line">                url: &apos;ajax.php&apos;,</span><br><span class="line">                timeout: &apos;20000&apos;,//设置请求超时时间</span><br><span class="line">                data: &#123;time: &apos;2000000&apos;&#125;,// 每次请求等待时间，将其传到后台用来挂起请求</span><br><span class="line">                success: function(data,status)&#123;</span><br><span class="line">//对返回的数据进行判断和读取</span><br><span class="line">                    if(data.success == &apos;1&apos;)&#123;</span><br><span class="line">                    $(&quot;#msg&quot;).append(&apos;&lt;br&gt;[有数据]&apos;+data.text);</span><br><span class="line">                    e.data.btn.click();  //再此发送请求</span><br><span class="line">                &#125;</span><br><span class="line">                    // 未从服务器中获的数据</span><br><span class="line">                      if(data.success == &apos;0&apos;)&#123;</span><br><span class="line">                        $(&quot;#msg&quot;).append(&apos;&lt;br&gt;[无数据]&apos;);</span><br><span class="line">                            e.data.btn.click();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                // ajax超时,继续查询</span><br><span class="line">                error:function(XMLHttpRequest,textStatus,errorThrown)&#123;</span><br><span class="line">                     if(textStatus == &quot;timeout&quot;)&#123;</span><br><span class="line">                        $(&quot;#msg&quot;).append(&apos;超时&apos;);</span><br><span class="line">                        e.data.btn.click();</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>后端 PHP 实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  set_time_limit(0);// 无限请求超时时间</span><br><span class="line">  usleep($_POST[&apos;time’]);//通过前台传过来的数据设置挂起时间</span><br><span class="line">  while(true)&#123;   //无限循环</span><br><span class="line">      $rand = rand(1,999);</span><br><span class="line">      if($rand &lt; 500)&#123;</span><br><span class="line">          $arr = array(&apos;success&apos;=&gt;&apos;1&apos;,&apos;name&apos;=&gt;&apos;有值&apos;,&apos;text&apos;=&gt;$rand);</span><br><span class="line">          echo json_encode($arr);</span><br><span class="line">          exit();</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          $arr = array(&apos;success&apos;=&gt;&apos;0&apos;,&apos;name&apos;=&gt;&apos;无值&apos;,&apos;text&apos;=&gt;$rand);</span><br><span class="line">          echo json_encode($arr);</span><br><span class="line">          exit();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3、应用-1"><a href="#3、应用-1" class="headerlink" title="3、应用"></a>3、应用</h4><p>长轮询和短轮询比起来，明显减少了很多不必要的http请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。应用场景跟短轮询相差无几。</p>
<h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>SSE是HTML5新增的功能，全称为Server-SentEvents。它可以允许服务推送数据到客户端。SSE在本质上就与之前的长轮询、短轮询不同，虽然都是基于http协议的，但是轮询需要客户端先发送请求。而SSE最大的特点就是不需要客户端发送请求，可以实现只要服务器端数据有更新，就可以马上发送到客户端。</p>
<h4 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h4><p>SSE不需要依赖客户端向服务器发送请求，而是可以直接在服务器端有数据更新时进行发送到客户端，相比于轮询的“拉数据”，这种“推数据” 有着低延迟、高性能的优势。</p>
<p>这种方法的服务器端非常简介，只要维护一个服务器和客户端之间的协议即可。前端使用EventSource对象。</p>
<p>服务器端需要提供的协议基本代码如下：</p>
<p>data:firstevent</p>
<p>data:secondevent</p>
<p>id:100</p>
<p>event:myevent</p>
<p>data:thirdevent</p>
<p>id:101</p>
<p>:thisisacomment</p>
<p>data:fourthevent</p>
<p>data:fourtheventcontinue</p>
<p>下面解释一下基本用法。要定义各个事件，每一个事件之间使用一个换行符隔开。每个事件内部可以有多行，每一行都是type:value的形式。type有以下集中选择：</p>
<p>(1)类型为空白，表示该行是注释，会在处理时被忽略。</p>
<p>(2)类型为data，表示该行包含的是数据。以data开头的行可以出现多次。所有这些行都是该事件的数据。</p>
<p>(3)类型为event，表示该行用来声明事件的类型。浏览器在收到数据时，会产生对应类型的事件。</p>
<p>(4)类型为id，表示该行用来声明事件的标识符。</p>
<p>(5)类型为retry，表示该行用来声明浏览器在连接断开之后进行再次连接之前的等待时间。</p>
<p>比如上面的第一个事件，只传输了一个数据，数据内容为firstevent。服务器端通过这个清单发送到客户端，就可以通过前端进行响应的处理，诸如读取新数据、更新界面等。</p>
<p>客户端需要在JavaScript中使用EventSource对象。</p>
<p>首先需要初始化一个EventSource对象，实例化的时候需要传入与其交互的服务器端的文件地址，如：</p>
<p>vares=newEventSource(“sse.php”);</p>
<p>接下来，可以对进行事件的监听。EventSource给出了三种标准事件，它们的名称和触发时机如下表：</p>
<p>open 当成功与服务器建立连接时执行</p>
<p>message 当收到服务器发送的事件时执行</p>
<p>error 当出现错误时执行</p>
<p>和普通的事件一样，可以通过以下两种方法使用这些事件：</p>
<p>es.onmessage=function(e){};</p>
<p>es.addEventListener(“message”,function(e){});</p>
<h4 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h4><p>前端实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;basic SSE test&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=”content”&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var es = new EventSource(&quot;sse.php&quot;);</span><br><span class="line">        es.addEventListener(&quot;message&quot;,function(e)&#123;</span><br><span class="line">            document.getElementById(&quot;content&quot;).innerHTML += &quot;\n&quot;+e.data;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>后端 PHP 实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;Content-Type: text/event-stream&apos;); //这是专门为sse设置的数据格式</span><br><span class="line">$time = date(&apos;Y-m-d H:i:s&apos;);</span><br><span class="line">//下面这些echo出来的东西就是上面说的服务器端和客户端之间的协议</span><br><span class="line">echo &apos;retry: 3000&apos;.PHP_EOL; //retry类型的数据，规定了浏览器在连接断开之后进行再次连接之前的等待时间</span><br><span class="line">echo &apos;data: The server time is: &apos;.$time.PHP_EOL.PHP_EOL;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="4、应用"><a href="#4、应用" class="headerlink" title="#### 4、应用"></a>#### 4、应用</h4><p>SSE的优势很明显，它不需要建立或保持大量的客户端发往服务器端的请求，节约了很多资源，提升应用性能。并且SSE的实现非常简单，并且不需要依赖其他插件。</p>
<h3 id="WEBSOCKET"><a href="#WEBSOCKET" class="headerlink" title="WEBSOCKET"></a>WEBSOCKET</h3><p>1、原理<br>WebSocket一种在单个 TCP 连接上进行全双工通讯的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并被RFC7936所补充规范。WebSocket API也被W3C定为标准。<br>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p>
<p>Websocket是应用层第七层上的一个应用层协议，它必须依赖 HTTP 协议进行一次握手 ，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。</p>
<p>Websocket的数据传输是frame形式传输的，比如会将一条消息分为几个frame，按照先后顺序传输出去。这样做会有几个好处：</p>
<p>1 大数据的传输可以分片传输，不用考虑到数据大小导致的长度标志位不足够的情况。</p>
<p>2 和http的chunk一样，可以边生成数据边传递消息，即提高传输效率。</p>
<p>2、实现<br>客户端实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var ws = new WebSocket(&quot;wss://echo.websocket.org&quot;);</span><br><span class="line"></span><br><span class="line">ws.onopen = function(evt) &#123; </span><br><span class="line">  console.log(&quot;Connection open ...&quot;); </span><br><span class="line">  ws.send(&quot;Hello WebSockets!&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = function(evt) &#123;</span><br><span class="line">  console.log( &quot;Received Message: &quot; + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = function(evt) &#123;</span><br><span class="line">  console.log(&quot;Connection closed.&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>说明：<br>WebSocket提供了四个事件操作，如下：</p>
<p>onmessage 收到服务器响应时执行</p>
<p>onerroe 出现异常时执行</p>
<p>onopen 建立起连接时执行</p>
<p>onclose 断开连接时执行</p>
<p>服务端实现<br>WebSocket 服务器的实现，可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations" target="_blank" rel="noopener">列表</a>。具体的用法也不一一列举。</p>
<p>3、应用</p>
<p>社交聊天、弹幕、多玩家游戏、协同编辑、股票基金实时报价、体育实况更新、视频会议/聊天、基于位置的应用、在线教育、智能家居等需要高实时的场景。大家感受最深刻的就是微信聊天和 QQ 聊天了。</p>
<h3 id="最后：WebSocket和Socket的区别与联系"><a href="#最后：WebSocket和Socket的区别与联系" class="headerlink" title="最后：WebSocket和Socket的区别与联系"></a>最后：WebSocket和Socket的区别与联系</h3><p>首先，Socket 其实并不是一个协议。它工作在 OSI 模型会话层（第5层），是为了方便大家直接使用更底层协议（一般是 TCP 或 UDP ）而存在的一个抽象层。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。</p>
<p>Socket通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄。网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket，一个Socket由一个IP地址和一个端口号唯一确定。应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p>
<p>Socket在通讯过程中，服务端监听某个端口是否有连接请求，客户端向服务端发送连接请求，服务端收到连接请求向客户端发出接收消息，这样一个连接就建立起来了。客户端和服务端也都可以相互发送消息与对方进行通讯，直到双方连接断开</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊 web 中的网络请求]]></title>
      <url>https://qimajiang.com/2017/07/08/%E8%81%8A%E8%81%8A-web-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<ul>
<li><p>现在大多数情况都需要使用计算机，而大部分计算机都会联网。那么在联网的过程中计算机和其他网络设备需要做哪些操作才开确保网络请求成功并返回需要的数据呢？ 本文着重阐述 http请求过程中，即从浏览器请求开始到成功显示返回数据的过程， 会有哪些操作呢？</p>
<a id="more"></a>
<h2 id="完整的http-请求过程概括为"><a href="#完整的http-请求过程概括为" class="headerlink" title="完整的http 请求过程概括为"></a>完整的http 请求过程概括为</h2></li>
</ul>
<p>0、浏览器本地缓存匹配；</p>
<p>1、本地hosts映射对比;</p>
<p>2、本地dns缓存解析；</p>
<p>3、远程(运营商）dns解析获得服务器ip地址；</p>
<p>4、浏览器发送tcp连接请求包(syn)；</p>
<p>5、TCP/IP连接建立起来后，浏览器就可以向服务器发送HTTP请求了；</p>
<p>6、服务器端接收到请求，根据路径参数，经过处理（包括数据库操作， 计算操作等等），把处理后的一个结果的数据返回给浏览器；</p>
<p>7、浏览器收到结果后， 进行 html 解析， 渲染页面， 把页面呈现给用户；</p>
<h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><h3 id="HTTP连接"><a href="#HTTP连接" class="headerlink" title="HTTP连接"></a>HTTP连接</h3><p>  HTTP协议即超文本传送协议(Hypertext Transfer Protocol)，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。<br>1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。</p>
<p>2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。</p>
<p>由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常 的做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道 客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。</p>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://camo.githubusercontent.com/36cf7d4e1598683fe72a5e1c3e837b16840f4085/687474703a2f2f6f6f327239726e7a702e626b742e636c6f7564646e2e636f6d2f6a656c6c797468696e6b544350342e6a7067" alt=""></p>
<h4 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h4><p>ACK ： TCP协议规定，只有ACK=1时有效，也规定连接建立后所有发送的报文的ACK必须为1</p>
<p>SYN(SYNchronization) ： 在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使SYN=1和ACK=1. 因此, SYN置1就表示这是一个连接请求或连接接受报文。</p>
<p>1、第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；<br>2、第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；<br>3、第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</p>
<p>当然图片不是我画的， 知识用来引导解释。而且图中还有四次挥手的过程， 这个就不阐述了， 是指数据传输后断开 TCP连接的过程。</p>
<h4 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h4><p>对于初学者可能不理解为何要三次握手， 那如果只有两次握手会是什么样子的呢？ 举个两次握手的反面例子， 两个人面对面站着， 其中一人 A想给对方 B 传送口信，A 问对方 B 我要开始传送了， B听到后说可以， 传过来吧？B 说完这句话后被其他事情打扰了， 若此时 A把口信传给 B,那 B 肯定听不到了。就造成传信失败了。但三次握手的存在是为了保证传输能成功进行，并且在可控的范围内完成传输。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>本人也只是半桶水， 只根据自己的理解写了本文。 若想了解更多， 推荐一些文章，加深理解。</p>
<p><a href="http://blog.csdn.net/oney139/article/details/8103223" target="_blank" rel="noopener">TCP三次握手详解及释放连接过程</a><br><a href="http://www.cnblogs.com/yuilin/archive/2012/11/05/2755298.html#!comments" target="_blank" rel="noopener">首先简单介绍一下TCP三次握手</a><br><a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">TCP 为什么是三次握手，为什么不是两次或四次？</a><br><a href="https://juejin.im/post/58e36d35b123db15eb748856" target="_blank" rel="noopener">面试时，你被问到过 TCP/IP 协议吗?</a><br><a href="https://github.com/woai30231/http" target="_blank" rel="noopener">HTTP 权威指南</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手把手教你用 PHP 拼接微信好友头像]]></title>
      <url>https://qimajiang.com/2017/06/13/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8-PHP-%E6%8B%BC%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E5%A4%B4%E5%83%8F/</url>
      <content type="html"><![CDATA[<ul>
<li>最近做个人微信机器人挺热门的， 同时很多人也用来对自己的微信好友做分析和统计， 比如：简单的就是利用微信好友的头像做成一张大图， 让朋友圈的好友都看到彼此， 觉得蛮有意思的! 网上已经有 Python 或 Nodejs 的实现了， 我就想用 PHP 来实现一下。<a id="more"></a>
</li>
</ul>
<h3 id="1、如何选一个微信爬虫。"><a href="#1、如何选一个微信爬虫。" class="headerlink" title="1、如何选一个微信爬虫。"></a>1、如何选一个微信爬虫。</h3><h4 id="所谓的微信爬虫就是利用微信的-web-api-做一些自动化的事情，这里强烈推荐由-PHP7实现的vbot-所有的东西都可以在-vbot-的文档里找到，-在微信-web-api-的范围内你都可以为所欲为了。注意：-本文所有的微信数据都基于-vbot-获取的。"><a href="#所谓的微信爬虫就是利用微信的-web-api-做一些自动化的事情，这里强烈推荐由-PHP7实现的vbot-所有的东西都可以在-vbot-的文档里找到，-在微信-web-api-的范围内你都可以为所欲为了。注意：-本文所有的微信数据都基于-vbot-获取的。" class="headerlink" title="所谓的微信爬虫就是利用微信的 web api 做一些自动化的事情，这里强烈推荐由 PHP7实现的vbot, 所有的东西都可以在 vbot 的文档里找到， 在微信 web api 的范围内你都可以为所欲为了。注意： 本文所有的微信数据都基于 vbot 获取的。"></a>所谓的微信爬虫就是利用微信的 web api 做一些自动化的事情，这里强烈推荐由 PHP7实现的<a href="https://github.com/HanSon/vbot" target="_blank" rel="noopener">vbot</a>, 所有的东西都可以在 vbot 的文档里找到， 在微信 web api 的范围内你都可以为所欲为了。注意： 本文所有的微信数据都基于 vbot 获取的。</h4><h3 id="2、如何爬取微信好友的头像。"><a href="#2、如何爬取微信好友的头像。" class="headerlink" title="2、如何爬取微信好友的头像。"></a>2、如何爬取微信好友的头像。</h3><h4 id="首先要获取的是你的微信好友列表，-在-vbot-的基础上我们可以这样做："><a href="#首先要获取的是你的微信好友列表，-在-vbot-的基础上我们可以这样做：" class="headerlink" title="首先要获取的是你的微信好友列表， 在 vbot 的基础上我们可以这样做："></a>首先要获取的是你的微信好友列表， 在 vbot 的基础上我们可以这样做：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File::saveTo(<span class="keyword">__DIR__</span>.<span class="string">'/contacts.json'</span>, $contacts[<span class="string">'friends'</span>]);</span><br></pre></td></tr></table></figure>
<h4 id="把微信好友列表写入到一个文件中。"><a href="#把微信好友列表写入到一个文件中。" class="headerlink" title="把微信好友列表写入到一个文件中。"></a>把微信好友列表写入到一个文件中。</h4><h4 id="然后对这个文件进行处理，-提取微信好友的头像链接和下载。"><a href="#然后对这个文件进行处理，-提取微信好友的头像链接和下载。" class="headerlink" title="然后对这个文件进行处理， 提取微信好友的头像链接和下载。"></a>然后对这个文件进行处理， 提取微信好友的头像链接和下载。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$contactAmount = $friends-&gt;count();</span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt; $contactAmount; $i++)&#123;</span><br><span class="line">     $data =  $friends-&gt;getAvatar(<span class="keyword">self</span>::$usernameArr[$i]);</span><br><span class="line">    file_put_contents(<span class="keyword">__DIR__</span>.<span class="string">'/avatars/'</span>.$i.<span class="string">'.jpeg'</span>,$data);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="就这样，-我们就已经能把所有的微信好友头像下载到指定的地方了。注意：建议图片的命名规则用数字递增的方式，-方便后面的图片拼接循环。"><a href="#就这样，-我们就已经能把所有的微信好友头像下载到指定的地方了。注意：建议图片的命名规则用数字递增的方式，-方便后面的图片拼接循环。" class="headerlink" title="就这样， 我们就已经能把所有的微信好友头像下载到指定的地方了。注意：建议图片的命名规则用数字递增的方式， 方便后面的图片拼接循环。"></a>就这样， 我们就已经能把所有的微信好友头像下载到指定的地方了。注意：建议图片的命名规则用数字递增的方式， 方便后面的图片拼接循环。</h4><h3 id="3、图片拼接"><a href="#3、图片拼接" class="headerlink" title="3、图片拼接"></a>3、图片拼接</h3><h4 id="本文的重点来了，-现在网上有很多图片拼接小工具，-但-PHP-实现的寥寥无几，-找了一轮后，-决定还是自己写。"><a href="#本文的重点来了，-现在网上有很多图片拼接小工具，-但-PHP-实现的寥寥无几，-找了一轮后，-决定还是自己写。" class="headerlink" title="本文的重点来了， 现在网上有很多图片拼接小工具， 但 PHP 实现的寥寥无几， 找了一轮后， 决定还是自己写。"></a>本文的重点来了， 现在网上有很多图片拼接小工具， 但 PHP 实现的寥寥无几， 找了一轮后， 决定还是自己写。</h4><p>（1）首先，要确定画布的长度和宽度。那怎么根据图片数量确定画布大小呢。我们门这样分析：由于微信头像的宽高相等， 那我们拼接到画布的托也是宽高相等，这里全部设置为200px， 那么， 只要确定行数和列数， 就知道画布的大小了。<strong>还有一点注意：当图片数量小于4张时， 我们只需要一行（或者一列）即可。</strong> 当图片数大于3时：</p>
<p>a、确定列数（每行多少张）：列数 = 总数（大于3）的平方根， 向上取整<br>b、确定行数（每列多少张）：总数（大于3）除以列数， 向上取整</p>
<ul>
<li>这里的行数和行数的计算方式是为了尽可能使画布的宽度和高度差值减小。你也可以根据自己的好修改计算方法， 但一定要跟后面的图片排列的行数和列数一致， 否则会出现图片越界的问题。</li>
</ul>
<p>知道了行数和列数， 那很容易得出画布的宽高  </p>
<p>c、画布宽度 = 图片宽度（200px）乘以 列数<br>d、画布高度 = 图片高度（200px）乘以 行数</p>
<p>代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据图片数据计算画布的大小</span></span><br><span class="line"><span class="comment">   * 默认每张图宽度高度 = 200</span></span><br><span class="line"><span class="comment">   * 画布大小计算方法：</span></span><br><span class="line"><span class="comment">   * 列数 = 总数（大于3）的平方根， 向上取整</span></span><br><span class="line"><span class="comment">   * 行数 = 总数（大于3）除以列数， 向上取整</span></span><br><span class="line"><span class="comment">   *  <span class="doctag">@param</span> $imageCount</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span>  <span class="title">prepareForCanvas</span><span class="params">($imageCount)</span></span>&#123;</span><br><span class="line">      $canvasWidth = <span class="number">0</span>;</span><br><span class="line">      $canvasHeight = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ($imageCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//宽度 = 列数*200</span></span><br><span class="line">          <span class="keyword">if</span> ($imageCount &lt; <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">                  $canvasWidth = <span class="keyword">$this</span>-&gt;width*$imageCount;</span><br><span class="line">                  <span class="keyword">$this</span>-&gt;eachLineCount = $imageCount;</span><br><span class="line">                  $canvasHeight = <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">$this</span>-&gt;eachLineCount = ceil(sqrt($imageCount)); <span class="comment">//列数</span></span><br><span class="line">              <span class="keyword">$this</span>-&gt;eachColumCount = ceil($imageCount/<span class="keyword">$this</span>-&gt;eachLineCount);</span><br><span class="line">              $canvasWidth = <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;eachLineCount;</span><br><span class="line">              $canvasHeight = <span class="keyword">$this</span>-&gt;height * <span class="keyword">$this</span>-&gt;eachColumCount;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'图片总数：'</span>.$imageCount.PHP_EOL;</span><br><span class="line">      <span class="comment">//创建画布</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;createCanvas($canvasWidth, $canvasHeight);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**创建画布</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $width</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $height</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createCanvas</span><span class="params">($cwidth, $cheight)</span> </span>&#123;</span><br><span class="line">      $totalImage = count(<span class="keyword">$this</span>-&gt;srcImages);     </span><br><span class="line"></span><br><span class="line">      <span class="keyword">$this</span>-&gt;canvas = imagecreatetruecolor($cwidth, $cheight);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使画布透明</span></span><br><span class="line">      $white = imagecolorallocate(<span class="keyword">$this</span>-&gt;canvas, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">      imagefill(<span class="keyword">$this</span>-&gt;canvas, <span class="number">0</span>, <span class="number">0</span>, $white);</span><br><span class="line">      imagecolortransparent(<span class="keyword">$this</span>-&gt;canvas, $white);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'画布大小:长度：'</span>.$cwidth.<span class="string">'，高度：'</span>. $cheight.PHP_EOL.</span><br><span class="line">          <span class="string">'每行数量（列数）：'</span>.<span class="keyword">$this</span>-&gt;eachLineCount.<span class="string">',每列数量（行数）：'</span>.<span class="keyword">$this</span>-&gt;eachColumCount.PHP_EOL;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4、画布建好了，-接下来就是拼接图片了。"><a href="#4、画布建好了，-接下来就是拼接图片了。" class="headerlink" title="4、画布建好了， 接下来就是拼接图片了。"></a>4、画布建好了， 接下来就是拼接图片了。</h3><h4 id="这里的难点在于确定图片在哪个位置。"><a href="#这里的难点在于确定图片在哪个位置。" class="headerlink" title="这里的难点在于确定图片在哪个位置。"></a>这里的难点在于确定图片在哪个位置。</h4><p>a、图片数小于4时， 只有一行， 每张图片的 y 值都是0， x 值随图片数每次递增200px。<br>b、图片数大于3时， 循环复制图片到画布上， 当图片的序号等于列数的倍数时， 就要换行， 那么 x 值从0开始， y 值递增200px； 以此类推，直到所有图片复制到画布上。</p>
<p>代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;srcImages)  || <span class="keyword">$this</span>-&gt;width==<span class="number">0</span> || <span class="keyword">$this</span>-&gt;height==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $imageCount = count(<span class="keyword">$this</span>-&gt;srcImages);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;prepareForCanvas($imageCount);</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt; $imageCount; $i++) &#123;</span><br><span class="line">        $srcImage = <span class="keyword">$this</span>-&gt;srcImages[$i];</span><br><span class="line">        $srcImageInfo = getimagesize($srcImage);</span><br><span class="line">        <span class="comment">// 如果能够正确的获取原图的基本信息</span></span><br><span class="line">        <span class="keyword">if</span> ($srcImageInfo) &#123;</span><br><span class="line">            $srcWidth = $srcImageInfo[<span class="number">0</span>];</span><br><span class="line">            $srcHeight = $srcImageInfo[<span class="number">1</span>];</span><br><span class="line">            $fileType = $srcImageInfo[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> ($fileType == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 原图是 jpg 类型</span></span><br><span class="line">                $srcImage = imagecreatefromjpeg($srcImage);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($fileType == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// 原图是 png 类型</span></span><br><span class="line">                $srcImage = imagecreatefrompng($srcImage);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 无法识别的类型</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//只支持横向</span></span><br><span class="line">            <span class="comment">// 计算当前原图片应该位于画布的哪个位置</span></span><br><span class="line">            <span class="keyword">if</span> ($i &lt; <span class="keyword">$this</span>-&gt;eachLineCount)&#123;</span><br><span class="line">                $destX = $i * <span class="keyword">$this</span>-&gt;width;</span><br><span class="line">                $desyY = <span class="number">0</span>;</span><br><span class="line">                $currentRowIndex = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//计算该图片应该在第几行， 第几列</span></span><br><span class="line">                 $tmp = ($i+<span class="number">1</span>)/<span class="keyword">$this</span>-&gt;eachLineCount;</span><br><span class="line">                <span class="keyword">if</span> (($i+<span class="number">1</span>)%<span class="keyword">$this</span>-&gt;eachLineCount == <span class="number">0</span>)&#123;</span><br><span class="line">                    $currentRowIndex = $tmp <span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $currentRowIndex = floor($tmp);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                $destX = ($i - $currentRowIndex*<span class="keyword">$this</span>-&gt;eachLineCount)*<span class="keyword">$this</span>-&gt;width;</span><br><span class="line">                $desyY = $currentRowIndex*<span class="keyword">$this</span>-&gt;height;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'当前索引:'</span>.$i.<span class="string">',当前行的索引: '</span>.$currentRowIndex.<span class="string">',图片位置 X: '</span>.$destX.<span class="string">',图片位置 Y: '</span>.$desyY.PHP_EOL;</span><br><span class="line"></span><br><span class="line">            imagecopyresampled(<span class="keyword">$this</span>-&gt;canvas, $srcImage, $destX, $desyY,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">$this</span>-&gt;width, <span class="keyword">$this</span>-&gt;height, $srcWidth, $srcHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有指定目标地址，则输出到文件</span></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;destImage)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5、效果预览"><a href="#5、效果预览" class="headerlink" title="5、效果预览"></a>5、效果预览</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fgfalih389j30b40b40t8.jpg" alt=""></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fgfalhd9z8j30rs0m8acd.jpg" alt=""></p>
<h3 id="6、完整的代码"><a href="#6、完整的代码" class="headerlink" title="6、完整的代码"></a>6、完整的代码</h3><p><a href="https://github.com/moxun33/imageMergerUtil" target="_blank" rel="noopener">https://github.com/moxun33/imageMergerUtil</a></p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闲谈 PHP7新特性]]></title>
      <url>https://qimajiang.com/2017/05/27/%E9%97%B2%E8%B0%88-PHP7%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<ul>
<li>PHP7已经发布有段时间了，其最大的特点是快。其性能高于 HHVM， 是 PHP5.6的两倍。本人就整理一些PHP7.0.x的新特性，也当做自己学习和复习PHP7。<a id="more"></a>
<h3 id="0、可变参数"><a href="#0、可变参数" class="headerlink" title="0、可变参数"></a>0、可变参数</h3><h4 id="PHP7允许传入可变个数的同类型参数"><a href="#PHP7允许传入可变个数的同类型参数" class="headerlink" title="PHP7允许传入可变个数的同类型参数"></a>PHP7允许传入可变个数的同类型参数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">sum</span><span class="params">(int ...$ints)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum($ints);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="number">22</span>)</span><br></pre></td></tr></table></figure>
<h3 id="1、标量类型声明"><a href="#1、标量类型声明" class="headerlink" title="1、标量类型声明"></a>1、标量类型声明</h3><h4 id="标量类型声明-有两种模式-强制-默认-和-严格模式。-现在可以使用下列类型参数（无论用强制模式还是严格模式）：-字符串-string-整数-int-浮点数-float-以及布尔值-bool-。它们扩充了PHP5中引入的其他类型：类名，接口，数组和-回调类型。"><a href="#标量类型声明-有两种模式-强制-默认-和-严格模式。-现在可以使用下列类型参数（无论用强制模式还是严格模式）：-字符串-string-整数-int-浮点数-float-以及布尔值-bool-。它们扩充了PHP5中引入的其他类型：类名，接口，数组和-回调类型。" class="headerlink" title="标量类型声明 有两种模式: 强制 (默认) 和 严格模式。 现在可以使用下列类型参数（无论用强制模式还是严格模式）： 字符串(string), 整数 (int), 浮点数 (float), 以及布尔值 (bool)。它们扩充了PHP5中引入的其他类型：类名，接口，数组和 回调类型。"></a>标量类型声明 有两种模式: 强制 (默认) 和 严格模式。 现在可以使用下列类型参数（无论用强制模式还是严格模式）： 字符串(string), 整数 (int), 浮点数 (float), 以及布尔值 (bool)。它们扩充了PHP5中引入的其他类型：类名，接口，数组和 回调类型。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 强制模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">sum</span><span class="params">(int ...$ints)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum($ints);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum(<span class="number">4</span>, <span class="string">'5'</span>, <span class="number">6.1</span>));</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h4 id="要使用严格模式需要在文件顶部添加-declare-strict-types-1-在严格模式中，只有一个与类型声明完全相符的变量才会被接受，否则将会抛出一个TypeError。-严格类型仅用于标量类型声明，也正是因为如此，这需要PHP-7-0-0-或更新版本，因为标量类型声明也是在那个版本中添加的。"><a href="#要使用严格模式需要在文件顶部添加-declare-strict-types-1-在严格模式中，只有一个与类型声明完全相符的变量才会被接受，否则将会抛出一个TypeError。-严格类型仅用于标量类型声明，也正是因为如此，这需要PHP-7-0-0-或更新版本，因为标量类型声明也是在那个版本中添加的。" class="headerlink" title="要使用严格模式需要在文件顶部添加 declare(strict_types=1);在严格模式中，只有一个与类型声明完全相符的变量才会被接受，否则将会抛出一个TypeError。  严格类型仅用于标量类型声明，也正是因为如此，这需要PHP 7.0.0 或更新版本，因为标量类型声明也是在那个版本中添加的。"></a>要使用严格模式需要在文件顶部添加 declare(strict_types=1);在严格模式中，只有一个与类型声明完全相符的变量才会被接受，否则将会抛出一个TypeError。  严格类型仅用于标量类型声明，也正是因为如此，这需要PHP 7.0.0 或更新版本，因为标量类型声明也是在那个版本中添加的。</h4><p>例子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(int $m, int $n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $m + $n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">var_dump(sum(<span class="number">0.5</span>, <span class="number">1.5</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught TypeError: Argument <span class="number">1</span> passed to sum() must be of the type integer, float given,  </span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 -(9): sum(0.5, 1.5)</span></span><br></pre></td></tr></table></figure>
<h3 id="3、函数返回类型声明"><a href="#3、函数返回类型声明" class="headerlink" title="3、函数返回类型声明"></a>3、函数返回类型声明</h3><h4 id="PHP-7-增加了对返回类型声明的支持。函数返回值的类型必须与声明的类型一致，-否则会抛出错误。"><a href="#PHP-7-增加了对返回类型声明的支持。函数返回值的类型必须与声明的类型一致，-否则会抛出错误。" class="headerlink" title="PHP 7 增加了对返回类型声明的支持。函数返回值的类型必须与声明的类型一致， 否则会抛出错误。"></a>PHP 7 增加了对返回类型声明的支持。函数返回值的类型必须与声明的类型一致， 否则会抛出错误。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arraysSum</span><span class="params">(array ...$arrays)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_map(<span class="function"><span class="keyword">function</span><span class="params">(array $array)</span>: <span class="title">int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_sum($array);</span><br><span class="line">    &#125;, $arrays);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_r(arraysSum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]));</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">6</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">15</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">24</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 由于近期有学习 Swift，这种写法和 Swift 类似：</span></span><br><span class="line">在 Swift 中</span><br><span class="line">```php</span><br><span class="line">func test(a: String) -&gt; String &#123; </span><br><span class="line">    let b = a + <span class="string">"b"</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、null合并运算符"><a href="#3、null合并运算符" class="headerlink" title="3、null合并运算符"></a>3、null合并运算符</h3><h4 id="PHP7中添加了null合并运算符-这个语法糖。如果变量存在且值不为NULL，-它就会返回自身的值，否则返回它的第二个操作数。"><a href="#PHP7中添加了null合并运算符-这个语法糖。如果变量存在且值不为NULL，-它就会返回自身的值，否则返回它的第二个操作数。" class="headerlink" title="PHP7中添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。"></a>PHP7中添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Fetches the value of $_GET['user'] and returns 'nobody'</span></span><br><span class="line"><span class="comment">// if it does not exist.</span></span><br><span class="line">$username = $_GET[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</span><br><span class="line"><span class="comment">// This is equivalent to:</span></span><br><span class="line">$username = <span class="keyword">isset</span>($_GET[<span class="string">'user'</span>]) ? $_GET[<span class="string">'user'</span>] : <span class="string">'nobody'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Coalesces can be chained: this will return the first</span></span><br><span class="line"><span class="comment">// defined value out of $_GET['user'], $_POST['user'], and</span></span><br><span class="line"><span class="comment">// 'nobody'.</span></span><br><span class="line">$username = $_GET[<span class="string">'user'</span>] ?? $_POST[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4、太空船操作符（组合比较符）"><a href="#4、太空船操作符（组合比较符）" class="headerlink" title="4、太空船操作符（组合比较符）"></a>4、太空船操作符（组合比较符）</h3><h4 id="太空船操作符用于比较两个表达式。当-a小于、等于或大于-b时它分别返回-1、0或1。"><a href="#太空船操作符用于比较两个表达式。当-a小于、等于或大于-b时它分别返回-1、0或1。" class="headerlink" title="太空船操作符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。"></a>太空船操作符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">2.5</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"b"</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"b"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、通过-define-定义常量数组"><a href="#5、通过-define-定义常量数组" class="headerlink" title="5、通过 define() 定义常量数组"></a>5、通过 define() 定义常量数组</h3><h4 id="PHP7中Array-类型的常量现在可以通过-define-来定义。在-PHP5-6-中仅能通过-const-定义。"><a href="#PHP7中Array-类型的常量现在可以通过-define-来定义。在-PHP5-6-中仅能通过-const-定义。" class="headerlink" title="PHP7中Array 类型的常量现在可以通过 define() 来定义。在 PHP5.6 中仅能通过 const 定义。"></a>PHP7中Array 类型的常量现在可以通过 define() 来定义。在 PHP5.6 中仅能通过 const 定义。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'ANIMALS'</span>, [</span><br><span class="line">    <span class="string">'dog'</span>,</span><br><span class="line">    <span class="string">'cat'</span>,</span><br><span class="line">    <span class="string">'bird'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ANIMALS[<span class="number">1</span>]; <span class="comment">// 输出 "cat"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、匿名类"><a href="#5、匿名类" class="headerlink" title="5、匿名类"></a>5、匿名类</h3><h4 id="PHP7支持通过new-class-来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。"><a href="#PHP7支持通过new-class-来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。" class="headerlink" title="PHP7支持通过new class 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。"></a>PHP7支持通过new class 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(string $msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogger</span><span class="params">()</span>: <span class="title">Logger</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span><span class="params">(Logger $logger)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;logger = $logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">new</span> Application;</span><br><span class="line">$app-&gt;setLogger(<span class="keyword">new</span> <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(string $msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var_dump($app-&gt;getLogger());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6、use-批量声明"><a href="#6、use-批量声明" class="headerlink" title="6、use 批量声明"></a>6、use 批量声明</h3><h4 id="PHP-7-中-use-可以在一句话中声明多个类或函数或-const-了："><a href="#PHP-7-中-use-可以在一句话中声明多个类或函数或-const-了：" class="headerlink" title="PHP 7 中 use 可以在一句话中声明多个类或函数或 const 了："></a>PHP 7 中 use 可以在一句话中声明多个类或函数或 const 了：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;php </span><br><span class="line"><span class="keyword">use</span> <span class="title">some</span>/<span class="title">namespace</span>/&#123;<span class="title">ClassA</span>, <span class="title">ClassB</span>, <span class="title">ClassC</span> <span class="title">as</span> <span class="title">C</span>&#125;; </span><br><span class="line"><span class="keyword">use</span> <span class="title">function</span> <span class="title">some</span>/<span class="title">namespace</span>/&#123;<span class="title">fn_a</span>, <span class="title">fn_b</span>, <span class="title">fn_c</span>&#125;; </span><br><span class="line"><span class="keyword">use</span> <span class="title">const</span> <span class="title">some</span>/<span class="title">namespace</span>/&#123;<span class="title">ConstA</span>, <span class="title">ConstB</span>, <span class="title">ConstC</span>&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="但还是要写出每个类或函数或-const-的名称（并没有像-python-一样的-from-some-import-的方法）。需要留意的问题是：如果你使用的是基于-composer-和-PSR-4-的框架，这种写法是否能成功的加载类文件？其实是可以的，composer-注册的自动加载方法是在类被调用的时候根据类的命名空间去查找位置，这种写法对其没有影响。"><a href="#但还是要写出每个类或函数或-const-的名称（并没有像-python-一样的-from-some-import-的方法）。需要留意的问题是：如果你使用的是基于-composer-和-PSR-4-的框架，这种写法是否能成功的加载类文件？其实是可以的，composer-注册的自动加载方法是在类被调用的时候根据类的命名空间去查找位置，这种写法对其没有影响。" class="headerlink" title="但还是要写出每个类或函数或 const 的名称（并没有像 python 一样的 from some import * 的方法）。需要留意的问题是：如果你使用的是基于 composer 和 PSR-4 的框架，这种写法是否能成功的加载类文件？其实是可以的，composer 注册的自动加载方法是在类被调用的时候根据类的命名空间去查找位置，这种写法对其没有影响。"></a>但还是要写出每个类或函数或 const 的名称（并没有像 python 一样的 from some import * 的方法）。需要留意的问题是：如果你使用的是基于 composer 和 PSR-4 的框架，这种写法是否能成功的加载类文件？其实是可以的，composer 注册的自动加载方法是在类被调用的时候根据类的命名空间去查找位置，这种写法对其没有影响。</h4><h3 id="7、其他特性"><a href="#7、其他特性" class="headerlink" title="7、其他特性"></a>7、其他特性</h3><h4 id="其他的特性包括但不限于"><a href="#其他的特性包括但不限于" class="headerlink" title="其他的特性包括但不限于"></a>其他的特性包括但不限于</h4><p>1、Int64支持，统一不同平台下的整型长度，字符串和文件上传都支持大于2GB。<br>2、统一变量语法（Uniform variable syntax）。<br>3、Unicode字符格式支持（\u{xxxxx}）<br>4、移除了一些老的不在支持的SAPI（服务器端应用编程端口）和扩展</p>
<h4 id="有兴趣直接访问官网-http-php-net-manual-zh-migration70-new-features-php"><a href="#有兴趣直接访问官网-http-php-net-manual-zh-migration70-new-features-php" class="headerlink" title="有兴趣直接访问官网 http://php.net/manual/zh/migration70.new-features.php"></a>有兴趣直接访问官网 <a href="http://php.net/manual/zh/migration70.new-features.php" target="_blank" rel="noopener">http://php.net/manual/zh/migration70.new-features.php</a></h4>]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 ngrok 实现内网穿透]]></title>
      <url>https://qimajiang.com/2017/04/04/%E4%BD%BF%E7%94%A8-ngrok-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<ul>
<li>由于平时需要进行微信接口开发，最让人头疼的是微信的接口配置一定要是公网 IP；我在本地编码了，每次都要传到服务器进行调试，不仅开发效率低，而且无法定位 BUG 。本文将介绍如何从这种困扰中走出，让我们在本地轻松的进行微信调试。<a id="more"></a>
</li>
</ul>
<p>网上有很多 ngrok 公共端，用户可以直接使用。如果还不知道什么的 ngrok；请参考<a href="http://baike.baidu.com/link?url=DqWJtVr6syeLYhxRUAnUiYtFIpxgZdZUm7wx5JDfGgTxT-tqr_iOn-9Gv7S7xc4eZ3D44BS_lNmOAhombkkVZq" target="_blank" rel="noopener">ngrok</a></p>
<h2 id="本文使用的-ngrok-服务方是http-ittun-com"><a href="#本文使用的-ngrok-服务方是http-ittun-com" class="headerlink" title="本文使用的 ngrok 服务方是http://ittun.com/"></a>本文使用的 ngrok 服务方是<a href="http://ittun.com/" target="_blank" rel="noopener">http://ittun.com/</a></h2><h4 id="1、前往http-ittun-com-下载对应操作系统的客户端。"><a href="#1、前往http-ittun-com-下载对应操作系统的客户端。" class="headerlink" title="1、前往http://ittun.com/下载对应操作系统的客户端。"></a>1、前往<a href="http://ittun.com/" target="_blank" rel="noopener">http://ittun.com/</a>下载对应操作系统的客户端。</h4><h4 id="2、下载完成后，解压得到可执行文件。Windows-系统比较简单，直接双击startup-bat运行即可"><a href="#2、下载完成后，解压得到可执行文件。Windows-系统比较简单，直接双击startup-bat运行即可" class="headerlink" title="2、下载完成后，解压得到可执行文件。Windows 系统比较简单，直接双击startup.bat运行即可;"></a>2、下载完成后，解压得到可执行文件。Windows 系统比较简单，直接双击startup.bat运行即可;</h4><p>命令启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">linux: ./ngrok [port] (tcp: ./ngrok -proto=tcp 22) </span><br><span class="line">windows: ngrok [port] (tcp: ngrok -proto=tcp 22)</span><br></pre></td></tr></table></figure></p>
<p>更多:ngrok –help</p>
<h4 id="3、使用二级域名。经过我的测试，其他很多的-ngrok-公共端都需要注册登录而且限制使用自定义二级域名，-这是我找到最好的提供商了。"><a href="#3、使用二级域名。经过我的测试，其他很多的-ngrok-公共端都需要注册登录而且限制使用自定义二级域名，-这是我找到最好的提供商了。" class="headerlink" title="3、使用二级域名。经过我的测试，其他很多的 ngrok 公共端都需要注册登录而且限制使用自定义二级域名， 这是我找到最好的提供商了。"></a>3、使用二级域名。经过我的测试，其他很多的 ngrok 公共端都需要注册登录而且限制使用自定义二级域名， 这是我找到最好的提供商了。</h4><p>直接运行下面代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok --subdomain [demo] 80</span><br></pre></td></tr></table></figure></p>
<h4 id="4、当然也可以指定配置文件"><a href="#4、当然也可以指定配置文件" class="headerlink" title="4、当然也可以指定配置文件"></a>4、当然也可以指定配置文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config ittun.yml start [proname]</span><br></pre></td></tr></table></figure>
<h4 id="5、如果嫌以上不走麻烦，不妨写一个简单的-SHELL-脚本。每次启动只要运行该脚本即可。"><a href="#5、如果嫌以上不走麻烦，不妨写一个简单的-SHELL-脚本。每次启动只要运行该脚本即可。" class="headerlink" title="5、如果嫌以上不走麻烦，不妨写一个简单的 SHELL 脚本。每次启动只要运行该脚本即可。"></a>5、如果嫌以上不走麻烦，不妨写一个简单的 SHELL 脚本。每次启动只要运行该脚本即可。</h4><p>（1）创建 startup.sh 文件。<br>在里面写入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"> ./ngrok  -subdomain mywechat 80</span><br><span class="line"> ./ngrok -config config.yml start</span><br></pre></td></tr></table></figure></p>
<p>(2) 每次需要启动 ngrok 服务的时候，直接运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure></p>
<p>（3）、运行效果<br><img src="https://ooo.0o0.ooo/2017/04/04/58e28206363be.png" alt=""></p>
<p><img src="https://ooo.0o0.ooo/2017/04/04/58e2829f1f2d9.png" alt=""></p>
<h4 id="6、测试微信接口配置"><a href="#6、测试微信接口配置" class="headerlink" title="6、测试微信接口配置"></a>6、测试微信接口配置</h4><p><img src="https://ooo.0o0.ooo/2017/04/04/58e283e8953b2.png" alt=""><br>配置成功。然后就专注编码吧！</p>
]]></content>
      
        
        <tags>
            
            <tag> ngrok </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[postgresql 数据库笔记]]></title>
      <url>https://qimajiang.com/2017/03/18/postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>最近学习 PostgreSQL 的笔记。（不定时更新）<a id="more"></a>
<h2 id="学习环境是-Mac-系统"><a href="#学习环境是-Mac-系统" class="headerlink" title="学习环境是 Mac 系统"></a>学习环境是 Mac 系统</h2></li>
</ul>
<p>安装最后自动初始化了一个数据库路径为 /usr/local/val/postgres</p>
<p>启动Postgresql<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl -D /usr/local/<span class="keyword">var</span>/postgres -l /usr/local/<span class="keyword">var</span>/postgres/server.log start</span><br></pre></td></tr></table></figure></p>
<p>停止Postgresql<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl -D /usr/local/<span class="keyword">var</span>/postgres stop -s -m fast</span><br></pre></td></tr></table></figure></p>
<p>新建一个数据库用户<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser weixinadmin -P</span><br></pre></td></tr></table></figure></p>
<p>为这个用户新建一个数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb database -O weixinadmin -E UTF8 -e</span><br></pre></td></tr></table></figure></p>
<p>用这个用户访问数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U weixinadmin -d weixindb -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p>
<p>PostgreSQL 数据库操作<br>显示已创建的数据库：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure></p>
<p>在不连接进 PostgreSQL 数据库的情况下，也可以在终端上查看显示已创建的列表：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -l</span><br></pre></td></tr></table></figure></p>
<p>连接数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c dbname</span><br></pre></td></tr></table></figure></p>
<p>显示数据库表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d</span><br></pre></td></tr></table></figure></p>
<p>创建一个名为 test 的表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test(id int, text VARCHAR(<span class="number">50</span>));</span><br></pre></td></tr></table></figure></p>
<p>插入一条记录<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test(id, text) VALUES(<span class="number">1</span>, <span class="string">'sdfsfsfsdfsdfdf'</span>);</span><br></pre></td></tr></table></figure></p>
<p>查询记录<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test WHERE id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>更新记录<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE test SET text = <span class="string">'aaaaaaaaaaaaa'</span> WHERE id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>删除指定的记录<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM test WHERE id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>删除表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE test;</span><br></pre></td></tr></table></figure></p>
<p>删除数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE dbname;</span><br></pre></td></tr></table></figure></p>
<p>或者利用 dropdb 指令，在终端上删除数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropdb -U user dbname</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建PHP开发环境]]></title>
      <url>https://qimajiang.com/2017/02/25/PHP%E5%B7%A5%E5%8C%A0%E5%8E%86%E9%99%A9%E8%AE%B0-%E5%BC%80%E5%90%AF%E7%AF%87-%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<ul>
<li>从本文开始，记录一直以来的 PHP 开发历程， 一方面，自己温故而知新； 另一方面，跟大家一起学习进步。 第一篇文章当然是搭建 PHP 开发环境啦。至于 PHP是什么，以及 PHP 能干什么等等的问题，我这不赘述，请自行 Google。<a id="more"></a>
<h2 id="在-Mac-系统搭建-LAMP开发环境。"><a href="#在-Mac-系统搭建-LAMP开发环境。" class="headerlink" title="在 Mac 系统搭建 LAMP开发环境。"></a>在 Mac 系统搭建 LAMP开发环境。</h2></li>
</ul>
<h4 id="一、-启动-Apache"><a href="#一、-启动-Apache" class="headerlink" title="一、 启动 Apache"></a>一、 启动 Apache</h4><p>  mac 系统自带 Apache 服务器;只需要知道如何启动即可。一个方法是通过终端启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure></p>
<p> 此时在浏览器中输入<a href="http://localhost，会出现It" target="_blank" rel="noopener">http://localhost，会出现It</a> works！的页面。<br> 另外的方法是：   打开”系统偏好设置”-&gt;”共享”，在”互联网共享”那一项前面打√。</p>
<h4 id="二、运行-PHP"><a href="#二、运行-PHP" class="headerlink" title="二、运行 PHP"></a>二、运行 PHP</h4><p>1、打开 Apache 的配置文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi httpd.conf</span><br></pre></td></tr></table></figure></p>
<p> 找到 #LoadModule php5_module libexec/apache2/libphp5.so 这一行； 把前面的# 删除；然后保存退出。如图：</p>
<p> <img src="https://ooo.0o0.ooo/2017/03/18/58cd43e5269e1.png" alt=""></p>
<p> 2、重启 Apache, 然后 PHP 即可正常使用。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure></p>
<p> 3、检验 PHP 是否正常。<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure></p>
<p> 是否看到 PHP 的版本信息；有的话证明已成功。如图：<br> <img src="https://ooo.0o0.ooo/2017/03/18/58cd44d33d068.png" alt=""></p>
<p>4、 关于更多 PHP 命令行，可以自行搜索学习。常用的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php -i  <span class="comment">#查看 php 的详细信息；跟 phpinfo()效果一致。</span></span><br><span class="line"></span><br><span class="line">php -i | grep php.ini <span class="comment">#查看 php.ini 所在位置。</span></span><br><span class="line"></span><br><span class="line">php -m <span class="comment">#查看 php 扩展模块的安装情况</span></span><br></pre></td></tr></table></figure></p>
<h4 id="三、安装-MYSQL"><a href="#三、安装-MYSQL" class="headerlink" title="三、安装 MYSQL"></a>三、安装 MYSQL</h4><p>1、在<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MYSQL</a>网站上，选择Mac OS X平台，然后选择图中的DMG格式下载<br><img src="https://ooo.0o0.ooo/2017/03/18/58cd467d93a38.png" alt=""><br>下载完后，自行安装。<br>2、修改 MYSQL 的密码；如设置密码为12345<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqladmin -u root password <span class="number">12345</span></span><br></pre></td></tr></table></figure></p>
<p>3、 关于 MYSQL 的 GUI 管理工具；本人推荐 <a href="https://www.sequelpro.com/" target="_blank" rel="noopener">sequel pro</a> ；其他工具自行下载安装。</p>
<h4 id="四、要想进行-PHP-开发，当然还要有编辑器，你可以选择自己喜欢的编辑器进行开发，但都推荐免费开源放工具，以免造成不要的麻烦。"><a href="#四、要想进行-PHP-开发，当然还要有编辑器，你可以选择自己喜欢的编辑器进行开发，但都推荐免费开源放工具，以免造成不要的麻烦。" class="headerlink" title="四、要想进行 PHP 开发，当然还要有编辑器，你可以选择自己喜欢的编辑器进行开发，但都推荐免费开源放工具，以免造成不要的麻烦。"></a>四、要想进行 PHP 开发，当然还要有编辑器，你可以选择自己喜欢的编辑器进行开发，但都推荐免费开源放工具，以免造成不要的麻烦。</h4><h2 id="Linux-安装-LAMP开发环境"><a href="#Linux-安装-LAMP开发环境" class="headerlink" title="Linux 安装 LAMP开发环境"></a>Linux 安装 LAMP开发环境</h2><p>  在这里推荐一步一步的进行安装，尤其的初学者，必须自己走一遍才知道如何安装，每个人出现的错误会不一样，在处理错误的过程一定会有收获。不建议，一开始为了省事，去使用<a href="https://lamp.sh/" target="_blank" rel="noopener">LAMP 一键安装脚本</a> ，当你完全掌握后，才推荐使用这种方法。由于 LINUX 的发行版本较多，这里以Centos7 系统为例子，其他发行版大同小异。</p>
<h4 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd httpd-devel</span><br></pre></td></tr></table></figure>
<h4 id="启动-Apache"><a href="#启动-Apache" class="headerlink" title="启动 Apache"></a>启动 Apache</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure>
<p>测试以下apache是否安装成功，打开浏览器，输入<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>， 是否显示apache的主页。</p>
<h4 id="安装MYSQL-mysql在centos7-0版本中被mariadb替代了。"><a href="#安装MYSQL-mysql在centos7-0版本中被mariadb替代了。" class="headerlink" title="安装MYSQL; mysql在centos7.0版本中被mariadb替代了。"></a>安装MYSQL; mysql在centos7.0版本中被mariadb替代了。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum isntall mysql mysql-server</span><br></pre></td></tr></table></figure>
<p>安装好了，选择修改mysql默认的root用户的密码，启动mysql服务。</p>
<h4 id="启动-MYSQL"><a href="#启动-MYSQL" class="headerlink" title="启动 MYSQL"></a>启动 MYSQL</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<h4 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64</span><br></pre></td></tr></table></figure>
<p>若要安装其它 PHP 版本，把56改成其它版本号即可。</p>
<h4 id="安装-php-fpm"><a href="#安装-php-fpm" class="headerlink" title="安装 php-fpm"></a>安装 php-fpm</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php56w-fpm</span><br></pre></td></tr></table></figure>
<h4 id="安装pear"><a href="#安装pear" class="headerlink" title="安装pear"></a>安装pear</h4><p>// 下载 go-pear 脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[arthur@arthur Downloads]$ wget http:<span class="comment">//pear.php.net/go-pear.phar</span></span><br><span class="line">php</span><br><span class="line"><span class="comment">// 先切换到root账户，避免指定安装目录的时候没有权限导致安装失败</span></span><br><span class="line">```bash</span><br><span class="line">[arthur@arthur Downloads]$ su</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure></p>
<p>// 执行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@arthur Downloads]$ php go-pear.phar</span><br></pre></td></tr></table></figure></p>
<p>#####配置pear命令 </p>
<p>安装完成后，默认只能使用 安装目录/bin/pear的方式使用命令，为了方便后续直接使用，我们还需要把pear的安装目录加到配置文件中 /etc/profile<br>输入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/opt/pear/bin:$PATH</span><br></pre></td></tr></table></figure></p>
<p>更新<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<h4 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h4><h1 id="下载composer-phar"><a href="#下载composer-phar" class="headerlink" title="下载composer.phar"></a>下载composer.phar</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https:<span class="comment">//getcomposer.org/installer | php</span></span><br></pre></td></tr></table></figure>
<h1 id="把composer-phar移动到环境下让其变成可执行"><a href="#把composer-phar移动到环境下让其变成可执行" class="headerlink" title="把composer.phar移动到环境下让其变成可执行"></a>把composer.phar移动到环境下让其变成可执行</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer -V</span><br></pre></td></tr></table></figure>
<p>测试 PHP 是否安装成功；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure></p>
<p>终端显示 PHP 的一些版本信息。</p>
<h4 id="安装PHP-对-MYSQL-的支持"><a href="#安装PHP-对-MYSQL-的支持" class="headerlink" title="安装PHP 对 MYSQL 的支持"></a>安装PHP 对 MYSQL 的支持</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php-mysql</span><br></pre></td></tr></table></figure>
<p>基本的开发环境就可以搭建好了。</p>
<h2 id="Windows-系统安装-LAMP-。哦，-我没用过-Windows-系统。个人建议开发还是尽量不要使用-Windows-了。当然非要在-Windows-上做开发的话，我这就不描述如何安装了。"><a href="#Windows-系统安装-LAMP-。哦，-我没用过-Windows-系统。个人建议开发还是尽量不要使用-Windows-了。当然非要在-Windows-上做开发的话，我这就不描述如何安装了。" class="headerlink" title="Windows 系统安装 LAMP 。哦， 我没用过 Windows 系统。个人建议开发还是尽量不要使用 Windows 了。当然非要在 Windows 上做开发的话，我这就不描述如何安装了。"></a>Windows 系统安装 LAMP 。哦， 我没用过 Windows 系统。个人建议开发还是尽量不要使用 Windows 了。当然非要在 Windows 上做开发的话，我这就不描述如何安装了。</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 开发环境是所有开发的基础，一定要稳扎稳打，静静的自己安装，不要偷懒哦！平时多上网查看其它的文章教程，每个人写的文章不一样。</p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> LAMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派搭建反向代理，实现远程管理]]></title>
      <url>https://qimajiang.com/2017/02/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<ul>
<li>本文记录如何在树莓派上实现反向代理，穿透内网进行远程登录和操作树莓派。本方法也适用于其他 Linux 系统和 mac osx<br>系统，但目录上有所区别。<a id="more"></a>
<h3 id="一、-必备条件"><a href="#一、-必备条件" class="headerlink" title="一、 必备条件"></a>一、 必备条件</h3><pre><code>1、具有公网 IP 的 vps 或者云主机。
2、一定的 Linux 知识背景。
3、树莓派。😆
</code></pre></li>
</ul>
<h3 id="二、SSH-反向代理-准备工作。"><a href="#二、SSH-反向代理-准备工作。" class="headerlink" title="二、SSH 反向代理 准备工作。"></a>二、SSH 反向代理 准备工作。</h3><ol>
<li><p>生成 ssh 密钥.在 pi 上输入以下命令（选用一个类似“&lt;你的名字&gt;@&lt;你的设备&gt;”这样可辨识的主机名，这里我们使用qmj@pi）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C qmj@pi</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 pi 上在输入以下命令。(比如我的 vps 的用户名是qmj@qmjIP)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub qmj@qmjIP</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3、由于 pi 的默认用户是 raspiberry ，所以要获取 pi 的 root 权限：执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></p>
<p>命令，修改root密码；</p>
<p>然后，编辑/etc/ssh/sshd_config文件，找到PermitRootLogin一行；如果之前执行过<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd --unlock root</span><br></pre></td></tr></table></figure></p>
<p>的话，这里可能会显示“without-passwd”什么的，把这行修改为“PermitRootLoginyes”，保存退出然后重启系统，root账号应该可以直接登录了。</p>
<h3 id="三、开启-ssh-反向代理"><a href="#三、开启-ssh-反向代理" class="headerlink" title="三、开启 ssh 反向代理"></a>三、开启 ssh 反向代理</h3><h4 id="我们一般的计算机状况"><a href="#我们一般的计算机状况" class="headerlink" title="我们一般的计算机状况"></a>我们一般的计算机状况</h4><table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">用户名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">192.168.1.A</td>
<td style="text-align:center">U_a</td>
<td style="text-align:left">目标 计算机，（即树莓派），在局域网中，可以访问 A</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">B.B.B.B</td>
<td style="text-align:center">U_b</td>
<td style="text-align:left">代理服务器（我们的 vps 或云主机），在外网中，无法访问 A</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">-</td>
<td style="text-align:center">U_c</td>
<td style="text-align:left">外部的计算机，比如公司的电脑，可以访问B，无法直接访问 A</td>
</tr>
</tbody>
</table>
<h4 id="设计方案："><a href="#设计方案：" class="headerlink" title="设计方案："></a>设计方案：</h4><p>在 A 机器上做到 B 机器的反向代理；在 B 机器上做正向代理本地端口转发</p>
<h4 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h4><p>•每台机器上都需要 SSH 客户端<br>• A、B 两台机器上需要 SSH 服务器端。通常是 openssh-server。<br>在 Ubuntu 上安装过程为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl-server</span><br></pre></td></tr></table></figure></p>
<p>其他系统版本，自行搜索安装。</p>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ol>
<li>建立 A 机器到 B 机器的反向代理【A 机器上操作】<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR &lt;port_b1&gt;:localhost:22 u_b@B.B.B.B</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2.</p>
<p>&lt;port_b1&gt; 为 B 机器上端口，用来与 A 机器上的22端口绑定。</p>
<ol start="3">
<li>建立 B 机器上的正向代理，用作本地转发。做这一步是因为绑定后的 端口只支持本地访问【B 机器上操作】<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNL "*:&lt;port_b2&gt;:localhost:&lt;port_b1&gt;' localhost</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>4.</p>
<p>&lt;port_b2&gt; 为本地转发端口，用以和外网通信，并将数据转发到 &lt;port_b1&gt;，实现可以从其他机器访问。<br>其中的*表示接受来自任意机器的访问。</p>
<ol start="5">
<li>现在在 C 机器上可以通过 B 机器 ssh 到 A 机器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p &lt;port_b2&gt; u_a@B.B.B.B</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>解决。</p>
<h2 id="关于-SSH-的参数使用说明。"><a href="#关于-SSH-的参数使用说明。" class="headerlink" title="关于 SSH 的参数使用说明。"></a>关于 SSH 的参数使用说明。</h2><p>SSH 参数解释<br>-f 后台运行<br>-C 允许压缩数据<br>-N 不执行任何命令<br>-R 将端口绑定到远程服务器，反向代理<br>-L 将端口绑定到本地客户端，正向代理</p>
<h3 id="还有就是vps-或云主机要开启自动端口转发。"><a href="#还有就是vps-或云主机要开启自动端口转发。" class="headerlink" title="还有就是vps 或云主机要开启自动端口转发。"></a>还有就是vps 或云主机要开启自动端口转发。</h3><p>vps上<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>
<p>找到GatewayPorts把前面的#去掉 后面改成yes</p>
<h2 id="四、autossh-反向代理"><a href="#四、autossh-反向代理" class="headerlink" title="四、autossh 反向代理"></a>四、autossh 反向代理</h2><h4 id="在上文中，我们已经能够在C-计算机通过-B-计算机访问-A-计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级-ssh-的代理工具，使用-autossh-这个工具。"><a href="#在上文中，我们已经能够在C-计算机通过-B-计算机访问-A-计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级-ssh-的代理工具，使用-autossh-这个工具。" class="headerlink" title="在上文中，我们已经能够在C 计算机通过 B 计算机访问 A 计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级 ssh 的代理工具，使用 autossh 这个工具。"></a>在上文中，我们已经能够在C 计算机通过 B 计算机访问 A 计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级 ssh 的代理工具，使用 autossh 这个工具。</h4><h4 id="我们先要安装-autossh。"><a href="#我们先要安装-autossh。" class="headerlink" title="我们先要安装 autossh。"></a>我们先要安装 autossh。</h4><p>在 pi 上操作<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install autossh</span><br></pre></td></tr></table></figure></p>
<p>然后输入命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 53457 -fNR 5000:localhost:22 mo@42.96.135.22</span><br></pre></td></tr></table></figure></p>
<p>就这样开启了反向代理，作用跟前面的一致。但，这里当代理连接断开后，会自动重连，不需要担心，突然连不上自己的 pi 了。</p>
<h4 id="但-我们的-pi-重启后，也是要输入上述-sutossh-的命令，为了更加自动化，把autossh-加入-开机启动里"><a href="#但-我们的-pi-重启后，也是要输入上述-sutossh-的命令，为了更加自动化，把autossh-加入-开机启动里" class="headerlink" title="但 我们的 pi 重启后，也是要输入上述 sutossh 的命令，为了更加自动化，把autossh 加入 开机启动里"></a>但 我们的 pi 重启后，也是要输入上述 sutossh 的命令，为了更加自动化，把autossh 加入 开机启动里</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/rc.local</span><br><span class="line">/bin/su -c '/usr/bin/autossh -M 33300 -fNR 5000:localhost:22 mo@21.15.196.22</span><br></pre></td></tr></table></figure>
<p>这才是完美解决。</p>
<h3 id="autossh-参数解释"><a href="#autossh-参数解释" class="headerlink" title="autossh 参数解释"></a>autossh 参数解释</h3><p>-M 53457 参数，负责通过5678端口监视连接状态，连接有问题时就会自动重连，<br> 去掉了一个-f参数，因为autossh本身就会在background运行。</p>
]]></content>
      
        
        <tags>
            
            <tag> 树莓派 raspberrypi </tag>
            
            <tag> autossh </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[objective-c初学笔记]]></title>
      <url>https://qimajiang.com/2017/02/21/objective-c%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>这是2014年在创业时打算开始做 ios 开发的学习笔记，拿过来，做些备忘。主要是 OC的一些基础知识，比较易懂。<a id="more"></a>
<h4 id="1-在objective-c中使用＃import-lt-gt-导入系统头文件，＃import””导入用户头文件-＃import可以保证头文件只被包含一次。"><a href="#1-在objective-c中使用＃import-lt-gt-导入系统头文件，＃import””导入用户头文件-＃import可以保证头文件只被包含一次。" class="headerlink" title="1. 在objective-c中使用＃import&lt;&gt;导入系统头文件，＃import””导入用户头文件,＃import可以保证头文件只被包含一次。"></a>1. 在objective-c中使用＃import&lt;&gt;导入系统头文件，＃import””导入用户头文件,＃import可以保证头文件只被包含一次。</h4></li>
</ul>
<h4 id="2-基本数据类型总结"><a href="#2-基本数据类型总结" class="headerlink" title="2.  基本数据类型总结"></a>2.  基本数据类型总结</h4><pre><code>2.1 基本数据类型分类 
    1) 整型 
        int，short int, long int 
    2) 浮点型 
        float, double 
    3) 字符型 
        char 
2.2 数据输出格式： 
    1) int 
        输出格式符：%i, %d, %o, %x 
       unsigned int 
        输出格式符：%u 
        short 
        输出格式符：%hi, %hd 
        unsigned short int 
        输出格式符：%hu 
        long int 
        输出格式符: %li, %ld 
        unsigned long int 
        输出格式符：%lu 
    2) float,double 
        输出格式符：%f, %e, %g 
       long double 
        输出格式符: %lf 
    3) char 

        输出格式符：%c,字符串为%s
</code></pre><h4 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h4><pre><code>循环语句：for, while, do while, break, continue

 分支：if, else, switch
</code></pre><h4 id="4-NSlog-函数：与printf-类似，向控制台输出信息。但它增加了时间戳等一些特性。"><a href="#4-NSlog-函数：与printf-类似，向控制台输出信息。但它增加了时间戳等一些特性。" class="headerlink" title="4. NSlog()函数：与printf()类似，向控制台输出信息。但它增加了时间戳等一些特性。"></a>4. NSlog()函数：与printf()类似，向控制台输出信息。但它增加了时间戳等一些特性。</h4><pre><code>例：向控制台输出hello world。 
</code></pre><p>   NSString *str = @”hello world”;<br>   NSLog(@”%@”, str);<br>   %@表示输出NSString类型； </p>
<p>   双引号的前面的@表示这双引号中的字符串应该作为cocoa的NSString元素来处理。</p>
<h4 id="5-布尔类型BOOL-值为YES-NO"><a href="#5-布尔类型BOOL-值为YES-NO" class="headerlink" title="#### 5. 布尔类型BOOL:值为YES,NO;"></a>#### 5. 布尔类型BOOL:值为YES,NO;</h4><h4 id="6-objective-c中的方括号："><a href="#6-objective-c中的方括号：" class="headerlink" title="6. objective-c中的方括号："></a>6. objective-c中的方括号：</h4><pre><code>1) 用于通知某个对象该做什么。 
2) 方括号内第一项是对象，其余部分是你需要对象执行的操作。 

3) 在objective-c中通知对象执行某种操作，称为发送消息。（也叫调用方法）
</code></pre><h4 id="7-标识符id-是一种泛型，用于表示任何种类的对象。"><a href="#7-标识符id-是一种泛型，用于表示任何种类的对象。" class="headerlink" title="7. 标识符id:是一种泛型，用于表示任何种类的对象。"></a>7. 标识符id:是一种泛型，用于表示任何种类的对象。</h4><h4 id="8-类声明-interface："><a href="#8-类声明-interface：" class="headerlink" title="8. 类声明@interface："></a>8. 类声明@interface：</h4><pre><code>例： 
@interface Circle:NSObject   //为Circle类定义接口；NSObject表示是父类。 
{//以下是数据成员 
   ShapeColor fillColor; 
   ShapeRect bounds; 
} 
//以下是方法声明 
-(void) setFillColor: (ShapeColor) fillColor;  //前面的短线表明这是方法声明 
                               //短线后面是方法的返回类型 
                               //接着是方法名 
//冒号后面是参数，其中(ShapeColor)是参数类型， 
fillColor是参数名 
-(void) setBounds:(ShapeRect) bounds; 
-(void) draw; 
//减号就是普通函数 
加号就是静态函数 

@end     //结束声明
</code></pre><h4 id="9-self，隐藏对象self对应于C中的this。"><a href="#9-self，隐藏对象self对应于C中的this。" class="headerlink" title="#### 9. self，隐藏对象self对应于C中的this。"></a>#### 9. self，隐藏对象self对应于C中的this。</h4><p>   Self-&gt;fillcolor来访问成员变量。</p>
<h4 id="10-调用写好的类和类函数："><a href="#10-调用写好的类和类函数：" class="headerlink" title="10. 调用写好的类和类函数："></a>10. 调用写好的类和类函数：</h4><pre><code>//创建新对象，使用缺省初始化函数 
Bank *bankDefault = [[Bank alloc] init]; 
//调用方法： 
[bank addAmount: 1]; 
[bank print]; 
// 释放对象： 

[bankDefault free];
</code></pre><h4 id="11-两个参数的方法："><a href="#11-两个参数的方法：" class="headerlink" title="11. 两个参数的方法："></a>11. 两个参数的方法：</h4><pre><code>-(void) setTire: (Tire *) tire  //声明 
  atIndex: (int) index; 
//使用 
[car setTire:tire atIndex:2]; 

objective-c高级特性：
</code></pre><h4 id="12-继承"><a href="#12-继承" class="headerlink" title="12. 继承"></a>12. 继承</h4><pre><code>Objective-c不支持多继承。 
Super 关键字：调用该类的父类； 

超类：父类的另一种说法。
</code></pre><h4 id="13-自定义NSLog-输出"><a href="#13-自定义NSLog-输出" class="headerlink" title="13. 自定义NSLog()输出:"></a>13. 自定义NSLog()输出:</h4><pre><code>在类中添加description方法就可以自定义NSLog()如何输出对象。 
@implementation Tire 
-(NSString *) description 
{ 
    Return (@”I am a tire.”); 
} 
Main() 
{ 
    NSLog(@”%@”,tire[0]); 

}
</code></pre><h4 id="13-Foundation-kit"><a href="#13-Foundation-kit" class="headerlink" title="13. Foundation kit:"></a>13. Foundation kit:</h4><pre><code>Cocoa是由两部分框架组成的：foundation kit [包括一些基础类]和 application kit.【包括用户接口对象和高级类】 
创建字符串： 
1） NSString *test; 
    test=[NSString stringWithFormat:@&quot;i&apos;m %d years old!&quot;,23]; 
    若在声明方法时在方法前面添加了加号，那就表示把这个方法定义为类方法【这个方法属于类对象，而不是类的       实例对象。 
NSArray类：可以存放任意类型的对象. 
它有两个限制： 
    1. 它只能存储objective-c的对象，但不能存储C中的基本数据类型，如int , float, enum, struct等。 
    2.不能存储nil(对象的零值或NULL值)；【因为在创建NSArray时，要在列表结尾添加nil代表列表结束。】 
2） 创建NSArray： 
    NSArray *array; 
    array=[NSArray arrayWithObjects:@&quot;one&quot;,@&quot;two&quot;,nil];  
    NSString, NSMutableString类； 
    NSString是不可变的，即一旦创建完成，就不能通过删除字符或添加字符的方式来改变它； 
    而NSMutableString是可变的。 
    NSArray, NSMutableArray类； 
    NSEnumerator枚举； 
    NSEnumerator *enum; 
    enum=[array objectEnumerator]; 
    Id thingie; 
    While(thingie=[enumerator nextObject]){} 
    NSDictionary:字典（关键字及其定义的集合。）【也成为散列表，关联数组】，NSMutableDictionary类； 
    NSNumber:用来包装基本数据类型，如int ,char, float, bool;【将一个基本类型的数据包装成对象叫做装箱。】 
    NSValue:它可以包装任何类，NSNumber是它的子类。 
    NSNull: 
    在cocoa中看到“CF”字样时，就表示它是苹果公司的Core Foundation 框架相关的内容。 

    NSAutoreleasePool:自动释放内存池。
</code></pre><h4 id="14-内存管理"><a href="#14-内存管理" class="headerlink" title="14. 内存管理"></a>14. 内存管理</h4><pre><code>每个对象都有一个与之关联的引用计数（也叫保留计数） 
当使用alloc, new 方法或通过 copy消息（生成接收对象的一个副本）创建一个对象时，对象的引用计数值被设为1； 
给对象发retain消息时，增加该值； 
发送release消息时，减少该值； 
当一个对象的引用计数值变为0时，objective-c会自动向对象发送一条dealloc消息。销毁该对象。 
你可以在自己的对象中重写该方法， 
使用retainCount消息，可以获取引用计数器的值。 
-(id) retain; 
-(void) release; 
-(unsigned) retainCount;     
自动释放池：autorelease pool; 
创建： 
NSAutoreleasePool *pool; 
pool=[[NSAutoreleasePool alloc] init]; 
销毁： 
[pool release]; 
注意：xcode自动生成的代码，销毁pool池时，使用的是[pool drain],drain方法只是清空释放池，但不销毁pool.所以      在自己编写代码时还是使用 
release. 
而且，drain只适用于MAC OS 10.4以上的版本，而release适用于所有版本。 
只有在向某个对象发送autorelease消息时，该对象才会添加到NSAutoreleasepool中，才会被自动释放。 
如：[car autorelease]; 
内存管理黄金准则： 
    只有通过alloc, new和 copy方法创建的对象，才需要程序员负责向该对象发送release或autorelease消息。 
而通过其他方法获得的对象，则默认为已经被设置为自动释放，所以不需要程序员做任何操作了。 
在objective-c 2.0中有垃圾回收机制， 
如果要对某个项目使用垃圾回收： 
项目信息--build选项卡--查询&quot;garb&quot;,出现“objective-c Garbage Collection”,将其值设置为“required[-fobjc-gc-only]”
启用垃圾回收后，通常的内存管理命令全都变成了空操作指令，不执行任何操作。 

开发iphone软件，不能使用垃圾回收。
</code></pre><h4 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h4><pre><code>对象初始化 
两种创建新对象的方法： 
[类名 new] 
[[类名 alloc] init] 
这两种方法是等价的，但cocoa的惯例是使用后者。 
alloc在为对象分配空间的同时，将这块内存初始化为0； 
Init方法：初始化实例变量，使对象处于可用状态。[返回类型为id,  返回的值描述了被初始化的对象] 
使用new创建新对象时，系统要完成两个步骤： 
    1.  为对象分配内存，即对象获得一个用来存放其实例变量的内存块； 

    2.  自动调用init方法，让该对象处于可用状态。
</code></pre><h4 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h4><pre><code>objective-c 2.0的新特性【只适用于mac os x10.5及以上】 
@property :表示声明了对象的属性。这样就不用再写属性的访问器了。 
（他有copy, retain, readwrite, readonly等属性） 

点表达式
</code></pre><h4 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h4><pre><code>类别 
类别（category）是一种为现有的类添加新方法的方式。 
类别的声明： 
@interface NSString (NumberConvenience) //类名 （类别名） 
-(NSNumber) lengthAsNumber;            //扩充方法声明 
@end 
使用时使用原来的类名，就可以调用他的所有类别中的方法。 
类别的局限性： 
    1.    不能向类中添加新的实例变量； 
    2.    在类别中的方法若与类中现有的方法重名，则类中的方法不可用，被类别中的新方法取代。 
类别的作用： 
    1.    将类的实现分散到多个文件或框架中； 
    2.    创建对私有方法的前向引用； 
【Cocoa中没有真正的私有方法，则实现私有方法类似功能的方法为： 
先在类别中声明方法；然后到现有类的实现中实现该方法。 
这样这个类中的其他方法可以使用该方法，而其他外部的类就不会知道该方法的存在了。】 
    3.    向对象添加非正式协议。 
    【创建一个NSObject的类别称为创建一个非正式协议。】 
    委托delegate是一种对象，另一个类的对象会要求委托对象执行它的某些操作。 
    受委托对象在某个时间（某个事件触发）时，会自动通知委托对象执行委托方法。 
    选择器：@selector（）:选择器只是一个方法名称，但它以objective-c运行时使用的特殊方式编码，以快速执行查                询。圆括号中的内容是方法名。 
    所以Car类的setEngine:方法的选择器是：@selector（setEngine: 
    受委托对象如何知道其委托对象是否能处理它（受委托对象）发送给它（委托对象）的消息？ 

，受委托对象先检查委托对象，询问其是否能响应该选择器。如果能，则向它发送消息。
</code></pre><h4 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h4><pre><code>协议： 
正式协议是一个命名的方法列表。 
采用协议意味着必须实现该协议的所有方法。否则，编译器会发出警告。 
正式协议就像JAVA中的接口一样。 
声明协议： 
@protocal NSCopying 
- (id) copywithzone:(NSZone *) zone; //方法列表 
@end 
采用协议： 
@interface Car:NSObject &lt;NSCopying,NSCoding&gt; //中括号中是要实现的协议列表 
{//实例变量列表} 
//方法列表 
@end 
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web 入门必看指南]]></title>
      <url>https://qimajiang.com/2017/02/20/web-%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<ul>
<li>整理本人从零开始学 web 开发的资料，和一些学习心得。<a id="more"></a>
<h3 id="一-开发环境搭建"><a href="#一-开发环境搭建" class="headerlink" title="一.   开发环境搭建"></a>一.   开发环境搭建</h3></li>
</ul>
<ol>
<li>wndows下可以使用集成的web服务器，推荐wampserver</li>
</ol>
<p>下载地址：<a href="http://pan.baidu.com/s/1qWA0KRq" target="_blank" rel="noopener">http://pan.baidu.com/s/1qWA0KRq</a> </p>
<p>（1）Wampserver的安装，一路next下去。</p>
<p>（2）过程中出现选择默认浏览器的操作，可以选择取消。</p>
<p>（3）wampserver安装完成后，点击打开。找到www目录，这就是网页文件存放的地方。</p>
<p>（4）关于phpmyadmin的使用，稍后再数据库mysql的部分介绍。</p>
<p>（5）Windows的数据库管理工具还可以使用 navicat 软件。使用在后面介绍。</p>
<p>（6）访问本地网站，在浏览器输入<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> </p>
<ol start="2">
<li>在linux下，以ubuntu系统为例子。（推荐使用ubuntu）</li>
</ol>
<p>(1)安装很简单，打开终端。输入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install  apache2 mysql-server mysql-client php5 php5-gd php5-mysql</span><br></pre></td></tr></table></figure></p>
<p>(2) 调整默认Web目录权限<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">777</span>  -R /<span class="keyword">var</span>/www/html</span><br></pre></td></tr></table></figure></p>
<p>(3) Apache 配置</p>
<p>启用 mod_rewrite 模块:终端命令：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure></p>
<p>(4) 重启Apache服务器：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></p>
<p>(5)数据库管理软件 phpmyadmin 安装<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span><br></pre></td></tr></table></figure></p>
<p>（6） 安装时要求选择Web server：apache2或lighttpd，选择apache2，设置Mysql数据库密码。然后连接phpmyadmin与apache2，以我的为例：www在/var/www/html，phpmyadmin在/usr/share /phpmyadmin目录，用命令：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/share/phpmyadmin /<span class="keyword">var</span>/www/html 建立连接。</span><br></pre></td></tr></table></figure></p>
<p>（7）phpmyadmin测试，在浏览器中打开<a href="http://localhost/phpmyadmin" target="_blank" rel="noopener">http://localhost/phpmyadmin</a></p>
<p>更多关于phpmyadmin的用法在数据库部分介绍。</p>
<p>（8）访问本地网站在浏览器输入<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> </p>
<h3 id="二-编辑器的选择与使用"><a href="#二-编辑器的选择与使用" class="headerlink" title="二. 编辑器的选择与使用"></a>二. 编辑器的选择与使用</h3><ol>
<li><p>如果有编程的经历，可以使用自己熟悉的编辑器或者IDE</p>
</li>
<li><p>前端开发，可以使用vim. sublime. notepad++. editplus。</p>
</li>
<li><p>php开发，可以使用 上面所说的编辑器。也可以用php的IDE，例如PHPstorm。</p>
</li>
<li><p>各编辑器的使用可以参考网上的一些教程。只要一个原则，适合自己的编辑器才是最好的编辑器。</p>
</li>
<li><p>各编辑器的下载大家自己从网上下载。</p>
</li>
</ol>
<h3 id="三-SVN的使用，下载地址-http-pan-baidu-com-s-1bntqrk7-，此针对windows系统。"><a href="#三-SVN的使用，下载地址-http-pan-baidu-com-s-1bntqrk7-，此针对windows系统。" class="headerlink" title="三. SVN的使用，下载地址 http://pan.baidu.com/s/1bntqrk7  ，此针对windows系统。"></a>三. SVN的使用，下载地址 <a href="http://pan.baidu.com/s/1bntqrk7" target="_blank" rel="noopener">http://pan.baidu.com/s/1bntqrk7</a>  ，此针对windows系统。</h3><ol>
<li><p>SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS. CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。</p>
</li>
<li><p>更多关于svn的使用教程，参考 <a href="http://pan.baidu.com/s/1hq7ZqIw" target="_blank" rel="noopener">http://pan.baidu.com/s/1hq7ZqIw</a>  上面的文档。</p>
</li>
<li><p>svn的好处就是一个团队的协作开发得到更好的控制，而且防止不可抗因素的出现导致源代码丢失。当然还可以使用github。</p>
</li>
</ol>
<h3 id="四-ubuntu系统下SVN的安装与使用"><a href="#四-ubuntu系统下SVN的安装与使用" class="headerlink" title="四. ubuntu系统下SVN的安装与使用"></a>四. ubuntu系统下SVN的安装与使用</h3><ol>
<li>安装svn客户端：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install subversion，然后根据提示一步一步，就完成了svn</span><br><span class="line">```php</span><br><span class="line"></span><br><span class="line">的安装。当然，也可以源码安装svn，下载subversion一个最新版本的源码包，解压之后就可以安装了。 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  新建一个目录，cd 到新建目录下，将文件checkout到本地目录：</span><br><span class="line">```php</span><br><span class="line">svn checkout</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>svn://192.168.100.249/server ，按提示输入相应的用户名和密码。 3.  可以输入：svn help 来查看svn提供的命令。 </p>
<ol start="4">
<li><p>往版本库中添加新的文件，例如: svn add *.c (添加当前目录下所有的c文件)。 5.  将改动的文件提交到版本库，例如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m “add test file <span class="keyword">for</span> my test“  test.c 。</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件，例如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn delete svn:<span class="comment">//192.168.100.249/server/common/test.c -m “delete test file” 。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果哪个命令不会使用可以通过输入：svn help 命令 的形式来查看帮助信息，例如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn help chechout  输出信息如下： </span><br><span class="line"></span><br><span class="line">checkout (co): Check out a working copy from a repository. usage: checkout URL[@REV]... [PATH]</span><br></pre></td></tr></table></figure>
</li>
<li><p>更多关于ubuntu的svn使用，参考 <a href="http://pan.baidu.com/s/1mgxbHGW" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgxbHGW</a> </p>
</li>
</ol>
<h3 id="五-编程过程"><a href="#五-编程过程" class="headerlink" title="五. 编程过程"></a>五. 编程过程</h3><ol>
<li>不管哪种编程都应该学会当遇到困难时，可先百度. 谷歌. 知网. 知乎；还可以加入一些对应的Q群，必要时询问Q群的大神；确实不行就跟团队成员交流。网上搜索，我十分推荐去谷歌搜索问题的解决办法，此处分享一个能上谷歌的番茄神器。 Hoststool。此处贴出windows的版本</li>
</ol>
<p><a href="http://pan.baidu.com/s/1jGtccf0" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGtccf0</a>  使用方法按照上面的提示操作。</p>
<p>关于其他操作系统的可以去官网下载，地址：</p>
<p><a href="https://hosts.huhamhire.com/" target="_blank" rel="noopener">https://hosts.huhamhire.com/</a></p>
<ol start="3">
<li>这里也给出集成了翻墙软件的谷歌浏览器， 地址</li>
</ol>
<p>链接：<a href="http://pan.baidu.com/s/1c05zAqW" target="_blank" rel="noopener">http://pan.baidu.com/s/1c05zAqW</a>  密码：n3j9</p>
<ol start="4">
<li><p>由于web开发的运行环境就是平时使用的浏览器。至于使用哪个浏览器，在这我建议 谷歌浏览器 chrome ，还有火狐浏览器。若是前端开发，需要测试网站兼容性的，可以使用其他浏览器查看，但debug的功能最好在chrome或者火狐浏览器完成。</p>
</li>
<li><p>谷歌浏览器和火狐浏览器的前端debug使用方法，可以再网上搜索，在这里不再叙述。</p>
</li>
</ol>
<h3 id="六-开发建议，所有语言教程，建议查看官方开发手册。"><a href="#六-开发建议，所有语言教程，建议查看官方开发手册。" class="headerlink" title="六. 开发建议，所有语言教程，建议查看官方开发手册。"></a>六. 开发建议，所有语言教程，建议查看官方开发手册。</h3><ol>
<li>关于html，css和JavaScript的入门和使用教程，推荐去W3CSchool这个网站学习 ，网址<a href="http://www.w3cschool.cc/" target="_blank" rel="noopener">http://www.w3cschool.cc/</a></li>
</ol>
<p>也可以下载离线版本 <a href="http://pan.baidu.com/s/1kTj6DwF" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTj6DwF</a></p>
<ol start="2">
<li>为了能快速开发，在开发过程中推荐使用前端框架，避免不必要的代码重复书写工作，加快项目进度。现在大多数网站采用bootstrap 这个前端框架 ，网址 <a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a>  至于这是什么样的框架和使用教程可以参考官网，不再叙述。</li>
</ol>
<p>还有AmazeUI 这个框架，使用教程参考官网 ，网址：<a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></p>
<p>*注：至于实际开发采用哪一个，看实际需要。</p>
<ol start="3">
<li>JavaScript的使用可以参考w3cschool 网站的教程。</li>
</ol>
<p>网址：<a href="http://www.w3cschool.cc/" target="_blank" rel="noopener">http://www.w3cschool.cc/</a> ，前端开发者，要熟悉使用jquery，还有封装项目中使用到的JavaScript 类库。</p>
<ol start="4">
<li><p>PHP教程，同样可以在w3cschool 网站找到。推荐查看php官网的手册，离线版本下载 <a href="http://pan.baidu.com/s/1hhhaY" target="_blank" rel="noopener">http://pan.baidu.com/s/1hhhaY</a>  ，这里还有php的基础教程，仅供参考<a href="http://pan.baidu.com/s/1eQy9SMu" target="_blank" rel="noopener">http://pan.baidu.com/s/1eQy9SMu</a></p>
</li>
<li><p>PHP框架，比如，国内的thinkphp 国产中较好的之一，网址：<a href="http://www.thinkphp.cn/" target="_blank" rel="noopener">http://www.thinkphp.cn/</a> 国外的laravel ，最受欢迎的，网址：<a href="http://laravel.com/" target="_blank" rel="noopener">http://laravel.com/</a> 。选择哪一个框架要结合项目开发需求和自己的开发经验。</p>
</li>
</ol>
<p>学习框架的最好方法就是不断看手册和逛官方社区</p>
<ol start="6">
<li>mysql教程，同样可以在w3cschool 网站找到。推荐查看mysql官网的手册，离线版本下载</li>
</ol>
<p><a href="http://pan.baidu.com/s/1pJqPW1P" target="_blank" rel="noopener">http://pan.baidu.com/s/1pJqPW1P</a>  </p>
<p>（1）     无论在windows还是ubuntu中，都可以使用数据库图形管理工具 phpmyadmin 。phpmyadmin的使用教程</p>
<p><a href="http://pan.baidu.com/s/10JWtC" target="_blank" rel="noopener">http://pan.baidu.com/s/10JWtC</a> </p>
<p>（2）     在windows中，我们还可以使用navicat for mysql 这个数据库图形管理工具 ，下载地址<a href="http://pan.baidu.com/s/1m6N1c" target="_blank" rel="noopener">http://pan.baidu.com/s/1m6N1c</a>  使用方法跟phpmyadmin差不多，但功能会多很多，自行探讨。</p>
<p>（3）     数据库的开发可能需要用到建模工具，此处给出一个叫powerdesigner 的软件，下载地址：<a href="http://pan.baidu.com/s/1o6MGgXk" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6MGgXk</a>  使用教程自行查询。</p>
<ol start="7">
<li>Git 的使用指南。 <a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/index.zh.html</a> 最开始我是使用 SVN 进行代码托管，后来改用 Git.两者的优缺点在这就不描述，看个人喜好。</li>
</ol>
<h3 id="七-总结"><a href="#七-总结" class="headerlink" title="七. 总结"></a>七. 总结</h3><ol>
<li><p>不管做什么编程，都应该以实践为主，不要一直捧着书本或者一直看别人的视频，自己看懂了却不去动手敲代码。</p>
</li>
<li><p>以上的教程仅作参考，软件涉及到32位和64位的问题时，自行解决。</p>
</li>
<li><p>web编程中，不管是专注前端还是后台，都应该去了解自己未负责的部分，互相渗透。</p>
</li>
<li><p>若发现错漏之处，欢迎提出。</p>
</li>
</ol>
<h2 id="希望大家技术猛进！"><a href="#希望大家技术猛进！" class="headerlink" title="希望大家技术猛进！"></a>希望大家技术猛进！</h2>]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 入门指南 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac下 搭建Cordova+ionic+AngularJs开发环境]]></title>
      <url>https://qimajiang.com/2017/02/20/mac%E4%B8%8B-%E6%90%AD%E5%BB%BACordova-ionic-AngularJs%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<ul>
<li>简单介绍如何在 mac 下安装 ionic 开发环境，以及创建项目<a id="more"></a>
<h3 id="一、下载安装node-js"><a href="#一、下载安装node-js" class="headerlink" title="一、下载安装node.js"></a>一、下载安装node.js</h3></li>
</ul>
<p>下载node.js for mac</p>
<pre><code>![](https://ooo.0o0.ooo/2017/02/20/58aaedbabb0c2.png)
</code></pre><p>​​​​​</p>
<p>一路点击 next</p>
<h3 id="二、安装cordova和ionic"><a href="#二、安装cordova和ionic" class="headerlink" title="二、安装cordova和ionic"></a>二、安装cordova和ionic</h3><p>sudo npm install -g cordova ionic</p>
<h3 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h3><p>ionic start ionApp blank</p>
<h3 id="四、打包"><a href="#四、打包" class="headerlink" title="四、打包"></a>四、打包</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic platform add ios</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> mac系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3安装 Docker记录]]></title>
      <url>https://qimajiang.com/2017/02/18/%E6%A0%91%E8%8E%93%E6%B4%BE3%E5%AE%89%E8%A3%85-Docker%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ul>
<li>今天有空就查询一下在树莓派如何安装 docker，边安装边记录了一下。<a id="more"></a>
</li>
</ul>
<p>树莓派3下安装 docker 记录</p>
<p>关于 docker 的介绍请自行查询  <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p>
<p>直接在树莓派3运行命令</p>
<p><img src="https://ooo.0o0.ooo/2017/02/18/58a866da23ed6.png" alt=""></p>
<p>很好, 提示我已经安装了最新的版本, 那就运行一下吧:</p>
<p><img src="https://ooo.0o0.ooo/2017/02/18/58a8677b77222.png" alt=""></p>
<p>奇怪了, 说是找不到命令, 那就看看安装到哪里去了:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~<span class="comment"># whereis docker</span></span><br><span class="line">docker:</span><br></pre></td></tr></table></figure></p>
<p>没有找到关于 docker 的可执行文件, 而用 whereis 命令查找 git  的输出如下:</p>
<p>oot@raspberrypi:~# whereis git<br>git: /usr/bin/git /usr/share/man/man1/git.1.gz<br>那么用 find 搜索一下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~<span class="comment"># find / -name docker</span></span><br><span class="line">/usr/share/menu/docker</span><br><span class="line">/usr/share/doc/docker</span><br></pre></td></tr></table></figure></p>
<p>看起来都不是一个独立的软件包的样子, 那么我们用 apt-cache search 命令看看是否还有其他以 docker 为名的软件，发现 docker 跟 raspbian 系统下的一个系统托盘应用重名了, 我们要找的容器 docker 是 docker.io, 那么试着安装一下:</p>
<p><img src="https://ooo.0o0.ooo/2017/02/18/58a867cf78e39.png" alt=""></p>
<p> 顺利安装完毕, 测试是否成功:<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~<span class="comment"># docker --version</span></span><br><span class="line"></span><br><span class="line">Docker version <span class="number">1.3</span><span class="number">.3</span>, build d344625</span><br></pre></td></tr></table></figure></p>
<p> Good, 现在已经成功地在 raspi3 系统上安装了一个 docker, 之后就可以在 docker 进行操作了.</p>
<p>启动我们的 docker 守护进程:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@raspberrypi:~<span class="comment"># docker -d</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span>/<span class="number">02</span>/<span class="number">18</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">25</span> docker daemon: <span class="number">1.3</span><span class="number">.3</span> d344625; execdriver: native; graphdriver:</span><br><span class="line">[<span class="number">143</span>dcfc4] +job serveapi(unix:<span class="comment">///var/run/docker.sock)</span></span><br><span class="line"><span class="number">2017</span>/<span class="number">02</span>/<span class="number">18</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">25</span> pid file found, ensure docker is not running <span class="keyword">or</span> delete /<span class="keyword">var</span>/run/docker.pid</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 树莓派 raspberrypi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo常用命令]]></title>
      <url>https://qimajiang.com/2017/02/17/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li>备忘常用 hexo 的命令。<a id="more"></a>
</li>
</ul>
<ol>
<li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>
<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</li>
</ol>
<p>###其他命令</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init </span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="string">"articleName"</span></span><br><span class="line">$ hexo <span class="keyword">new</span> page <span class="string">"pageName"</span></span><br></pre></td></tr></table></figure>
<h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g <span class="comment">#生成部署</span></span><br><span class="line">$ hexo s -g <span class="comment">#生成预览</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> hexo命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinkphp微信支付开发坑]]></title>
      <url>https://qimajiang.com/2017/01/23/Thinkphp%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E5%9D%91/</url>
      <content type="html"><![CDATA[<ul>
<li>介绍如何在ThinkPHP中引入微信支付，并成功记录附加信息。<a id="more"></a>
<h2 id="本文针对的是-微信支付V3"><a href="#本文针对的是-微信支付V3" class="headerlink" title="本文针对的是 微信支付V3"></a>本文针对的是 微信支付V3</h2></li>
</ul>
<h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><p>首先得有一个已认证的服务号。还要去申请开通微信支付（当然如果只是想玩玩可以申请测试公众号）。记录各种 key 和 secret。配置好 JS SDK 的域名、授权域名（OAuth2）、支付测试目录、支付目录，如果是有第三方托管的还要对接服务器。具体自行 搜索。</p>
<h4 id="二、库引入"><a href="#二、库引入" class="headerlink" title="二、库引入"></a>二、库引入</h4><p>下载官方的 DEMO ，整合到自己的项目中。我用的是 thinkphp 框架，一般把微信支付 SDK放到Vendor中。（也可以放项目根目录）。</p>
<h4 id="三、微信支付发起"><a href="#三、微信支付发起" class="headerlink" title="三、微信支付发起"></a>三、微信支付发起</h4><p>业务逻辑挺简单的，后台引入 SDK和配置文件。统一下单等等。这些 DEMO 里都有。不累赘了。</p>
<h4 id="四、支付那些坑"><a href="#四、支付那些坑" class="headerlink" title="四、支付那些坑"></a>四、支付那些坑</h4><p>有三种方式查询支付状态，1、异步通知：每次支付成功后会有通知返回，只有成功处理通知，微信才会停止发送，但不确保一定成功回调。这里的坑就是接受通知的地址一定要直接访问到。举个例子：开发过程中，我尝试把处理通知的文件放在 thinkphp 的控制器中，发现就是收不到通知，后来放到根目录，就行了。我不知道是不是一定要放在根目录，但我知道放在根目录一定可以。但如果开发过程需要带上其他参数，比如我这次的流程是先根据输入查询用户数据，接着微信支付，支付完需要加上之前查询到参数，一起发给充值平台。在一开始我一直想用 SESSION 和数据库存储充值参数，但由于支付完成后是一个异步操作，用 SESSION 会造成 SESSION 无效；用数据库存储会有很大开销或者有数据原子性的问题出现，所以就要好好研究统一下单时的那些参数，你会发现一个 attach 这个参数，先把参数发给微信，微信在支付通知返回时一起带回来，就避免上述的问题。<br>2、前端 JS 返回：在每次支付时或支付完成后，前端会有一个回调，来查询支付状态。但有一个问题就是，每次支付完成后，用户必须点击右上角“完成”按钮，才会回调，这样的体验很不好，这个只能作为非必须功能或者返回首页之类。<br>3、主动查询：用订单号无主动查询订单状态，这个应用场景不适合连贯性很强的支付操作过程。</p>
<h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p>1、多看博文和社区的讨论；<br>2、每一步都要有日志，方便查 BUG<br>3、做好数据过滤，支付通知可能在成功处理后还是会发过来，那么就要做好忽略，避免加大开销。<br>4、安全方面，有表单的地方一定要做好数据过滤；防止 SQL 注入和 XSS 攻击等。<br>5、涉及到真金白银的程序一定要多做测试，毕竟上线后如果没支付就交易成功或者支付完又没交易；就 呵呵了。</p>
<ul>
<li>我用的 微信 SDK ，<a href="http://pan.baidu.com/s/1c1GlrtY" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1GlrtY</a>  密码：44sp</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu64位安装32位依赖库，并安装njit-client]]></title>
      <url>https://qimajiang.com/2017/01/23/ubuntu64%E4%BD%8D%E5%AE%89%E8%A3%8532%E4%BD%8D%E4%BE%9D%E8%B5%96%E5%BA%93%EF%BC%8C%E5%B9%B6%E5%AE%89%E8%A3%85njit-client/</url>
      <content type="html"><![CDATA[<ul>
<li>自从Ubuntu12.04之后，就移除了32位的库，当时为了安装校园网的客户端，就不得不安装32位的库。<a id="more"></a>
###这是很早之前的文章了，当时为了破解学校的网络客户端。<br>####方法一:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">cd /etc/apt/sources.<span class="keyword">list</span>.d</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse"</span> &gt;ia32-libs-raring.<span class="keyword">list</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ia32-libs</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>PS:这种方法肯定能安装上ia32-libs，但由于添加的是13.04的源，所以有没有混淆暂时不清楚，<br>网上也有很多用新立德软件包管理器这样做；够狠，你就这么干。也可以这么安装了ia32-libs后，<br>把/etc/apt/sources.list.d目录下的ia32-libs-raring.list删掉，然后再sudo apt-get update</p>
<p>####方法二:<br>切换至中科大的源 <a href="http://uestc.edu.cn" target="_blank" rel="noopener">http://uestc.edu.cn</a><br> 然后<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> apt-get update</span><br><span class="line">apt-get install ia32-libs</span><br></pre></td></tr></table></figure></p>
<p>如果终端出现:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">错误 http:<span class="comment">//archive.ubuntu.com/ubuntu/ raring/main libgd2-xpm i386 2.0.36~rc1~dfsg-6.1ubuntu1  *</span></span><br><span class="line">  <span class="number">404</span>  Not Found [IP: <span class="number">91.189</span><span class="number">.91</span><span class="number">.23</span> <span class="number">80</span>] *</span><br><span class="line">错误 http:<span class="comment">//archive.ubuntu.com/ubuntu/ raring/main libgphoto2-port0 i386 2.4.14-2</span></span><br><span class="line">* </span><br><span class="line">  <span class="number">404</span>  Not Found [IP: <span class="number">91.189</span><span class="number">.91</span><span class="number">.23</span> <span class="number">80</span>] *</span><br><span class="line">错误 http:<span class="comment">//archive.ubuntu.com/ubuntu/ raring/main libgphoto2-2 i386 2.4.14-2</span></span><br><span class="line">*</span><br><span class="line">  <span class="number">404</span>  Not Found [IP: <span class="number">91.189</span><span class="number">.91</span><span class="number">.23</span> <span class="number">80</span>] *---------------------------------------</span><br><span class="line">E: 无法下载 http:<span class="comment">//archive.ubuntu.com/ubuntu/pool/main/libg/libgd2/libgd2-xpm_2.0.36~rc1~dfsg-6.1ubuntu1_i386.deb  404  Not Found [IP:</span></span><br><span class="line">* <span class="number">91.189</span><span class="number">.91</span><span class="number">.23</span> <span class="number">80</span>] *------</span><br><span class="line">E: 无法下载 http:<span class="comment">//archive.ubuntu.com/ubuntu/pool/main/libg/libgphoto2/libgphoto2-port0_2.4.14-2_i386.deb  404  Not Found [IP: 91.189.91.23 80]*</span></span><br><span class="line">E: 无法下载 http:<span class="comment">//archive.ubuntu.com/ubuntu/pool/main/libg/libgphoto2/libgphoto2-2_2.4.14-2_i386.deb  404  Not Found [IP: 91.189.91.23 80]    *</span></span><br><span class="line">E: 有几个软件包无法下载，您可以运行 apt-get update 或者加上 --fix-missing 的选项再试试？</span><br><span class="line">*</span><br></pre></td></tr></table></figure></p>
<p>自己去网上搜索这三个包,然后安装.<br>或者使用以下网址:</p>
<p><a href="https://packages.debian.org/wheezy/i386/libgphoto2-port0/download" target="_blank" rel="noopener">https://packages.debian.org/wheezy/i386/libgphoto2-port0/download</a></p>
<p><a href="https://packages.debian.org/wheezy/i386/libgphoto2-2/download" target="_blank" rel="noopener">https://packages.debian.org/wheezy/i386/libgphoto2-2/download</a></p>
<p><a href="https://launchpad.net/ubuntu/raring/i386/libgd2-xpm/2.0.36~rc1~dfsg-6.1ubuntu1" target="_blank" rel="noopener">https://launchpad.net/ubuntu/raring/i386/libgd2-xpm/2.0.36~rc1~dfsg-6.1ubuntu1</a></p>
<p>安装后再执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ia32-libs</span><br></pre></td></tr></table></figure></p>
<p>没有意外应该装上了.</p>
<p>ps:附上缺失的三个包的百度云。。。链接   <a href="http://pan.baidu.com/s/1kTJz8k3" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTJz8k3</a></p>
<p>原文地址：<a href="http://blog.csdn.net/moxxun/article/details/45129833" target="_blank" rel="noopener">http://blog.csdn.net/moxxun/article/details/45129833</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云和又拍云的比较]]></title>
      <url>https://qimajiang.com/2017/01/22/%E4%B8%83%E7%89%9B%E4%BA%91%E5%92%8C%E5%8F%88%E6%8B%8D%E4%BA%91%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<ul>
<li><strong>又拍云</strong>：老牌静态存储服务商，自带有CDN。存储空间可以弹性增加。费用计算公式(空间和流量)，请求次数是免费。可免费试用7天。开源的程序(DZ,PW,WP)都有插件，也可以直接使用FTP，对于技术上要求不是太高就可以使用。<strong>七牛</strong>：10GB永久免费存储空间,每月10GB下载流量,10万次Put<a id="more"></a>
</li>
</ul>
<p><strong>又拍云</strong>：老牌静态存储服务商，自带有CDN。存储空间可以弹性增加。费用计算公式(空间和流量)，请求次数是免费。可免费试用7天。开源的程序(DZ,PW,WP)都有插件，也可以直接使用FTP，对于技术上要求不是太高就可以使用。</p>
<p><strong>七牛</strong>：10GB永久免费存储空间,每月10GB下载流量,10万次Put请求,100万次Get请求，对于新用户来说，非常友好。价格方面，比又拍云贵。技术使用方面，开源API对于每种语言都有，但对开源程序，似乎没有官方的插件。</p>
<p><strong>文件管理方式</strong></p>
<p>又拍云：FTP、专用软件<br>七牛云：网页、专用软件</p>
<p><strong>免费方式</strong></p>
<p><strong>又拍云</strong>：加入网站联盟，在底部加上LOGO和链接 （当时我注册又拍时不需要身份拍照，不知道现在如何）</p>
<p><strong>七牛云</strong>：通过身份认证；对于新用户，七牛云存储免费赠送10G 的使用空间+10G/月的流量</p>
<p><strong>收费方式</strong><br>     七牛：七牛是按“存储+流量+访问次数”收费</p>
<pre><code>又拍云：又拍云仅按“存储+流量”收费，更实惠合理一些，
</code></pre><p><strong>开发文档</strong><br>          七牛:文档易读，参数详细，社区资源丰富，开发工具较多。</p>
<p><strong>又拍云</strong>：<br>     文档很详细，但有点乱，资源也都，有案例下载。</p>
<p>###不足之处</p>
<p>####又拍云：</p>
<p>1.删除空间之前必须删除所有文件和文件夹，FTP删起来非常麻烦，专用软件删起来很快，但依然是要等几百个文件自动一个个删除。<br>2.图片和文件空间分离，图片空间不可上传非图片格式，文件空间无法使用缩略图。（不过技术人员表示，将会进行合并！）</p>
<p>####七牛云：</p>
<p>1.绑定域名、设置防盗链时需要账户余额至少10元，说好的免费服务强行充值一波也是很醉，尽管10块很少但是……<br>2.空间内无法创建文件夹！所有文件丢在一起，原本文件夹里的文件同步到七牛以后，会把路径变成文件名。看到空间里数不完的usr/upload/2015/01/xxx.png，那种卧槽程度简直突破天际。友情提示，这种强行改文件结构的方式会影响你的数据迁出，以后迁移起来很麻烦。（可能需要Bulk Rename Utility之类的软件进行批量重命名并移动至对应文件夹）<br>3.专用软件十分难用，比又拍的更难用。</p>
<p>*本文只代表个人观点</p>
]]></content>
      
        
        <tags>
            
            <tag> 七牛云 </tag>
            
            <tag> 又拍云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC环境下用Clover制作原版安装U盘]]></title>
      <url>https://qimajiang.com/2016/12/22/MAC%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%94%A8Clover%E5%88%B6%E4%BD%9C%E5%8E%9F%E7%89%88%E5%AE%89%E8%A3%85U%E7%9B%98/</url>
      <content type="html"><![CDATA[<ul>
<li>本文介绍如何制作黑苹果的U盘镜像<a id="more"></a>
</li>
</ul>
<p>###一、模板电脑的硬件概览<br><img src="https://app.yinxiang.com/shard/s43/res/690f6ffc-8e3f-4861-8988-0657d4ec5d28" alt="enter image description here"></p>
<p>###二、准备工作<br>1、mac 系统环境，白苹果、黑屏或虚拟机都行。<br>2、UniBeast 工具（到<a href="https://www.tonymacx86.com上下载）" target="_blank" rel="noopener">https://www.tonymacx86.com上下载）</a><br>3、 MultiBeast 工具(官网 <a href="http://www.multibeast.com/" target="_blank" rel="noopener">http://www.multibeast.com/</a>)<br>4、 mac 系统安装镜像。<br>5、8G以上的 U盘。</p>
<p>###三、制作过程<br>1、注册 App ID，登录 App Store，搜索macOS Sierra ，下载系统安装装包，或者到网上下载 DMG 镜像，解压出安装包。（两者基本没什么区别）。</p>
<p>2、系统下载完成后，把系统安装包复制到Application(应用程序)目录下（从 App Store 下载的跳过此步）。</p>
<p>3、把系统的语言设置成英语，UniBeast 工具只支持英语环境。点击电脑左上角的苹果标志=》选择“系统偏好设置”=》选择“语言和地区”=》选中“英语”网上拉，如图：</p>
<p>然后注销用户，重新登录，即可把系统语言更改为英语。<br><img src="https://app.yinxiang.com/shard/s43/res/4ed33835-22b1-4cfc-9dd4-141be57479fe" alt="enter image description here"><br>4、格式化 U盘<br>（1）插入 U盘，打开“磁盘工具”，选中目标 U盘<br><img src="https://app.yinxiang.com/shard/s43/res/8b90d831-b44e-4e2c-bf36-1da48cc16089" alt="enter image description here"><br>（2） 点击 Erase 按钮，命名 USB 的名称（稍后可以重命名），格式化的格式选择  OS X Extended (Journaled) ，分区选择  GUID Partition Map<br><img src="https://app.yinxiang.com/shard/s43/res/3a955afe-1e77-4047-97b1-5c315706b604" alt="enter image description here"><br>（3）点击 Erase ，格式化完成后退出。</p>
<p>5、U盘制作<br>（1）打开 UniBeast 工具，点击 Continue, Continue, Continue, Continue, Agree<br>（2）在目标选择处，选择 USB ，然后选择 Continue 。<br><img src="https://app.yinxiang.com/shard/s43/res/0115fea2-e8c4-451f-83f5-c678594b7d37" alt="enter image description here"><br>（3）在选择安装系统处，选择 Sierra 然后点击 Continue 。<br>（4） 在启动项选择界面选择 UEFI Boot Mode（电脑主板支持 EFI） 或者Legacy Boot Mode.<br><a href="https://app.yinxiang.com/shard/s43/res/8b3d355f-10a6-4059-b1d4-8dc986d7d913" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s43/res/8b3d355f-10a6-4059-b1d4-8dc986d7d913</a><br>（5）（可选）在显卡配置界面选择你需要的配置，然后点击 Continue<br>（6）验证安装选项，然后点击 Continue，输入系统密码，点击 Install。<br><a href="https://app.yinxiang.com/shard/s43/res/7b1d3211-df84-485d-b777-3b4307c048a2" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s43/res/7b1d3211-df84-485d-b777-3b4307c048a2</a><br>（7）UniBeast 开始制作，整个过程需要花费一定的时间。慢慢等待吧。<br><a href="https://app.yinxiang.com/shard/s43/res/77124551-59bc-4cdf-86e3-4ec30fc04c63" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s43/res/77124551-59bc-4cdf-86e3-4ec30fc04c63</a><br>四、主板设置<br>Disable Secure Boot<br>Disable VT for Direct I/O<br>Set Auto OS Recovery Threshold to OFF<br>Set SATA Operation to AHCI or Disabled<br>Optional: Disable Computrace<br>Optional: Enable Unobtrusive Mode<br>Optional: Enable USB PowerShare<br>Optional: Set Fn Lock Options to Lock Mode Enable/Seconda<br><img src="https://app.yinxiang.com/shard/s43/res/056bb752-99bc-4a23-9366-4c48034dfecd" alt="enter image description here"></p>
]]></content>
      
        
        <tags>
            
            <tag> MAC OSX86 </tag>
            
            <tag> Clover </tag>
            
            <tag> U盘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[editormd 的使用介绍]]></title>
      <url>https://qimajiang.com/2016/11/20/editormd/</url>
      <content type="html"><![CDATA[<ul>
<li>主要介绍开源markdown编辑器editor.md的使用方法<a id="more"></a>
<h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1></li>
</ul>
<p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p>
<p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/bower/v/editor.md.svg" alt=""></p>
<p><strong>目录 (Table of Contents)</strong></p>
<p>[TOCM]</p>
<p>[TOC]</p>
<h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr>
<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>
<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>
<p><strong>缩写(同HTML的abbr标签)</strong></p>
<blockquote>
<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>
</blockquote>
<p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p>
<h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote>
<p>引用文本 Blockquotes</p>
</blockquote>
<p>引用的行内混合 Blockquotes</p>
<blockquote>
<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="noopener">普通链接</a>。</p>
</blockquote>
<h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="noopener">普通链接</a></p>
<p><a href="http://localhost/" title="普通链接带标题" target="_blank" rel="noopener">普通链接带标题</a></p>
<p>直接链接：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p>
<p><a href="http://www.this-anchor-link.com/" target="_blank" rel="noopener">锚点链接</a> </p>
<p><a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">mailto:test.test@gmail.com</a></p>
<p>GFM a-tail link @pandao  邮箱地址自动链接 <a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">test.test@gmail.com</a>  <a href="mailto:www@vip.qq.com" target="_blank" rel="noopener">www@vip.qq.com</a></p>
<blockquote>
<p>@pandao</p>
</blockquote>
<h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>
<h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>
<pre><code>&lt;?php
    echo &quot;Hello world!&quot;;
?&gt;
</code></pre><p>预格式化文本：</p>
<pre><code>| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码　"></a>JS代码　</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> box.fn.init();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.prototype = box.fn = &#123;</span><br><span class="line">        init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'box.init()'</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">		add : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">			alert(<span class="string">"add"</span>, str);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		remove : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">			alert(<span class="string">"remove"</span>, str);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    box.fn.init.prototype = box.fn;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">window</span>.box =box;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testBox = box();</span><br><span class="line">testBox.add(<span class="string">"jQuery"</span>).remove(<span class="string">"jQuery"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">color</span>:<span class="number">#444</span>;<span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>, Tahoma, <span class="string">"Hiragino Sans GB"</span>, Arial;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p>
<p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" alt=""></p>
<blockquote>
<p>Follow your heart.</p>
</blockquote>
<p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" alt=""></p>
<blockquote>
<p>图为：厦门白城沙滩</p>
</blockquote>
<p>图片加链接 (Image + Link)：</p>
<p><a href="https://pandao.github.io/editor.md/images/7.jpg" title="李健首张专辑《似水流年》封面" target="_blank" rel="noopener"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" alt=""></a></p>
<blockquote>
<p>图为：李健首张专辑《似水流年》封面</p>
</blockquote>
<hr>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>
<li>列表一</li>
<li>列表二<ul>
<li>列表二-1</li>
<li>列表二-2</li>
<li>列表二-3</li>
</ul>
</li>
<li>列表三<ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
</li>
</ul>
<h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol>
<li>第一行</li>
<li>第二行</li>
<li>第三行</li>
</ol>
<h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul>
<li>[x] GFM task list 1</li>
<li>[x] GFM task list 2</li>
<li>[ ] GFM task list 3<ul>
<li>[ ] GFM task list 3-1</li>
<li>[ ] GFM task list 3-2</li>
<li>[ ] GFM task list 3-3</li>
</ul>
</li>
<li>[ ] GFM task list 4<ul>
<li>[ ] GFM task list 4-1</li>
<li>[ ] GFM task list 4-2</li>
</ul>
</li>
</ul>
<hr>
<h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell </td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help()</code></td>
<td>Display the help window.</td>
</tr>
<tr>
<td><code>destroy()</code></td>
<td><strong>Destroy your computer!</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">Left-Aligned</th>
<th style="text-align:center">Center Aligned</th>
<th style="text-align:right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">col 3 is</td>
<td style="text-align:center">some wordy text</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td style="text-align:left">col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td style="text-align:left">zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Item</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>Phone</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>Pipe</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>
<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>
<p>18&ordm;C  &quot;  &apos;</p>
<p>[========]</p>
<h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote>
<p>Blockquotes :star:</p>
</blockquote>
<h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>
<li>[x] :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>
<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>
<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>
<li>[ ] []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao; </li>
<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>
<li>[ ] :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li>
<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li>
</ul>
</li>
</ul>
<h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>
<p>[========]</p>
<h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>
<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>
<p>$$x &gt; y$$</p>
<p>$$(\sqrt{3x-1}+(1+x)^2)$$</p>
<p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p>
<p>多行公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle </span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure>
<h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote>
<p>Print Test: Ctrl + P</p>
</blockquote>
<p>[========]</p>
<h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<p>[========]</p>
<h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello </span><br><span class="line">Note right of China: China thinks\nabout it </span><br><span class="line">China--&gt;Andrew: How are you? </span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
        
        <tags>
            
            <tag> editor.md </tag>
            
            <tag> markdown </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
